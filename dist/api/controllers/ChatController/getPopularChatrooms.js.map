{"version":3,"sources":["../api/controllers/ChatController/getPopularChatrooms.ts"],"names":[],"mappings":"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","file":"getPopularChatrooms.js","sourcesContent":["import { RemoteSocket } from 'socket.io';\nimport { DefaultEventsMap } from 'socket.io/dist/typed-events';\nimport { RedstoneRequest, RedstoneResponse, SanitizedClient, EventObj } from '@Types';\nimport { RedisService, ChatService, ClientService, EventService } from '@Services';\nimport { ChatMessage, Record, EventStackNews, sequelize, Sequelize } from '@Models';\n\ninterface PopularChat {\n  id: string;\n  chatId: string;\n  eventId: number;\n  editorIds: number[];\n  editorIdsNow: number[];\n  speakerIds: number[];\n  speakerIdsNow: number[];\n  chatterIds?: number[];\n  count: number;\n  eventOwner?: SanitizedClient;\n  updatedAt: string;\n  event?: EventObj;\n}\n\nasync function getPopularChatrooms(req: RedstoneRequest, res: RedstoneResponse) {\n  const key = 'popular-chatrooms-60';\n  const existing = await RedisService.get(key);\n  if (existing) return res.status(200).json({ chatrooms: existing });\n\n  const pageSize = 200;\n\n  let messages: ChatMessage[] = [];\n  const eventEdits: { [index: string]: Record[] } = {};\n  const eventMessages: { [index: string]: ChatMessage[] } = {};\n  const eventIds = new Set<number>();\n  const events: { [index: string]: EventObj } = {};\n  let edits: Record[] = [];\n  let chats: PopularChat[] = [];\n  let page = 0;\n\n  const firstMessageSql = `\n    SELECT * FROM \"chatMessage\"\n    WHERE \"chatId\" LIKE 'chat-newsroom%' AND \"createdAt\" >= $1\n    ORDER BY \"createdAt\" DESC\n  `;\n\n  const messageSql = `\n    SELECT * FROM \"chatMessage\"\n    WHERE \"chatId\" LIKE 'chat-newsroom%' AND \"createdAt\" < $1\n    ORDER BY \"createdAt\" DESC\n    LIMIT ${pageSize}\n  `;\n\n  let count = 0;\n  let i = 0;\n  let j = 0;\n\n  while (chats.filter(c => c.count > 0).length < 10) {\n    let moreMessages: ChatMessage[];\n    if (page === 0) {\n      moreMessages = await sequelize.query<ChatMessage>(firstMessageSql, {\n        type: Sequelize.QueryTypes.SELECT,\n        bind: [new Date(Date.now() - 12 * 60 * 60 * 1000)],\n      });\n    } else {\n      moreMessages = await sequelize.query<ChatMessage>(messageSql, {\n        type: Sequelize.QueryTypes.SELECT,\n        bind: [messages.length === 0 ? new Date() : messages[messages.length - 1].createdAt],\n      });\n    }\n    messages = [...messages, ...moreMessages];\n\n    const records = await Record.findAll({\n      where: {\n        action: {\n          [Sequelize.Op.or]: [\n            'createStack',\n            'addNewsToStack',\n            'addNewsToEvent',\n            'updateStackOrders',\n            'makeCommitForEvent',\n          ],\n        },\n        createdAt: page === 0 ? {\n          [Sequelize.Op.gte]: new Date(Date.now() - 12 * 60 * 60 * 1000),\n        } : {\n          [Sequelize.Op.lt]: edits.length > 0 ? edits[edits.length - 1].createdAt : Date.now(),\n        },\n      },\n      order: [['createdAt', 'DESC']],\n      limit: page === 0 ? undefined : pageSize,\n    });\n\n    edits = [...edits, ...records];\n\n    if (page !== 0 && moreMessages.length === 0 && records.length === 0) break;\n\n    page += 1;\n\n    let latest: Date = new Date();\n    while (count < page * pageSize && (i < messages.length - 1 || j < edits.length - 1)) {\n      if (i >= messages.length - 1) {\n        j += 1;\n        latest = edits[j].createdAt;\n      } else if (j >= edits.length - 1) {\n        i += 1;\n        latest = messages[i].createdAt;\n      } else if (messages[i].createdAt < edits[j].createdAt) {\n        i += 1;\n        latest = messages[i].createdAt;\n      } else {\n        j += 1;\n        latest = edits[j].createdAt;\n      }\n\n      count += 1;\n    }\n\n    const addEventEdit = (eventId: number, record: Record) => {\n      if (!eventEdits[eventId]) eventEdits[eventId] = [];\n      eventEdits[eventId].push(record);\n      eventIds.add(eventId);\n    };\n\n    for (const record of records) {\n      switch (record.action) {\n      case 'createStack':\n        addEventEdit(record.data.eventId, record);\n        break;\n      case 'addNewsToStack':\n        addEventEdit((record.data as EventStackNews).eventId, record);\n        break;\n      case 'makeCommitForEvent':\n      case 'updateStackOrders':\n      case 'addNewsToEvent':\n        addEventEdit(record.target, record);\n      }\n    }\n\n    for (const message of moreMessages) {\n      const eventId = +message.chatId.slice('chat-newsroom:'.length);\n      if (!eventMessages[eventId]) eventMessages[eventId] = [];\n      eventMessages[eventId].push(message);\n      eventIds.add(eventId);\n    }\n\n    if (page === 1 && count < pageSize) continue;\n\n    const within = new Date(Date.now() - 30 * 60 * 1000).toISOString();\n    const withinDate = new Date(within);\n\n    chats = [];\n    await Promise.all([...eventIds].map(async eventId => {\n      if (!events[eventId]) {\n        events[eventId] = await EventService.findEvent(eventId, { plain: true, eventOnly: true });\n      }\n      const event = events[eventId];\n      if (event.status !== 'admitted') return;\n\n      const eventRecords = (eventEdits[eventId] || []).filter((r, idx) => {\n        if (r.createdAt < latest) return false;\n        if (idx === 0) return true;\n        return !(r.action === 'updateStackOrders' &&\n          eventEdits[eventId][idx - 1].action === 'updateStackOrders');\n      });\n\n      const chatId = ChatService.getChatId('newsroom', +eventId);\n      const eventMessage = (eventMessages[eventId] || [])\n        .filter(m => m.createdAt >= latest);\n\n      if (eventRecords.length === 0 && eventMessage.length === 0) return;\n\n      chats.push({\n        eventId: +eventId,\n        event,\n        id: chatId,\n        chatId,\n        count: eventRecords.length + eventMessage.length,\n        updatedAt: eventRecords.length > 0 ? eventRecords[0].createdAt : event.updatedAt,\n        editorIds: eventRecords.map(r => r.owner),\n        editorIdsNow: eventRecords.filter(r => r.createdAt >= withinDate).map(r => r.owner),\n        speakerIds: eventMessage.map(m => m.authorId),\n        speakerIdsNow: eventMessage.filter(m => m.createdAt >= withinDate).map(m => m.authorId),\n      });\n    }));\n\n    chats.sort((a, b) => b.count - a.count);\n    chats = chats.slice(0, 10);\n  }\n\n  await Promise.all(chats.map(async (chat) => {\n    const owner = await ClientService.findClient(chat.event.ownerId, {\n      withAuths: false,\n      withSubscriptions: false,\n    });\n    chat.eventOwner = ClientService.sanitizeClient(owner);\n    const editorIds: number[] = [];\n    for (let i = 0; i < chat.editorIds.length; i++) {\n      if (!editorIds.includes(chat.editorIds[i])) {\n        editorIds.push(chat.editorIds[i]);\n      }\n    }\n\n    const speakerIds: number[] = [];\n    for (let i = 0; i < chat.speakerIds.length; i++) {\n      if (!speakerIds.includes(chat.speakerIds[i])) {\n        speakerIds.push(chat.speakerIds[i]);\n      }\n    }\n\n    chat.editorIds = editorIds;\n    chat.speakerIds = speakerIds;\n    chat.editorIdsNow = [...new Set(chat.editorIdsNow)];\n    chat.speakerIdsNow = [...new Set(chat.speakerIdsNow)];\n    const chatterSocket = await ChatService.getChatSocket('newsroom', chat.eventId);\n    let sockets: RemoteSocket<DefaultEventsMap, any>[] = [];\n    try {\n      sockets = await chatterSocket.fetchSockets();\n    } catch (err) {\n      // Do nothing\n    }\n    const clientIds = await Promise.all(sockets.map(socket => {\n      return RedisService.get(`socket:${socket.id}`);\n    }));\n    chat.chatterIds = [...new Set(clientIds)];\n  }));\n\n  await RedisService.set(key, chats);\n  await RedisService.expire(key, 30);\n\n  res.status(200).json({ chatrooms: chats });\n}\n\nexport default getPopularChatrooms;\n"],"sourceRoot":"../../../../src"}