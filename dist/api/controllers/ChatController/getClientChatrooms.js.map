{"version":3,"sources":["../api/controllers/ChatController/getClientChatrooms.ts"],"names":[],"mappings":"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","file":"getClientChatrooms.js","sourcesContent":["import { RemoteSocket } from 'socket.io';\nimport { DefaultEventsMap } from 'socket.io/dist/typed-events';\nimport { RedstoneRequest, RedstoneResponse, SanitizedClient, EventObj } from '@Types';\nimport { RedisService, ChatService, ClientService } from '@Services';\nimport { ChatMessage, Record, EventStackNews, Event, Chat, ChatMember, sequelize, Sequelize } from '@Models';\n\ninterface ClientChat {\n  chatId: string;\n  eventId: number;\n  editorIds: number[];\n  editorIdsNow: number[];\n  speakerIds: number[];\n  speakerIdsNow: number[];\n  chatterIds?: number[];\n  count: number;\n  unreadMessagesCount: number;\n  eventOwner?: SanitizedClient;\n  updatedAt: string;\n  event?: EventObj;\n}\n\nasync function getChatroomInfo(chatId: string, clientId: number) {\n  const chatMember = await ChatMember.findOne({\n    where: {\n      chatId,\n      clientId,\n      lastSpoke: {\n        [Sequelize.Op.ne]: null,\n      },\n    },\n  });\n  if (!chatMember) return;\n\n  const [type, ids] = ChatService.revealChatroom(chatId);\n  const key = `chatroom-info-${ChatService.getChatId(type, ids)}`;\n  let chat: ClientChat = await RedisService.get(key);\n  if (!chat) {\n    chat = (await Chat.findByPk(chatId)).get({ plain: true }) as any;\n    const within = new Date(Date.now() - 30 * 60 * 1000);\n    if (type === 'newsroom') {\n      const eventId = ids as number;\n      chat.event = await Event.findByPk(eventId);\n      const owner = await ClientService.findClient(chat.event.ownerId, {\n        withAuths: false,\n        withSubscriptions: false,\n      });\n      chat.eventOwner = ClientService.sanitizeClient(owner);\n      const records = await sequelize.query<Record>(`\n        SELECT *\n          FROM record\n          WHERE (action IN ('createStack', 'addNewsToStack') AND data->>'eventId' = '${eventId}')\n          OR (action IN ('makeCommitForEvent', 'updateStackOrders', 'addNewsToEvent', 'createEvent') AND target = ${eventId})\n          ORDER BY \"createdAt\" DESC\n          LIMIT 100\n      `, {\n        type: Sequelize.QueryTypes.SELECT,\n      });\n\n      chat.editorIds = Array.from(new Set(records.map(r => r.owner).filter(c => c)));\n      chat.editorIdsNow = Array.from(new Set(records.filter(r => r.createdAt >= within && r.owner).map(r => r.owner)));\n    }\n\n    const messages = await ChatMessage.findAll({\n      where: { chatId },\n      order: [['createdAt', 'DESC']],\n      limit: 50,\n    });\n\n    chat.speakerIds = Array.from(new Set(messages.map(m => m.authorId)));\n    chat.speakerIdsNow = Array.from(new Set(messages.filter(m => m.createdAt >= within).map(m => m.authorId)));\n\n    const chatterSocket = await ChatService.getChatSocket(chatId);\n    let sockets: RemoteSocket<DefaultEventsMap, any>[] = [];\n    try {\n      sockets = await chatterSocket.fetchSockets();\n    } catch (err) {\n      // Do nothing\n    }\n    const clientIds = await Promise.all(sockets.map(socket => {\n      return RedisService.get(`socket:${socket.id}`);\n    }));\n    chat.chatterIds = [...new Set(clientIds)];\n\n    await RedisService.set(key, chat);\n    await RedisService.expire(key, 60);\n  }\n\n  chat.unreadMessagesCount = chatMember.lastRead ? await ChatMessage.count({\n    where: {\n      chatId,\n      createdAt: {\n        [Sequelize.Op.gt]: chatMember.lastRead,\n      },\n    },\n  }) : 0;\n\n  return chat;\n}\n\n\nasync function getClientChatrooms(req: RedstoneRequest, res: RedstoneResponse) {\n  const key = `client-chatrooms-60-${req.session.clientId}`;\n  const existing = await RedisService.get(key);\n  if (existing) {\n    return res.status(200).json({\n      chatrooms: (await Promise.all(existing.map((c: string) => getChatroomInfo(c, req.session.clientId)))).filter(c => c),\n    });\n  }\n\n  const chatIds = new Set<string>();\n\n  const recentMessageSql = `\n    SELECT DISTINCT(A.\"chatId\")\n    FROM (\n      SELECT \"chatId\", \"createdAt\"\n      FROM \"chatMessage\"\n      WHERE \"authorId\" = ${req.session.clientId}\n      ORDER BY \"createdAt\" DESC\n    ) as A\n    LIMIT 10  \n  `;\n\n  const messages = await sequelize.query<ChatMessage>(recentMessageSql, {\n    type: Sequelize.QueryTypes.SELECT,\n  });\n\n  for (const message of messages) {\n    chatIds.add(message.chatId);\n  }\n\n  const recordsQuery = {\n    action: {\n      [Sequelize.Op.or]: [\n        'createStack',\n        'addNewsToStack',\n        'addNewsToEvent',\n        'updateStackOrders',\n        'makeCommitForEvent',\n      ],\n    },\n    owner: req.session.clientId,\n  };\n\n  const twoDays = new Date(Date.now() - 48 * 60 * 60 * 1000);\n  let records = await Record.findAll({\n    where: {\n      ...recordsQuery,\n      createdAt: {\n        [Sequelize.Op.gte]: twoDays,\n      },\n    },\n    order: [['createdAt', 'DESC']],\n    limit: 500,\n  });\n\n  if (records.length < 100) {\n    const recordsB = await Record.findAll({\n      where: {\n        ...recordsQuery,\n        createdAt: {\n          [Sequelize.Op.lt]: twoDays,\n        },\n      },\n      order: [['createdAt', 'DESC']],\n      limit: 100 - records.length,\n    });\n\n    records = [...records, ...recordsB];\n  }\n\n  for (const record of records) {\n    switch (record.action) {\n    case 'createStack':\n      chatIds.add(ChatService.getChatId('newsroom', record.data.eventId));\n      break;\n    case 'addNewsToStack':\n      chatIds.add(ChatService.getChatId('newsroom', (record.data as EventStackNews).eventId));\n      break;\n    case 'makeCommitForEvent':\n    case 'updateStackOrders':\n    case 'addNewsToEvent':\n      chatIds.add(ChatService.getChatId('newsroom', record.target));\n    }\n  }\n\n  const promises = Array.from(chatIds).filter(c => c).map(c => getChatroomInfo(c, req.session.clientId));\n  const chats = (await Promise.all(promises)).filter(c => c);\n\n  await RedisService.set(key, Array.from(chatIds));\n  await RedisService.expire(key, 60);\n\n  res.status(200).json({ chatrooms: chats });\n}\n\nexport default getClientChatrooms;\n"],"sourceRoot":"../../../../src"}