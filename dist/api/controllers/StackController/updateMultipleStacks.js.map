{"version":3,"sources":["../api/controllers/StackController/updateMultipleStacks.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,qCAA2C;AAC3C,yCAAwD;AACxD,oDAAuB;AAEvB,SAAe,oBAAoB,CAAC,GAAoB,EAAE,GAAqB;;QAC7E,MAAM,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAE/B,IAAI,CAAC,gBAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,mBAAmB;aAC7B,CAAC,CAAC;SACJ;QAED,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,wBAAY,CAAC,WAAW,CAAC;gBAC5D,EAAE,EAAE,KAAK,CAAC,EAAE;gBACZ,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;gBAC9B,WAAW;aACZ,CAAC,CAAC,CAAC;YACJ,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzB,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,CAAC;YAC7F,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACpD,IAAI,WAAW,EAAE;gBACf,MAAM,yBAAa,CAAC,MAAM,CAAC;oBACzB,KAAK,EAAE,OAAO;oBACd,MAAM,EAAE,KAAK,CAAC,OAAO;oBACrB,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;oBAC3B,MAAM,EAAE,mBAAmB;iBAC5B,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;aACrB;YAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,MAAM;aAChB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,oBAAoB,CAAC","file":"updateMultipleStacks.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { sequelize, Stack } from '@Models';\nimport { StackService, RecordService } from '@Services';\nimport _ from 'lodash';\n\nasync function updateMultipleStacks(req: RedstoneRequest, res: RedstoneResponse) {\n  const { stackList } = req.body;\n\n  if (!_.isArray(stackList) || stackList.length === 0) {\n    return res.status(400).json({\n      message: '错误的输入参数：stackList',\n    });\n  }\n\n  await sequelize.transaction(async transaction => {\n    const queue = stackList.map(stack => StackService.updateStack({\n      id: stack.id,\n      data: stack,\n      clientId: req.session.clientId,\n      transaction,\n    }));\n    await Promise.all(queue);\n    const updateOrder = stackList.filter(s => s.order !== undefined).length === stackList.length;\n    const stack = await Stack.findByPk(stackList[0].id);\n    if (updateOrder) {\n      await RecordService.update({\n        model: 'Event',\n        target: stack.eventId,\n        owner: req.session.clientId,\n        action: 'updateStackOrders',\n      }, { transaction });\n    }\n\n    return res.status(201).json({\n      message: '修改成功',\n    });\n  });\n}\n\nexport default updateMultipleStacks;\n"],"sourceRoot":"../../../../src"}