{"version":3,"sources":["../api/controllers/ClientController/getClientList.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAiC;AAEjC,yCAAwC;AAExC,SAAe,aAAa,CAAC,GAAoB,EAAE,GAAqB;;QACtE,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,QAAQ,CAAC;QAEb,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;YAC7B,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;SACtB;aAAM,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;YACtC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAc,IAAI,GAAG,CAAC,CAAC;SAClD;QAED,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE;YAC9B,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;SAC3B;aAAM,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE;YACvC,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;SAC5B;QAED,IAAI,KAAU,CAAC;QACf,IAAI,QAAQ,EAAE;YACZ,IAAI;gBACF,KAAK,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;aACxE;YAAC,OAAO,GAAG,EAAE,EAAC,WAAW,EAAC;YAE3B,KAAK,GAAG,uBAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;SAC9C;QAED,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC;YACnC,KAAK,EAAE,KAAK,IAAI,EAAE;YAClB,KAAK,EAAE,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC9B,UAAU;YACV,MAAM,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE;YACvB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;IAChD,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","file":"getClientList.js","sourcesContent":["import { Client } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { UtilService } from '@Services';\n\nasync function getClientList(req: RedstoneRequest, res: RedstoneResponse) {\n  let page = 1;\n  let whereStr;\n\n  if (req.body && req.body.page) {\n    page = req.body.page;\n  } else if (req.query && req.query.page) {\n    page = parseInt(req.query.page as string || '1');\n  }\n\n  if (req.body && req.body.where) {\n    whereStr = req.body.where;\n  } else if (req.query && req.query.where) {\n    whereStr = req.query.where;\n  }\n\n  let where: any;\n  if (whereStr) {\n    try {\n      where = typeof whereStr === 'string' ? JSON.parse(whereStr) : whereStr;\n    } catch (err) {/* happy */}\n\n    where = UtilService.convertWhereQuery(where);\n  }\n\n  const attributes = ['id', 'username'];\n  const clients = await Client.findAll({\n    where: where || {},\n    order: [['updatedAt', 'DESC']],\n    attributes,\n    offset: (page - 1) * 10,\n    limit: 10,\n  });\n\n  res.status(200).json({ clientList: clients });\n}\n\nexport default getClientList;\n"],"sourceRoot":"../../../../src"}