{"version":3,"sources":["../api/controllers/ClientController/verifyToken.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,qCAAyC;AACzC,yCAA0C;AAE1C,SAAe,WAAW,CAAE,GAAoB,EAAE,GAAqB;;QACrE,IAAI,KAAK,CAAC;QACV,IAAI,EAAE,CAAC;QACP,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;YAC7C,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YACvB,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;SAClB;aAAM,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE;YACvD,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;YACxB,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;SACnB;QAED,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,iBAAiB;aAC3B,CAAC,CAAC;SACJ;QAED,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC;YAClC,KAAK,EAAE;gBACL,MAAM,EAAE,+BAA+B;gBACvC,MAAM,EAAE,CAAC,EAAE;aACZ;YACD,KAAK,EAAE,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;SAC/B,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,iBAAiB,KAAK,KAAK,EAAE;YAC3C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;QAED,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;YACvD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;SACJ;QAED,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE3D,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;QAED,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;QAC5B,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAEpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAC;QAEH,yBAAa,CAAC,wBAAwB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACrD,CAAC;CAAA;AAED,kBAAe,WAAW,CAAC","file":"verifyToken.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { Record, Client } from '@Models';\nimport { ClientService } from '@Services';\n\nasync function verifyToken (req: RedstoneRequest, res: RedstoneResponse) {\n  let token;\n  let id;\n  if (req.body && req.body.token && req.body.id) {\n    token = req.body.token;\n    id = req.body.id;\n  } else if (req.query && req.query.token && req.query.id) {\n    token = req.query.token;\n    id = req.query.id;\n  }\n\n  if (!(token && id)) {\n    return res.status(400).json({\n      message: '缺少参数：token 或 id',\n    });\n  }\n\n  const record = await Record.findOne({\n    where: {\n      action: 'createClientVerificationToken',\n      target: +id,\n    },\n    order: [['createdAt', 'DESC']],\n  });\n\n  if (!record) {\n    return res.status(404).json({\n      message: '未找到该 token',\n    });\n  }\n\n  if (record.data.verificationToken !== token) {\n    return res.status(404).json({\n      message: '该 token 无效',\n    });\n  }\n\n  if (new Date(record.data.expire).getTime() < Date.now()) {\n    return res.status(404).json({\n      message: '该 token 已失效',\n    });\n  }\n\n  const client = await Client.findByPk(record.data.clientId);\n\n  if (!client) {\n    return res.status(404).json({\n      message: '该 token 无效',\n    });\n  }\n\n  client.emailVerified = true;\n  await client.save();\n\n  res.status(201).json({\n    message: '账户验证成功',\n  });\n\n  ClientService.updateElasticsearchIndex({ client });\n}\n\nexport default verifyToken;\n"],"sourceRoot":"../../../../src"}