{"version":3,"sources":["../api/controllers/ClientController/register.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,qCAAoC;AACpC,yCAA0C;AAG1C,SAAe,QAAQ,CAAC,GAAoB,EAAE,GAAqB;;QACjE,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC;QACT,IAAI,IAAI,CAAC;QAET,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACrE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,0CAA0C;aACpD,CAAC,CAAC;SACJ;QAED,yBAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9C,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,IAAI,MAAM,GAAG,MAAM,yBAAa,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACzD,SAAS,EAAE,KAAK;gBAChB,iBAAiB,EAAE,KAAK;aACzB,CAAC,CAAC;YAEH,MAAM,GAAG,MAAM,KAAI,MAAM,yBAAa,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE;gBAC5D,SAAS,EAAE,KAAK;gBAChB,iBAAiB,EAAE,KAAK;aACzB,CAAC,CAAA,CAAC;YAEH,IAAI,MAAM,EAAE;gBACV,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ;oBAC/C,CAAC,CAAC,UAAU;oBACZ,CAAC,CAAC,SAAS,CAAC;gBACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;aAC1C;YAED,IAAI;gBACF,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChC,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,mCAAmC;iBAC7C,CAAC,CAAC;aACJ;YAED,MAAM,GAAG,MAAM,yBAAa,CAAC,YAAY,CAAC;gBACxC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,cAAc,EAAE,IAAI;gBACpB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,EAAE,WAAW,CAAC,CAAC;YAEhB,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;YACjC,MAAM,SAAS,GAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACnD,OAAO,SAAS,CAAC,QAAQ,CAAC;YAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,qBAAqB;gBAC9B,MAAM,EAAE,SAAS;aAClB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,QAAQ,CAAC","file":"register.js","sourcesContent":["import * as bcrypt from 'bcrypt';\nimport { sequelize } from '@Models';\nimport { ClientService } from '@Services';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\n\nasync function register(req: RedstoneRequest, res: RedstoneResponse) {\n  const data = req.body;\n  let salt;\n  let hash;\n\n  if (!data.username || !data.email || !data.password || !data.nickname) {\n    return res.status(400).json({\n      message: '缺少参数：username，email，nickname 或 password。',\n    });\n  }\n\n  ClientService.validatePassword(data.password);\n\n  await sequelize.transaction(async transaction => {\n    let client = await ClientService.findClient(data.username, {\n      withAuths: false,\n      withSubscriptions: false,\n    });\n\n    client = client || await ClientService.findClient(data.email, {\n      withAuths: false,\n      withSubscriptions: false,\n    });\n\n    if (client) {\n      const message = client.username === data.username\n        ? '该用户名已被占用'\n        : '该邮箱已被占用';\n      return res.status(406).json({ message });\n    }\n\n    try {\n      salt = await bcrypt.genSalt(10);\n      hash = await bcrypt.hash(data.password, salt);\n    } catch (err) {\n      return res.status(500).json({\n        message: 'Error occurs when generating hash',\n      });\n    }\n\n    client = await ClientService.createClient({\n      username: data.username,\n      nickname: data.nickname,\n      hashedPassword: hash,\n      email: data.email,\n      inviteCode: data.inviteCode,\n    }, transaction);\n\n    req.session.clientId = client.id;\n    const clientObj: any = client.get({ plain: true });\n    delete clientObj.password;\n    res.status(201).json({\n      message: '注册成功，请在三天内至邮箱查收验证邮件',\n      client: clientObj,\n    });\n  });\n}\n\nexport default register;\n"],"sourceRoot":"../../../../src"}