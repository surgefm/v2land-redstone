{"version":3,"sources":["../api/controllers/ClientController/changePassword.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,qCAA4C;AAC5C,6CAA8D;AAE9D,SAAe,cAAc,CAAC,GAAoB,EAAE,GAAqB;;QACvE,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC;QACT,IAAI,IAAI,CAAC;QAET,IACE,OAAO,IAAI,CAAC,EAAE,KAAK,WAAW;YAC9B,OAAO,IAAI,CAAC,QAAQ,KAAK,WAAW,EACpC;YACA,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,MAAM;aAChB,CAAC,CAAC;SACJ;QAED,wBAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9C,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;QACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC;QAEzB,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC;QAErC,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,YAAY,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC;gBACxC,KAAK,EAAE;oBACL,EAAE,EAAE,QAAQ;iBACb;gBACD,WAAW;aACZ,CAAC,CAAC;YAEH,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;gBACvC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,SAAS;iBACnB,CAAC,CAAC;aACJ;YAED,IAAI,QAAQ,KAAK,QAAQ,IAAI,UAAU,CAAC,OAAO,EAAE;gBAC/C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,eAAe;iBACzB,CAAC,CAAC;aACJ;YAED,IAAI;gBACF,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChC,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACZ,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;iBAC5B,CAAC,CAAC;aACJ;YAED,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC7B,MAAM,YAAY,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;YAEzC,MAAM,wBAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,sBAAsB;gBAC9B,MAAM,EAAE,QAAQ;gBAChB,MAAM,EAAE,QAAQ;aACjB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,cAAc,CAAC","file":"changePassword.js","sourcesContent":["import * as bcrypt from 'bcrypt';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { Client, sequelize } from '@Models';\nimport { ClientService, RecordService } from '~/api/services';\n\nasync function changePassword(req: RedstoneRequest, res: RedstoneResponse) {\n  const data = req.body;\n  let salt;\n  let hash;\n\n  if (\n    typeof data.id === 'undefined' ||\n    typeof data.password === 'undefined'\n  ) {\n    return res.status(404).json({\n      message: '参数错误',\n    });\n  }\n\n  ClientService.validatePassword(data.password);\n\n  const { clientId } = req.session;\n  const targetId = data.id;\n\n  const selfClient = req.currentClient;\n\n  await sequelize.transaction(async transaction => {\n    const targetClient = await Client.findOne({\n      where: {\n        id: targetId,\n      },\n      transaction,\n    });\n\n    if (typeof targetClient === 'undefined') {\n      return res.status(500).json({\n        message: '找不到目标用户',\n      });\n    }\n\n    if (targetId !== clientId && selfClient.isAdmin) {\n      return res.status(500).json({\n        message: '您没有修改此用户密码的权限',\n      });\n    }\n\n    try {\n      salt = await bcrypt.genSalt(10);\n      hash = await bcrypt.hash(data.password, salt);\n    } catch (err) {\n      req.log.error(err);\n      return res.status(500).json({\n        message: '服务器发生未知错误，请联系开发者',\n      });\n    }\n\n    targetClient.password = hash;\n    await targetClient.save({ transaction });\n\n    await RecordService.update({\n      model: 'Client',\n      action: 'updateClientPassword',\n      client: targetId,\n      target: targetId,\n    }, { transaction });\n\n    res.status(201).send({\n      message: '更新密码成功',\n    });\n  });\n}\n\nexport default changePassword;\n"],"sourceRoot":"../../../../src"}