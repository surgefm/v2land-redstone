{"version":3,"sources":["../api/controllers/AuthController/telegramRedirect.ts"],"names":[],"mappings":"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","file":"telegramRedirect.js","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable camelcase */\nimport crypto, { BinaryLike } from 'crypto';\nimport { Auth } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { RecordService, AuthService, UploadService, ClientService } from '@Services';\nimport { TELE_TOKEN } from '@Services/TelegramService';\n\nasync function telegramRedirect(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!TELE_TOKEN) {\n    return res.status(503).json({\n      message: '暂不支持 Telegram 绑定',\n    });\n  }\n\n  if (!(req.query && req.query.res)) {\n    return res.status(400).json({\n      message: '请求缺少 res',\n    });\n  }\n\n  const r = JSON.parse(decodeURIComponent(req.query.res as string));\n  const { first_name, last_name, id, photo_url, username, hash } = r;\n  const dataCheckString = Object.keys(r).filter(r => r !== 'hash').sort().map(k => `${k}=${r[k]}`).join('\\n');\n  const secretKey = crypto.createHash('sha256').update(TELE_TOKEN).digest() as unknown as BinaryLike;\n  const hashed = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');\n  if (hashed !== hash) {\n    return res.status(404).json({\n      message: 'hash 错误',\n    });\n  }\n\n  const existingAuth = await Auth.findOne({\n    where: {\n      profileId: `${id}`,\n      site: 'telegram',\n    },\n  });\n\n  if (existingAuth) {\n    existingAuth.profile = r;\n    if (existingAuth.owner) {\n      await existingAuth.save();\n      req.session.clientId = existingAuth.owner;\n      return res.status(200).json(AuthService.sanitize(existingAuth));\n    } else if (req.session.clientId) {\n      existingAuth.owner = req.body.clientId;\n      await existingAuth.save();\n      await RecordService.create({\n        model: 'auth',\n        action: 'authorizeThirdPartyAccount',\n        owner: req.session.clientId,\n        target: existingAuth.id,\n      });\n      return res.status(201).json(AuthService.sanitize(existingAuth));\n    }\n  }\n\n  let avatar: string;\n  if (UploadService.hasS3 && photo_url) {\n    avatar = await UploadService.uploadFromUrl(photo_url, '.jpg');\n  }\n  const clientUsername = await ClientService.randomlyGenerateUsername(username);\n\n  const newClient = await ClientService.createClient({\n    username: clientUsername,\n    nickname: `${first_name} ${last_name}`,\n    avatar,\n    inviteCode: (req.query.inviteCode as string) || '',\n  });\n\n  const auth = existingAuth || await Auth.create({\n    site: 'telegram',\n    profileId: `${id}`,\n    profile: r,\n  });\n\n  auth.owner = newClient.id;\n  await auth.save();\n\n  req.session.clientId = newClient.id;\n\n  return res.status(201).json({\n    message: '注册成功',\n    auth: AuthService.sanitize(auth),\n    client: newClient,\n  });\n}\n\nexport default telegramRedirect;\n"],"sourceRoot":"../../../../src"}