{"version":3,"sources":["../api/controllers/AuthController/twitterRedirect.ts"],"names":[],"mappings":"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","file":"twitterRedirect.js","sourcesContent":["import { Auth, sequelize } from '@Models';\nimport { oauth } from '@Configs';\nimport { AuthService, ClientService, RecordService } from '@Services';\nimport { hasS3, uploadFromUrl } from '@Services/UploadService';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\n\nasync function twitterRedirect(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.query && req.query.token && req.query.verifier)) {\n    return res.status(400).json({\n      message: '请求缺少 token 或 verifier',\n    });\n  }\n\n  const oa = oauth.twitter;\n  const { token, verifier } = req.query;\n\n  const auth = await Auth.findOne({ where: { token } });\n  if (!auth) {\n    return res.status(404).json({\n      message: '未找到该绑定信息',\n    });\n  }\n\n  const getAccessToken = (): Promise<{ accessToken: string; accessTokenSecret: string }> => {\n    return new Promise((resolve) => {\n      oa.getOAuthAccessToken(\n        token as string,\n        auth.tokenSecret,\n        verifier as string,\n        (err, accessToken, accessTokenSecret) => {\n          if (err) {\n            req.log.error(err);\n            return res.status(400).json({\n              message: '在验证绑定状况时发生了错误',\n            });\n          }\n          resolve({ accessToken, accessTokenSecret });\n        }\n      );\n    });\n  };\n\n  const { accessToken, accessTokenSecret } = await getAccessToken();\n  if (!accessToken || !accessTokenSecret) return;\n\n  const getResponse = (): Promise<string> => {\n    return new Promise((resolve) => {\n      oa.get(\n        'https://api.twitter.com/1.1/account/verify_credentials.json',\n        accessToken,\n        accessTokenSecret,\n        (err, response) => {\n          if (err) {\n            req.log.error(err);\n            return res.status(400).json({\n              message: '在验证绑定状况时发生了错误',\n            });\n          }\n          resolve(response as string);\n        }\n      );\n    });\n  };\n\n  const responseStr = await getResponse();\n  if (!responseStr) return;\n  const response = JSON.parse(responseStr);\n  auth.profileId = response.id_str;\n  const sameAuth = await Auth.findOne({\n    where: {\n      site: 'twitter',\n      profileId: response.id_str,\n    },\n  });\n\n  let account = sameAuth || auth;\n  account.accessToken = accessToken;\n  account.accessTokenSecret = accessTokenSecret;\n  await account.save();\n\n  if (!account.owner && req.session.clientId) {\n    await sequelize.transaction(async transaction => {\n      await account.update({\n        owner: req.session.clientId,\n        profile: { ...response },\n      }, { transaction });\n      await RecordService.create({\n        model: 'auth',\n        action: 'authorizeThirdPartyAccount',\n        owner: req.session.clientId,\n        target: account.id,\n      }, { transaction });\n    });\n    res.status(201).json(AuthService.sanitize(account));\n  } else if (account.owner && (!req.session.clientId ||\n    (req.session.clientId === account.owner))) {\n    await account.update({\n      profile: { ...response },\n    });\n    req.session.clientId = account.owner;\n    res.status(200).json(AuthService.sanitize(account));\n  } else {\n    const profile = { ...response };\n\n    let avatar: string;\n    if (hasS3 && profile.avatar_hd) {\n      avatar = await uploadFromUrl(profile.profile_image_url, '.jpg');\n    }\n\n    const newClient = await ClientService.createClient({\n      username: await ClientService.randomlyGenerateUsername(profile.screen_name),\n      nickname: profile.name,\n      description: profile.description,\n      avatar,\n      inviteCode: auth.inviteCode,\n    });\n    await account.update({\n      profile,\n      owner: newClient.id,\n    });\n    account = AuthService.sanitize(account);\n    req.session.clientId = newClient.id;\n\n    return res.status(201).json({\n      message: '注册成功',\n      auth: account,\n      client: newClient,\n    });\n  }\n}\n\nexport default twitterRedirect;\n"],"sourceRoot":"../../../../src"}