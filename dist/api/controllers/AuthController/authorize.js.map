{"version":3,"sources":["../api/controllers/AuthController/authorize.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,8DAA8D;AAC9D,qCAA0C;AAC1C,yCAA0C;AAU1C,SAAe,SAAS,CAAC,GAAqB,EAAE,GAAqB;;QACnE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAClC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;SACJ;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAC1B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC;SACJ;QAED,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3C,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,GAAG,CAAC,SAAS,EAAE;YACrC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC;SACJ;aAAM,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,UAAU,EAAE;YACjD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,gBAAgB;aAC1B,CAAC,CAAC;SACJ;QAED,IAAI;YACF,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;gBAC9C,MAAM,IAAI,CAAC,MAAM,CAAC;oBAChB,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ;iBACjD,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEpB,MAAM,IAAI,GAAG;oBACX,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,KAAK,EAAE,IAAI,CAAC,KAAK;iBAClB,CAAC;gBAEF,MAAM,yBAAa,CAAC,MAAM,CAAC;oBACzB,KAAK,EAAE,MAAM;oBACb,MAAM,EAAE,IAAI,CAAC,EAAE;oBACf,IAAI;oBACJ,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;oBAC3B,MAAM,EAAE,4BAA4B;iBACrC,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,MAAM;iBAChB,CAAC,CAAC;YACL,CAAC,CAAA,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,GAAG,CAAC;SACZ;IACH,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","file":"authorize.js","sourcesContent":["/* eslint-disable @typescript-eslint/member-delimiter-style */\nimport { Auth, sequelize } from '@Models';\nimport { RecordService } from '@Services';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\n\ninterface AuthorizeRequest extends RedstoneRequest {\n  body: {\n    authId: number;\n    clientId?: number;\n  }\n}\n\nasync function authorize(req: AuthorizeRequest, res: RedstoneResponse): Promise<any> {\n  if (!(req.body && req.body.authId)) {\n    return res.status(400).json({\n      message: '缺少参数：authId',\n    });\n  }\n\n  const auth = await Auth.findByPk(req.body.authId);\n  if (!auth || !auth.profile) {\n    return res.status(404).json({\n      message: '未找到该绑定信息',\n    });\n  }\n\n  const { expireTime, owner } = auth.profile;\n\n  if (!owner || owner !== req.sessionID) {\n    return res.status(403).json({\n      message: '你无权进行该绑定',\n    });\n  } else if (!expireTime || Date.now() > expireTime) {\n    return res.status(403).json({\n      message: '已过绑定时效，请重新发起绑定',\n    });\n  }\n\n  try {\n    await sequelize.transaction(async transaction => {\n      await auth.update({\n        owner: req.body.clientId || req.session.clientId,\n      }, { transaction });\n\n      const data = {\n        id: auth.id,\n        site: auth.site,\n        profileId: auth.profileId,\n        owner: auth.owner,\n      };\n\n      await RecordService.update({\n        model: 'Auth',\n        target: data.id,\n        data,\n        owner: req.session.clientId,\n        action: 'authorizeThirdPartyAccount',\n      }, { transaction });\n\n      res.status(201).json({\n        message: '绑定成功',\n      });\n    });\n  } catch (err) {\n    return err;\n  }\n}\n\nexport default authorize;\n"],"sourceRoot":"../../../../src"}