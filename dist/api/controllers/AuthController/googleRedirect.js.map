{"version":3,"sources":["../api/controllers/AuthController/googleRedirect.ts"],"names":[],"mappings":"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","file":"googleRedirect.js","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable @typescript-eslint/camelcase */\nimport { google } from 'googleapis';\nimport { GaxiosResponse } from 'gaxios';\nimport { oauth2_v2 } from 'googleapis/build/src/apis/oauth2/v2';\nimport { Auth, Client, sequelize } from '@Models';\nimport { oauth } from '@Configs';\nimport { RecordService, AuthService, ClientService } from '@Services';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { hasS3, uploadFromUrl } from '@Services/UploadService';\nimport { charset } from '@Services/UtilService/generateRandomAlphabetString';\n\nasync function googleRedirect(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.query && req.query.code && req.query.authId)) {\n    return res.status(400).json({\n      message: '请求缺少 code 或 authId',\n    });\n  }\n\n  const oa = oauth.google;\n  const { code, authId } = req.query;\n\n  const { tokens } = await oa.getToken(code as string);\n  const accessToken = tokens.access_token;\n  const refreshToken = tokens.refresh_token;\n  oa.setCredentials(tokens);\n\n  const auth = await Auth.findByPk(authId as string);\n  if (!auth) {\n    return res.status(404).json({\n      message: '未找到该绑定信息',\n    });\n  }\n\n  const response: GaxiosResponse<oauth2_v2.Schema$Userinfo> = await new Promise((resolve, reject) => {\n    google.oauth2('v2').userinfo.get({\n      auth: oa,\n    }, (err, data) => (err ? reject(err) : resolve(data)));\n  });\n\n  const profile = response.data;\n  auth.profileId = profile.id + '';\n\n  const sameAuth = await Auth.findOne({\n    where: {\n      site: 'google',\n      profileId: profile.id + '',\n    },\n  });\n\n  let account = sameAuth || auth;\n  account.accessToken = accessToken;\n  account.refreshToken = refreshToken;\n  await account.save();\n\n  const sameEmailClient = await Client.findOne({\n    where: {\n      email: profile.email,\n    },\n  });\n\n  if (account.createdAt.toString() == account.updatedAt.toString() &&\n    req.session.clientId) {\n    await sequelize.transaction(async transaction => {\n      await account.update({\n        owner: req.session.clientId,\n        profile,\n      }, { transaction });\n      await RecordService.create({\n        model: 'auth',\n        action: 'authorizeThirdPartyAccount',\n        owner: req.session.clientId,\n        target: account.id,\n      }, { transaction });\n    });\n    res.status(201).json(AuthService.sanitize(account));\n  } else if (account.owner) {\n    await account.update({ profile });\n    req.session.clientId = account.owner;\n    res.status(200).json(AuthService.sanitize(account));\n  } else if (sameEmailClient) {\n    sameEmailClient.emailVerified = true;\n    if (!sameEmailClient.avatar && hasS3 && profile.picture) {\n      const avatarUrl = profile.picture.replace('=s96-c', '=s512-c');\n      sameEmailClient.avatar = await uploadFromUrl(avatarUrl, 'jpg');\n    }\n    account.owner = sameEmailClient.id;\n    account.profile = profile;\n    await sameEmailClient.save();\n    await account.save();\n    req.session.clientId = sameEmailClient.id;\n    res.status(201).json(AuthService.sanitize(account));\n  } else {\n    let username: string;\n    let gmailUsername = profile.email\n      .split('@')[0]\n      .split('')\n      .filter(c => charset.includes(c))\n      .join('');\n\n    let exists = await Client.findOne({ where: { username: gmailUsername } });\n    if (!exists) username = gmailUsername;\n    else {\n      gmailUsername = profile.email.split('').filter(c => charset.includes(c)).join('');\n      exists = await Client.findOne({ where: { username: gmailUsername } });\n      if (!exists) {\n        username = gmailUsername;\n      } else {\n        username = await ClientService.randomlyGenerateUsername();\n      }\n    }\n\n    let nickname = profile.name\n      .split('')\n      .filter(c => c !== '@' && c !== '%')\n      .slice(0, 16)\n      .join('');\n    let allDigit = true;\n    for (const char of nickname) {\n      if (!/\\d/.test(char)) {\n        allDigit = false;\n        break;\n      }\n    }\n    if (allDigit) nickname = 'Google_' + nickname;\n    if (nickname.length < 2) nickname = 'Google user';\n    nickname = nickname.slice(0, 16);\n\n    let avatar: string;\n    if (hasS3 && profile.picture) {\n      const avatarUrl = profile.picture.replace('=s96-c', '=s512-c');\n      avatar = await uploadFromUrl(avatarUrl, 'jpg');\n    }\n\n    const newClient = await ClientService.createClient({\n      username,\n      nickname,\n      hashedPassword: '',\n      avatar,\n      email: profile.email,\n      emailVerified: true,\n      inviteCode: auth.inviteCode,\n    });\n\n    await account.update({ profile, owner: newClient.id });\n    account = AuthService.sanitize(account);\n    req.session.clientId = newClient.id;\n\n    return res.status(201).json({\n      message: '注册成功',\n      auth: account,\n      client: newClient,\n    });\n  }\n}\n\nexport default googleRedirect;\n"],"sourceRoot":"../../../../src"}