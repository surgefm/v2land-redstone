{"version":3,"sources":["../api/controllers/AuthController/weiboRedirect.ts"],"names":[],"mappings":"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","file":"weiboRedirect.js","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport { Auth, sequelize } from '@Models';\nimport { oauth, globals } from '@Configs';\nimport { RecordService, AuthService, ClientService } from '@Services';\nimport { hasS3, uploadFromUrl } from '@Services/UploadService';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport axios from 'axios';\n\nasync function weiboRedirect(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.query && req.query.code && req.query.authId)) {\n    return res.status(400).json({\n      message: '请求缺少 code 或 authId',\n    });\n  }\n\n  const oa = oauth.weibo;\n  const { code, authId } = req.query;\n\n  const getAccessToken = (): Promise<{ accessToken: string; refreshToken?: string}> => {\n    return new Promise((resolve) => {\n      oa.getOAuthAccessToken(\n        code as string,\n        {\n          'redirect_uri': globals.api + '/auth/weibo/callback',\n          'grant_type': 'authorization_code',\n        },\n        (err, accessToken, refreshToken) => {\n          if (err) {\n            req.log.error(err as any);\n            return res.status(400).json({\n              message: '在验证绑定状况时发生了错误',\n            });\n          }\n          resolve({ accessToken, refreshToken });\n        }\n      );\n    });\n  };\n\n  const { accessToken, refreshToken } = await getAccessToken();\n  const auth = await Auth.findByPk(authId as string);\n  if (!auth) {\n    return res.status(404).json({\n      message: '未找到该绑定信息',\n    });\n  }\n\n  const response = await axios.post(\n    'https://api.weibo.com/oauth2/get_token_info?access_token=' + accessToken,\n    { access_token: accessToken }\n  );\n  auth.profileId = response.data.uid + '';\n\n  const data = (await axios.get(\n    'https://api.weibo.com/2/users/show.json?' +\n      `uid=${response.data.uid}&access_token=${accessToken}`\n  )).data;\n\n  const sameAuth = await Auth.findOne({\n    where: {\n      site: 'weibo',\n      profileId: response.data.uid + '',\n    },\n  });\n\n  let account = sameAuth || auth;\n  account.accessToken = accessToken;\n  account.refreshToken = refreshToken;\n  await account.save();\n\n  if (!account.owner && req.session.clientId) {\n    await sequelize.transaction(async transaction => {\n      await account.update({\n        owner: req.session.clientId,\n        profile: { ...data },\n      }, { transaction });\n      await RecordService.create({\n        model: 'auth',\n        action: 'authorizeThirdPartyAccount',\n        owner: req.session.clientId,\n        target: account.id,\n      }, { transaction });\n    });\n    res.status(201).json(AuthService.sanitize(account));\n  } else if (account.owner) {\n    await account.update({ profile: { ...data } });\n    req.session.clientId = account.owner;\n    res.status(200).json(AuthService.sanitize(account));\n  } else {\n    const profile = { ...data };\n\n    let avatar: string;\n    if (hasS3 && profile.avatar_hd) {\n      avatar = await uploadFromUrl(profile.avatar_hd, '.jpg');\n    }\n\n    const newClient = await ClientService.createClient({\n      username: await ClientService.randomlyGenerateUsername(profile.domain),\n      nickname: profile.screen_name,\n      description: profile.description,\n      avatar,\n      inviteCode: auth.inviteCode,\n    });\n    await account.update({\n      profile,\n      owner: newClient.id,\n    });\n    account = AuthService.sanitize(account);\n    req.session.clientId = newClient.id;\n\n    return res.status(201).json({\n      message: '注册成功',\n      auth: account,\n      client: newClient,\n    });\n  }\n}\n\nexport default weiboRedirect;\n"],"sourceRoot":"../../../../src"}