{"version":3,"sources":["../api/controllers/EventController/createEvent.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,yCAA2F;AAC3F,qCAA2C;AAC3C,yEAAqE;AAErE,SAAe,WAAW,CAAC,GAAoB,EAAE,GAAqB;;QACpE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACxD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,yBAAyB;aACnC,CAAC,CAAC;SACJ;QAED,MAAM,IAAI,GAA6B;YACrC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI;YACnB,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW;YACjC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;SAC9B,CAAC;QAEF,IAAI,KAAK,GAAG,MAAM,wBAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpD,IAAI,KAAK,EAAE;YACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,gBAAgB;aAC1B,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,MAAM,wBAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3D,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,KAAK,GAAG,MAAM,eAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAClD,MAAM,yBAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,OAAO;gBACd,IAAI;gBACJ,MAAM,EAAE,aAAa;gBACrB,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;gBAC3B,MAAM,EAAE,KAAK,CAAC,EAAE;aACjB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,IAAA,0CAAmB,EAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QAE1D,MAAM,wBAAY,CAAC,GAAG,CAAC,wBAAY,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACxF,MAAM,wBAAY,CAAC,GAAG,CAAC,wBAAY,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QAErG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,0BAA0B;YACnC,KAAK;SACN,CAAC,CAAC;QAEH,+BAAmB,CAAC,sBAAsB,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxE,wBAAY,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7C,CAAC;CAAA;AAED,kBAAe,WAAW,CAAC","file":"createEvent.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { EventService, RecordService, NotificationService, RedisService } from '@Services';\nimport { Event, sequelize } from '@Models';\nimport { setClientEventOwner } from '@Services/AccessControlService';\n\nasync function createEvent(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.body && req.body.name && req.body.description)) {\n    return res.status(400).json({\n      message: '缺少参数 name 或 description',\n    });\n  }\n\n  const data: { [index: string]: any } = {\n    name: req.body.name,\n    description: req.body.description,\n    ownerId: req.session.clientId,\n  };\n\n  let event = await EventService.findEvent(data.name);\n\n  if (event) {\n    return res.status(409).json({\n      message: '已有同名事件或事件正在审核中',\n    });\n  }\n\n  data.status = 'admitted';\n\n  data.pinyin = await EventService.generatePinyin(data.name);\n\n  await sequelize.transaction(async transaction => {\n    event = await Event.create(data, { transaction });\n    await RecordService.create({\n      model: 'Event',\n      data,\n      action: 'createEvent',\n      owner: req.session.clientId,\n      target: event.id,\n    }, { transaction });\n  });\n\n  await setClientEventOwner(req.session.clientId, event.id);\n\n  await RedisService.set(RedisService.getEventIdKey(event.name, event.ownerId), event.id);\n  await RedisService.set(RedisService.getEventIdKey(event.name, req.currentClient.username), event.id);\n\n  res.status(201).json({\n    message: '提交成功，该事件在社区管理员审核通过后将很快开放',\n    event,\n  });\n\n  NotificationService.notifyWhenEventCreated(event, req.session.clientId);\n  EventService.updateAlgoliaIndex({ event });\n}\n\nexport default createEvent;\n"],"sourceRoot":"../../../../src"}