{"version":3,"sources":["../api/controllers/EventController/getEventList.ts"],"names":[],"mappings":"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","file":"getEventList.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { Event, HeaderImage, News, Tag, sequelize, Commit, Sequelize } from '@Models';\nimport { UtilService, EventService, AccessControlService, RedisService, StarService } from '@Services';\nimport _ from 'lodash';\n\nasync function getEventList(req: RedstoneRequest, res: RedstoneResponse) {\n  let page: number;\n  let where: any;\n  let mode; // 0: latest updated; 1:\n  let isEditors = false;\n  let getLatest = req.query.latest === '1';\n\n  switch (req.method) {\n  case 'GET':\n    page = parseInt(req.query.page as string || '1');\n    // 0: oldest event first (by first stack);\n    // 1: newest event first (by latest news)\n    mode = req.query.mode;\n    if (req.query.where && typeof req.query.where === 'string') {\n      where = JSON.parse(where);\n    } else if (req.query.status) {\n      where = {\n        status: req.query.status,\n      };\n    }\n    break;\n  case 'POST':\n    // 兼容古老代码 POST 方法\n    page = req.body.page;\n    where = req.body.where;\n    mode = req.body.mode;\n    break;\n  }\n\n  page = UtilService.validateNumber(page, 1);\n  mode = UtilService.validateNumber(mode, 0);\n\n  if (_.isUndefined(page)) {\n    return res.status(400).json({\n      message: '参数有误：page',\n    });\n  }\n\n  if (_.isUndefined(mode)) {\n    return res.status(400).json({\n      message: '参数有误：mode',\n    });\n  }\n\n  const key = `event-list-query-${JSON.stringify(where)}-${page}`;\n\n  await sequelize.transaction(async transaction => {\n    if ((where || getLatest) && req.session && req.session.clientId) {\n      isEditors = await AccessControlService.hasRole(req.session.clientId, AccessControlService.roles.editors)\n        || await AccessControlService.hasRole(req.session.clientId, AccessControlService.roles.admins);\n    }\n\n    if (where && !isEditors) {\n      where.status = 'admitted';\n    }\n\n    if (getLatest) {\n      getLatest = isEditors;\n    }\n\n    if (where) {\n      where = UtilService.convertWhereQuery(where);\n    }\n\n    where = (where && Object.keys(where).length > 0) ? where : { status: 'admitted' };\n\n    if (getLatest) {\n      const events = await Event.findAll({\n        where,\n        include: [{\n          as: 'headerImage',\n          model: HeaderImage,\n          required: false,\n        }, {\n          as: 'latestAdmittedNews',\n          model: News,\n          required: false,\n        }, {\n          as: 'tags',\n          model: Tag,\n          where: { status: 'visible' },\n          through: { attributes: [] },\n          required: false,\n        }],\n        order: [\n          [{ model: News, as: 'latestAdmittedNews' }, 'time', 'DESC'],\n          ['updatedAt', 'DESC'],\n        ],\n        limit: 15,\n        offset: 15 * (page - 1),\n        transaction,\n      });\n\n      const eventObjs = events.map(e => e.toJSON());\n      await EventService.acquireContributionsByEventList(eventObjs);\n\n      res.status(200).json({ eventList: eventObjs });\n    } else {\n      const redisData = await RedisService.get(key);\n      if (redisData) {\n        return res.status(200).json({ eventList: redisData });\n      }\n\n      const whereQuery = UtilService.generateWhereQuery({ data: where });\n      const whereClause = `WHERE ${whereQuery.query}`;\n\n      const query = `\n        SELECT *\n        FROM (\n          SELECT\n            DISTINCT ON (\"eventId\") \"eventId\",\n            (CASE WHEN \"data\"::json#>>'{stacks,0,time}' NOTNULL\n              THEN \"data\"::json#>>'{stacks,0,time}'\n            WHEN \"data\"::json#>>'{stacks,0,news,0}' NOTNULL\n              THEN \"data\"::json#>>'{stacks,0,news,0,time}'\n            WHEN \"data\"::json#>>'{latestAdmittedNews}' NOTNULL\n              THEN \"data\"::json#>>'{latestAdmittedNews,time}'\n              ELSE NULL\n            END) as t,\n            *\n          FROM public.commit\n          ${whereClause} AND time NOTNULL\n          ORDER BY \"eventId\", \"time\" DESC\n        ) as commit\n        WHERE t NOTNULL\n        ORDER BY t DESC\n        LIMIT 15\n        OFFSET ${15 * (page - 1)}\n      `;\n\n      const commits = await sequelize.query<Commit>(query, {\n        transaction,\n        type: Sequelize.QueryTypes.SELECT,\n        bind: whereQuery.values,\n      });\n      for (const commit of commits) {\n        delete commit.data.contribution;\n        delete commit.data.stacks;\n        commit.data.time = (commit as any).t;\n      }\n      await Promise.all(commits.map(async c => {\n        c.data.starCount = await StarService.countStars(c.eventId);\n        c.data.subscriptionCount = await RedisService.hlen(RedisService.getSubscriptionCacheKey(c.eventId));\n        c.data.curations = await EventService.getCurations(c.eventId);\n      }));\n      const data = commits.map(c => c.data);\n      res.status(200).json({ eventList: commits.map(c => c.data) });\n      await RedisService.set(key, data);\n      await RedisService.expire(key, 30);\n    }\n  });\n}\n\nexport default getEventList;\n"],"sourceRoot":"../../../../src"}