{"version":3,"sources":["../api/controllers/EventController/forkEvent.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAgC;AAEhC,yCAAyC;AAEzC,SAAe,SAAS,CAAC,GAAoB,EAAE,GAAqB;;QAClE,MAAM,OAAO,GAAG,MAAM,wBAAY,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,SAAS;aACnB,CAAC,CAAC;SACJ;QAED,MAAM,SAAS,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,MAAM,wBAAY,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC;QACvE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,QAAQ,SAAS,CAAC,IAAI,GAAG;YAClC,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","file":"forkEvent.js","sourcesContent":["import { Event } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { EventService } from '@Services';\n\nasync function forkEvent(req: RedstoneRequest, res: RedstoneResponse) {\n  const eventId = await EventService.getEventId(req.params.eventName);\n  if (!eventId) {\n    return res.status(404).json({\n      message: '未能找到该事件',\n    });\n  }\n\n  const origEvent = await Event.findByPk(eventId);\n  const event = await EventService.forkEvent(eventId, req.currentClient);\n  return res.status(201).json({\n    message: `成功复制「${origEvent.name}」`,\n    event,\n  });\n}\n\nexport default forkEvent;\n"],"sourceRoot":"../../../../src"}