{"version":3,"sources":["../api/controllers/EventController/createNews.ts"],"names":[],"mappings":"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","file":"createNews.js","sourcesContent":["/* eslint-disable no-empty */\nimport { RedstoneRequest, RedstoneResponse, StackObj } from '@Types';\nimport { Client, News, EventStackNews, sequelize } from '@Models';\nimport { EventService, RecordService, NewsService, NotificationService, StackService } from '@Services';\nimport axios from 'axios';\n// const urlTrimmer = require('v2land-url-trimmer');\n\nasync function createNews(req: RedstoneRequest, res: RedstoneResponse) {\n  const name = req.params.eventName;\n  const data = req.body;\n\n  let client: Client;\n  if (req.session.clientId) {\n    client = await Client.findByPk(req.session.clientId);\n  }\n\n  for (const attr of ['url', 'source', 'title', 'time']) {\n    if (!data[attr]) {\n      return res.status(400).json({\n        message: `缺少 ${attr} 参数`,\n      });\n    }\n  }\n\n  // data.url = (await urlTrimmer.trim(data.url)).toString();\n  const event = await EventService.findEvent(name);\n  if (!event) {\n    return res.status(404).json({\n      message: '未找到该事件',\n    });\n  }\n\n  let stack: StackObj;\n  if (data.stackId) {\n    stack = await StackService.findStack(data.stackId, false);\n    if (!stack || stack.eventId != event.id) {\n      return res.status(404).json({\n        message: '未找到该进展或该进展不属于目标事件',\n      });\n    }\n  }\n\n  data.status = 'admitted';\n\n  await sequelize.transaction(async transaction => {\n    let news = await News.findOne({\n      where: { url: data.url },\n      transaction,\n    });\n    if (news) {\n      const existingRelation = await EventStackNews.findOne({\n        where: {\n          eventId: event.id,\n          newsId: news.id,\n        },\n      });\n      if (existingRelation) {\n        return res.status(409).json({\n          message: '审核队列或新闻合辑内已有相同链接的新闻',\n        });\n      }\n    }\n\n    // Ask the Wayback Machine of Internet Archive to archive the webpage.\n    (async () => {\n      try {\n        await axios.get(`https://web.archive.org/save/${data.url}`);\n      } catch (err) {}\n    })();\n\n    const time = new Date();\n    if (!news) {\n      news = await News.create({\n        url: data.url,\n        abstract: data.abstract,\n        source: data.source,\n        title: data.title,\n        time: data.time,\n        comment: data.comment,\n        status: 'admitted',\n      }, {\n        transaction,\n      });\n\n      await RecordService.create({\n        model: 'News',\n        data: news.get({ plain: true }),\n        target: news.id,\n        action: 'createNews',\n        owner: req.session.clientId,\n        createdAt: time,\n      }, { transaction });\n    }\n\n    // Add news to event and stack\n    const eventNews = await EventStackNews.create({\n      eventId: event.id,\n      stackId: stack ? stack.id : undefined,\n      newsId: news.id,\n    }, { transaction });\n\n    await RecordService.create({\n      model: 'EventStackNews',\n      data: eventNews,\n      target: event.id,\n      subtarget: news.id,\n      action: 'addNewsToEvent',\n      owner: req.session.clientId,\n      createdAt: time,\n    }, { transaction });\n\n    // Add news to stack\n    if (stack) {\n      await RecordService.create({\n        model: 'EventStackNews',\n        data: eventNews,\n        target: stack.id,\n        subtarget: news.id,\n        action: 'addNewsToStack',\n        owner: req.session.clientId,\n        createdAt: time,\n      }, { transaction });\n    }\n\n    res.status(201).json({\n      message: '提交成功',\n      news,\n    });\n\n    const socket = await EventService.getNewsroomSocket(event.id);\n    socket.emit('add news to event', {\n      eventStackNews: eventNews,\n      event,\n      news,\n      client: await Client.findByPk(req.session.clientId),\n    });\n\n    try {\n      await NotificationService.notifyWhenNewsCreated(news, client);\n    } catch (err) {}\n    try {\n      await NewsService.updateElasticsearchIndex({ newsId: news.id });\n    } catch (err) {}\n  });\n}\n\nexport default createNews;\n"],"sourceRoot":"../../../../src"}