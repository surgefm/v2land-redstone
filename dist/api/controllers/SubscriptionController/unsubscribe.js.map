{"version":3,"sources":["../api/controllers/SubscriptionController/unsubscribe.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,qCAAkD;AAClD,yCAA0C;AAC1C,yCAA+B;AAE/B,SAAe,WAAW,CAAE,GAAoB,EAAE,GAAqB;;QACrE,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;YAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;SACJ;QAED,MAAM,YAAY,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;YAC9C,KAAK,EAAE,GAAG,CAAC,KAAK;SACjB,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAC;SACJ;QAED,IAAI,OAAiB,CAAC;QAEtB,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEvE,MAAM,yBAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,cAAc;gBACrB,MAAM,EAAE,oBAAoB;gBAC5B,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;gBAC3B,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE;gBAC7D,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,YAAY,CAAC,EAAE;aACxB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE;gBACL,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,OAAO,EAAE,YAAY,CAAC,OAAO;gBAC7B,EAAE,EAAE,EAAE,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,EAAE,EAAE;aACjC;SACF,CAAC,CAAC;QAEH,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,IAAI,EAAE,sCAAsC;gBAC5C,OAAO,EAAE,4BAA4B;gBACrC,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;SACJ;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,IAAI,EAAE,0BAA0B;gBAChC,OAAO,EAAE,SAAS;aACnB,CAAC,CAAC;SACJ;IACH,CAAC;CAAA;AAED,kBAAe,WAAW,CAAC","file":"unsubscribe.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { Subscription, sequelize } from '@Models';\nimport { RecordService } from '@Services';\nimport { Op } from 'sequelize';\n\nasync function unsubscribe (req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.query && req.query.id && req.query.unsubscribeId)) {\n    return res.status(400).json({\n      message: '缺少 id 或 unsubscribeId 参数',\n    });\n  }\n\n  const subscription = await Subscription.findOne({\n    where: req.query,\n  });\n\n  if (!subscription) {\n    return res.status(404).json({\n      message: '未找到该关注',\n    });\n  }\n\n  let methods: string[];\n\n  await sequelize.transaction(async transaction => {\n    await subscription.update({ status: 'unsubscribed' }, { transaction });\n\n    await RecordService.update({\n      model: 'Subscription',\n      action: 'cancelSubscription',\n      owner: req.session.clientId,\n      data: req.query.method ? methods : { status: 'unsubscribed' },\n      before: subscription,\n      target: subscription.id,\n    }, { transaction });\n  });\n\n  const otherSubscriptions = await Subscription.findAll({\n    where: {\n      subscriber: subscription.subscriber,\n      eventId: subscription.eventId,\n      id: { [Op.ne]: subscription.id },\n    },\n  });\n\n  if (otherSubscriptions.length > 0) {\n    res.status(201).json({\n      name: 'More subscriptions to the same event',\n      message: '成功取消关注。你对该事件还有其他关注，是否一并取消？',\n      subscriptionList: otherSubscriptions,\n    });\n  } else {\n    res.status(201).json({\n      name: 'Unsubscribe successfully',\n      message: '成功取消关注。',\n    });\n  }\n}\n\nexport default unsubscribe;\n"],"sourceRoot":"../../../../src"}