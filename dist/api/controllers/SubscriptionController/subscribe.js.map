{"version":3,"sources":["../api/controllers/SubscriptionController/subscribe.ts"],"names":[],"mappings":"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","file":"subscribe.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { Client, Auth, Subscription, Notification, Contact, sequelize } from '@Models';\nimport {\n  ModeService, ContactService, EventService,\n  NotificationService, SubscriptionService, RecordService,\n} from '@Services';\n\nasync function subscribe (req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.body && req.body.mode && req.body.contact)) {\n    return res.status(400).json({\n      message: '缺少参数 mode 或 contact',\n    });\n  }\n\n  const { mode, contact } = req.body;\n  let client;\n  if (req.session.clientId) {\n    client = await Client.findOne({\n      where: { id: req.session.clientId },\n      include: [{\n        model: Auth,\n        required: false,\n        as: 'auths',\n      }],\n    });\n  }\n\n  if (!ModeService.getMode(mode)) {\n    return res.status(404).json({\n      name: 'Subscribing mode not found',\n      message: '未找到该关注模式',\n    });\n  }\n\n  if (!['twitter', 'twitterAt', 'weibo', 'weiboAt', 'email', 'emailDailyReport', 'mobileAppNotification'].includes(contact.method)) {\n    return res.status(400).json({\n      name: 'Notification method not supported',\n      message: '不支持的推送方式',\n    });\n  }\n\n  let auth: Auth | { profileId: string; id?: number };\n  const type = ContactService.getTypeFromMethod(contact.method);\n  if (!['email', 'mobileApp'].includes(type)) {\n    for (const item of client.auths) {\n      if (item.id === contact[type] && item.site === type) {\n        auth = item;\n        break;\n      }\n    }\n    if (typeof auth === 'undefined') {\n      return res.status(400).json({\n        name: 'Corresponding third-party contact not found',\n        message: '未找到您在相关网络服务上的绑定。请于绑定后进行',\n      });\n    }\n  } else {\n    auth = { profileId: contact.profileId || client.email };\n  }\n\n  const eventName = req.params.eventName;\n  const event = await EventService.findEvent(eventName, { eventOnly: true });\n\n  if (!event) {\n    return res.status(404).json({\n      name: 'Event not found',\n      message: '未找到该事件',\n    });\n  }\n\n  if (event.status !== 'admitted') {\n    return res.status(406).json({\n      message: '该事件并不处于开放状态，无法进行关注',\n    });\n  }\n\n  let subscription = await Subscription.findOne({\n    where: {\n      subscriber: req.session.clientId,\n      eventId: event.id,\n      mode,\n      status: 'active',\n    },\n  });\n\n  if (subscription) {\n    const oldContact = await Contact.findOne({\n      where: {\n        owner: req.session.clientId,\n        method: contact.method,\n        profileId: auth.profileId,\n        subscriptionId: subscription.id,\n        status: 'active',\n      },\n    });\n\n    if (oldContact) {\n      return res.status(200).json({\n        message: '已有相同关注',\n        subscription,\n      });\n    }\n  }\n\n  const beforeData = subscription\n    ? subscription.get({ plain: true })\n    : {};\n  await sequelize.transaction(async transaction => {\n    const action = subscription ? 'addContactToSubscription' : 'createSubscription';\n    if (!subscription) {\n      const notificationInDb = ['new', 'EveryNewStack'].includes(mode)\n        ? true\n        : await Notification.findOne({\n          where: {\n            eventId: event.id,\n            mode,\n          },\n          transaction,\n        });\n\n      if (!notificationInDb) {\n        const time = await NotificationService.getNextTime(mode, event);\n        await Notification.create({\n          eventId: event.id,\n          mode,\n          time,\n          status: 'pending',\n        }, { transaction });\n      }\n\n      const unsubscribeId = SubscriptionService.generateUnsubscribeId();\n\n      subscription = await Subscription.create(\n        {\n          subscriber: req.session.clientId,\n          eventId: event.id,\n          mode,\n          status: 'active',\n          unsubscribeId,\n        },\n        { transaction },\n      );\n    }\n\n    await Contact.create({\n      subscriptionId: subscription.id,\n      method: contact.method,\n      profileId: auth.profileId,\n      authId: auth.id,\n      owner: req.session.clientId,\n      type: ContactService.getTypeFromMethod(contact.method),\n      unsubscribeId: SubscriptionService.generateUnsubscribeId(),\n    }, { transaction });\n\n    await RecordService.create({\n      model: 'Subscription',\n      action,\n      owner: req.session.clientId,\n      data: subscription,\n      target: subscription.id,\n      before: beforeData,\n    }, { transaction });\n\n    subscription = await Subscription.findOne({\n      where: { id: subscription.id },\n      include: [{\n        model: Contact,\n        required: false,\n        where: { status: 'active' },\n      }],\n      transaction,\n    });\n\n    return res.status(201).json({\n      message: '关注成功',\n      subscription,\n    });\n  });\n}\n\nexport default subscribe;\n"],"sourceRoot":"../../../../src"}