{"version":3,"sources":["../api/controllers/SubscriptionController/pwaSubscribe.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,yCAEmB;AACnB,uEAAwD;AAExD,SAAe,YAAY,CAAC,GAAoB,EAAE,GAAqB;;QACrE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAC5C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAC;SACJ;QAED,MAAM,EAAE,gBAAgB,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAEtC,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,wBAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE3E,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,IAAI,EAAE,iBAAiB;gBACvB,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAC;SACJ;QAED,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,oBAAoB;aAC9B,CAAC,CAAC;SACJ;QAED,IAAI;YACF,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAClD,MAAM,6BAAO,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC;gBAC1D,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,kBAAkB;aAC5B,CAAC,CAAC,CAAC;SACL;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,MAAM;aAChB,CAAC,CAAC;SACJ;QAED,MAAM,wBAAY,CAAC,IAAI,CAAC,wBAAY,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAErG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,MAAM;SAChB,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,YAAY,CAAC","file":"pwaSubscribe.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport {\n  RedisService, EventService,\n} from '@Services';\nimport { webpush } from '@Services/NotificationService';\n\nasync function pwaSubscribe(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!(req.body && req.body.subscriptionJSON)) {\n    return res.status(400).json({\n      message: '缺少参数 subscriptionJSON',\n    });\n  }\n\n  const { subscriptionJSON } = req.body;\n\n  const eventName = req.params.eventName;\n  const event = await EventService.findEvent(eventName, { eventOnly: true });\n\n  if (!event) {\n    return res.status(404).json({\n      name: 'Event not found',\n      message: '未找到该事件',\n    });\n  }\n\n  if (event.status !== 'admitted') {\n    return res.status(406).json({\n      message: '该事件并不处于开放状态，无法进行关注',\n    });\n  }\n\n  try {\n    const subscription = JSON.parse(subscriptionJSON);\n    await webpush.sendNotification(subscription, JSON.stringify({\n      message: '关注成功',\n      purpose: 'new registration',\n    }));\n  } catch (err) {\n    return res.status(401).json({\n      message: '关注失败',\n    });\n  }\n\n  await RedisService.hset(RedisService.getSubscriptionCacheKey(event.id), subscriptionJSON, 'updates');\n\n  return res.status(201).json({\n    message: '关注成功',\n  });\n}\n\nexport default pwaSubscribe;\n"],"sourceRoot":"../../../../src"}