{"version":3,"sources":["../api/controllers/TagController/createTag.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAyC;AAEzC,yCAAoE;AAEpE,SAAe,SAAS,CAAC,GAAoB,EAAE,GAAqB;;QAClE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;YAClB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;SACJ;QAED,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QACrC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,WAAW,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAEzC,IAAI,GAAG,GAAG,MAAM,aAAG,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACjD,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,UAAU;gBACnB,GAAG;aACJ,CAAC,CAAC;SACJ;QACD,MAAM,IAAI,GAAG,MAAM,wBAAY,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAErD,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,GAAG,GAAG,MAAM,aAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YACrE,GAAG,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC7B,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;YAEhC,MAAM,yBAAa,CAAC,MAAM,CAAC;gBACzB,IAAI,EAAE,GAAG;gBACT,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,GAAG,CAAC,EAAE;gBACd,MAAM,EAAE,WAAW;gBACnB,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ;aAC5B,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,SAAS;gBAClB,GAAG;aACJ,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,sBAAU,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","file":"createTag.js","sourcesContent":["import { Tag, sequelize } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { RecordService, EventService, TagService } from '@Services';\n\nasync function createTag(req: RedstoneRequest, res: RedstoneResponse) {\n  if (!req.body.name) {\n    return res.status(400).json({\n      message: '缺少参数: name。',\n    });\n  }\n\n  let { name, description } = req.body;\n  name = name.trim();\n  description = (description || '').trim();\n\n  let tag = await Tag.findOne({ where: { name } });\n  if (tag) {\n    return res.status(200).json({\n      message: '已存在同名标签。',\n      tag,\n    });\n  }\n  const slug = await EventService.generatePinyin(name);\n\n  await sequelize.transaction(async transaction => {\n    tag = await Tag.create({ name, description, slug }, { transaction });\n    tag.hierarchyPath = [tag.id];\n    await tag.save({ transaction });\n\n    await RecordService.create({\n      data: tag,\n      model: 'Tag',\n      target: tag.id,\n      action: 'createTag',\n      owner: req.session.clientId,\n    }, { transaction });\n\n    return res.status(201).json({\n      message: '成功创建标签。',\n      tag,\n    });\n  });\n\n  TagService.updateAlgoliaIndex({ tagId: tag.id });\n}\n\nexport default createTag;\n"],"sourceRoot":"../../../../src"}