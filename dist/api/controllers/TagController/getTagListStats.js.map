{"version":3,"sources":["../api/controllers/TagController/getTagListStats.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA+C;AAE/C,yCAAsD;AAEtD,SAAe,eAAe,CAAC,GAAoB,EAAE,GAAqB;;QACxE,MAAM,GAAG,GAAG,mBAAmB,CAAC;QAChC,MAAM,QAAQ,GAAG,MAAM,wBAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,QAAQ;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEtE,MAAM,KAAK,GAAgC,EAAE,CAAC;QAC9C,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAW,CAAC;QAEjC,MAAM,OAAO,GAAG,CAAO,MAAc,EAAE,EAAE;YACvC,MAAM,KAAK,GAAG,MAAM,mBAAS,CAAC,KAAK,CAAC;;;yBAGf,MAAM;;;;;;KAM1B,EAAE;gBACD,IAAI,EAAE,mBAAS,CAAC,UAAU,CAAC,MAAM;aAClC,CAAC,CAAC;YAEH,KAAK,CAAC,MAAM,CAAC,GAAG,CAAE,KAAK,CAAC,CAAC,CAAS,CAAC,KAAK,CAAC;QAC3C,CAAC,CAAA,CAAC;QAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACzC,MAAM,wBAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,wBAAY,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;IACvD,CAAC;CAAA;AAED,kBAAe,eAAe,CAAC","file":"getTagListStats.js","sourcesContent":["import { sequelize, Sequelize } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { UtilService, RedisService } from '@Services';\n\nasync function getTagListStats(req: RedstoneRequest, res: RedstoneResponse) {\n  const key = 'tag-list-stats-60';\n  const existing = await RedisService.get(key);\n  if (existing) return res.status(200).json({ tagListStats: existing });\n\n  const stats: { [index: string]: number } = {};\n  const { alphabet } = UtilService;\n\n  const getStat = async (letter: string) => {\n    const count = await sequelize.query(`\n      SELECT COUNT(*) FROM tag\n      WHERE status = 'visible'\n        AND slug LIKE '${letter}%'\n        AND EXISTS(\n          SELECT 1\n            FROM \"eventTag\", event\n          WHERE tag.id = \"eventTag\".\"tagId\" AND \"eventTag\".\"eventId\" = event.id AND event.status = 'admitted'\n        )\n    `, {\n      type: Sequelize.QueryTypes.SELECT,\n    });\n\n    stats[letter] = +(count[0] as any).count;\n  };\n\n  await Promise.all(alphabet.map(getStat));\n  await RedisService.set(key, stats);\n  await RedisService.expire(key, 60);\n  return res.status(200).json({ tagListStats: stats });\n}\n\nexport default getTagListStats;\n"],"sourceRoot":"../../../../src"}