{"version":3,"sources":["../api/controllers/TagController/getTagListByAlphabet.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAoD;AAEpD,yCAAsD;AAEtD,MAAM,OAAO,GAAG,CAAO,MAAc,EAAE,EAAE;IACvC,MAAM,GAAG,GAAG,qBAAqB,MAAM,KAAK,CAAC;IAC7C,MAAM,QAAQ,GAAG,MAAM,wBAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAI,QAAQ;QAAE,OAAO,QAAQ,CAAC;IAE9B,MAAM,IAAI,GAAG,MAAM,mBAAS,CAAC,KAAK,CAAM;;;uBAGnB,MAAM;;;;;;;;;GAS1B,EAAE;QACD,IAAI,EAAE,mBAAS,CAAC,UAAU,CAAC,MAAM;KAClC,CAAC,CAAC;IAEH,MAAM,wBAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAClC,MAAM,wBAAY,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAEnC,OAAO,IAAI,CAAC;AACd,CAAC,CAAA,CAAC;AAEF,SAAe,oBAAoB,CAAC,GAAoB,EAAE,GAAqB;;QAC7E,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAW,CAAC;QACjC,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,KAAK,KAAK,EAAE;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC,CAAC;SAC3D;QAED,IAAI,MAAM,KAAK,KAAK,EAAE;YACpB,MAAM,OAAO,GAA6B,EAAE,CAAC;YAC7C,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAM,MAAM,EAAC,EAAE;gBAC5C,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC,CAAA,CAAC,CAAC,CAAC;YACJ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;SAC1C;QAED,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC;CAAA;AAED,kBAAe,oBAAoB,CAAC","file":"getTagListByAlphabet.js","sourcesContent":["import { Tag, sequelize, Sequelize } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { UtilService, RedisService } from '@Services';\n\nconst getTags = async (letter: string) => {\n  const key = `tag-list-alphabet-${letter}-60`;\n  const existing = await RedisService.get(key);\n  if (existing) return existing;\n\n  const tags = await sequelize.query<Tag>(`\n    SELECT * FROM tag\n    WHERE status = 'visible'\n      AND slug LIKE '${letter}%'\n      AND EXISTS(\n        SELECT 1\n          FROM \"eventTag\", event, tag as t\n         WHERE t.\"hierarchyPath\" @> tag.\"hierarchyPath\"\n           AND t.id = \"eventTag\".\"tagId\"\n           AND \"eventTag\".\"eventId\" = event.id\n           AND event.status = 'admitted'\n      )\n  `, {\n    type: Sequelize.QueryTypes.SELECT,\n  });\n\n  await RedisService.set(key, tags);\n  await RedisService.expire(key, 60);\n\n  return tags;\n};\n\nasync function getTagListByAlphabet(req: RedstoneRequest, res: RedstoneResponse) {\n  const { alphabet } = UtilService;\n  const { letter } = req.params;\n  if (!alphabet.includes(letter) && letter !== 'all') {\n    return res.status(400).json({ message: 'Invalid input' });\n  }\n\n  if (letter === 'all') {\n    const allTags: { [index: string]: Tag } = {};\n    await Promise.all(alphabet.map(async letter => {\n      allTags[letter] = await getTags(letter);\n    }));\n    return res.status(200).json({ allTags });\n  }\n\n  const tags = await getTags(letter);\n  return res.status(200).json({ tags });\n}\n\nexport default getTagListByAlphabet;\n"],"sourceRoot":"../../../../src"}