{"version":3,"sources":["../api/controllers/TagController/updateTag.ts"],"names":[],"mappings":"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","file":"updateTag.js","sourcesContent":["import { Tag, sequelize } from '@Models';\nimport { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { RecordService, EventService, TagService, AccessControlService } from '@Services';\n\nasync function updateTag(req: RedstoneRequest, res: RedstoneResponse) {\n  const tag = await Tag.findByPk(req.params.tagId);\n  if (!tag) {\n    return res.status(404).json({\n      message: '无法找到该话题',\n    });\n  }\n\n  const dataChange: { [index: string]: string | number | number[] } = {};\n  if (req.body.name && req.body.name !== tag.name) {\n    const t = await Tag.findOne({ where: { name: req.body.name } });\n    if (t) {\n      return res.status(400).json({\n        message: '已存在同名话题',\n      });\n    }\n    tag.name = req.body.name;\n    tag.slug = await EventService.generatePinyin(tag.name);\n    dataChange.name = req.body.name;\n    dataChange.slug = tag.slug;\n  }\n\n  if (req.body.description && req.body.description !== tag.description) {\n    tag.description = req.body.description;\n    dataChange.description = req.body.description;\n  }\n\n  if (req.body.redirectToId) {\n    if (!req.currentClient.isEditor) {\n      return res.status(403).json({\n        message: '只有社区编辑或管理员可以更改话题重定向',\n      });\n    }\n    let redirectTo = await Tag.findByPk(req.body.redirectToId);\n    while (redirectTo.redirectToId) {\n      if (redirectTo.redirectToId === tag.id) {\n        return res.status(400).json({\n          message: '不可以设置循环重定向',\n        });\n      }\n      redirectTo = await Tag.findByPk(redirectTo.redirectToId);\n    }\n    if (!redirectTo) {\n      return res.status(404).json({\n        message: '无法找到重定向话题',\n      });\n    }\n    tag.redirectToId = redirectTo.id;\n    dataChange.redirectToId = redirectTo.id;\n  }\n\n  if (tag.parentId !== req.body.parentId) {\n    if (tag.parentId) {\n      const parentTag = await Tag.findByPk(tag.parentId);\n      if (!parentTag) {\n        return res.status(404).json({\n          message: `无法找到上级话题 #${parentTag.name}`,\n        });\n      }\n\n      const canManageNewParent = await AccessControlService.isAllowedToManageTag(\n        req.session.clientId,\n        parentTag.id,\n      );\n      if (!canManageNewParent) {\n        return res.status(401).json({\n          message: `你无权改变 #${parentTag.name} 的子话题`,\n        });\n      }\n    }\n\n    if (req.body.parentId) {\n      const newParent = await Tag.findByPk(req.body.parentId);\n      if (!newParent) {\n        return res.status(404).json({\n          message: `无法找到上级话题 #${newParent.name}`,\n        });\n      }\n\n      if ((newParent.hierarchyPath || []).includes(tag.id)) {\n        return res.status(400).json({\n          message: '话题层级不能出现回路',\n        });\n      }\n\n      const canManageNewParent = await AccessControlService.isAllowedToManageTag(\n        req.session.clientId,\n        req.body.parentId,\n      );\n\n      if (!canManageNewParent) {\n        return res.status(401).json({\n          message: `你无权改变 #${newParent.name} 的子话题`,\n        });\n      }\n      tag.parent = newParent;\n    }\n\n    tag.parentId = req.body.parentId;\n    dataChange.parentId = req.body.parentId;\n\n    const hierarchyPath = await TagService.getTagHierarchyPath({\n      tag,\n      parentId: req.body.parentId,\n    });\n    tag.hierarchyPath = hierarchyPath;\n    dataChange.hierarchyPath = hierarchyPath;\n  }\n\n  if (req.body.status && req.body.status !== tag.status) {\n    if (!['visible', 'hidden'].includes(req.body.status)) {\n      return res.status(400).json({\n        message: '话题状态必须为 visible 或 hidden。',\n      });\n    }\n    if (!req.currentClient.isEditor) {\n      return res.status(403).json({\n        message: '只有社区编辑或管理员可以更改话题状态',\n      });\n    }\n    tag.status = req.body.status;\n    dataChange.status = req.body.status;\n  }\n\n  if (Object.keys(dataChange).length === 0) {\n    return res.status(200).json({\n      message: '没有进行任何改变',\n    });\n  }\n\n  await sequelize.transaction(async transaction => {\n    await tag.save({ transaction });\n    await RecordService.update({\n      data: dataChange,\n      model: 'Tag',\n      target: tag.id,\n      action: 'updateTag',\n      owner: req.session.clientId,\n    }, { transaction });\n\n    if (dataChange.redirectToId) {\n      const redirectedFrom = await Tag.findAll({\n        where: { redirectToId: tag.id },\n        transaction,\n      });\n      await Promise.all(redirectedFrom.map(t => new Promise(resolve => {\n        t.redirectToId = tag.redirectToId;\n        t.save({ transaction }).then(resolve);\n      })));\n    }\n\n    if (dataChange.parentId !== undefined) {\n      await AccessControlService.updateTagParent(\n        tag,\n        await Tag.findByPk(tag.parentId, { transaction }),\n      );\n\n      await TagService.propagateHierarchyChange({ tag, transaction });\n    }\n\n    return res.status(201).json({\n      message: '成功修改话题',\n      tag,\n    });\n  });\n\n  TagService.updateAlgoliaIndex({ tagId: tag.id });\n}\n\nexport default updateTag;\n"],"sourceRoot":"../../../../src"}