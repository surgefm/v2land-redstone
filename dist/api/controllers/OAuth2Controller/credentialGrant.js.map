{"version":3,"sources":["../api/controllers/OAuth2Controller/credentialGrant.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qCAA8C;AAC9C,yCAAyD;AACzD,+CAAiC;AAEjC,SAAe,eAAe,CAAC,GAAoB,EAAE,GAAqB;;QACxE,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;QAEvB,MAAM,EAAE,qBAAqB,EAAE,GAAG,IAAI,CAAC;QACvC,MAAM,mBAAmB,GAAG,MAAM,6BAAmB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE,EAAE,CAAC,CAAC;QACxG,IAAI,mBAAmB,IAAI,IAAI,EAAE;YAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,SAAS;aACnB,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,mBAAmB,CAAC,+BAA+B,EAAE;YACxD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,eAAe;aACzB,CAAC,CAAC;SACJ;QAED,MAAM,MAAM,GAAG,MAAM,yBAAa,CAAC,UAAU,CAAC,IAAI,CAAC,QAAkB,EAAE;YACrE,SAAS,EAAE,KAAK;YAChB,iBAAiB,EAAE,KAAK;YACxB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,cAAc;aACxB,CAAC,CAAC;SACJ;QAED,MAAM,WAAW,GAAG,MAAM,yBAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,qBAA+B,CAAC,EAAE,KAAK,CAAC,CAAC;QACvH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,MAAM;YACf,WAAW;SACZ,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,eAAe,CAAC","file":"credentialGrant.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse } from '@Types';\nimport { AuthorizationClient } from '@Models';\nimport { ClientService, OAuth2Service } from '@Services';\nimport * as bcrypt from 'bcrypt';\n\nasync function credentialGrant(req: RedstoneRequest, res: RedstoneResponse) {\n  const data = req.query;\n\n  const { authorizationClientId } = data;\n  const authorizationClient = await AuthorizationClient.findOne({ where: { id: authorizationClientId } });\n  if (authorizationClient == null) {\n    return res.status(404).json({\n      message: '未找到该客户端',\n    });\n  }\n  if (!authorizationClient.allowAuthorizationByCredentials) {\n    return res.status(403).json({\n      message: '该客户端不支持通过密码授权',\n    });\n  }\n\n  const client = await ClientService.findClient(data.username as string, {\n    withAuths: false,\n    withSubscriptions: false,\n    withPassword: true,\n  });\n\n  const verified = await bcrypt.compare(data.password, client.password);\n  if (!verified) {\n    return res.status(401).json({\n      message: '错误的用户名、邮箱或密码',\n    });\n  }\n\n  const accessToken = await OAuth2Service.getNewAccessToken(client.id, parseInt(authorizationClientId as string), false);\n  return res.status(201).json({\n    message: '操作成功',\n    accessToken,\n  });\n}\n\nexport default credentialGrant;\n"],"sourceRoot":"../../../../src"}