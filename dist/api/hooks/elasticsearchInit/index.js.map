{"version":3,"sources":["../api/hooks/elasticsearchInit/index.js"],"names":[],"mappings":";;;;;;;;;AAAA,MAAM,CAAC,OAAO,GAAG,SAAS,iBAAiB,CAAC,KAAK;IAC/C,OAAO;QACL,UAAU,EAAE,UAAe,EAAE;;gBAC3B,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;oBAClC,MAAM,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;oBAC7C,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC;oBACjD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;oBACrC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;oBAClC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;oBACrC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;oBAEvC,MAAM,QAAQ,GAAG,EAAE,CAAC;oBACpB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACrB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBAClE,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;wBACf,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBACnE,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACrB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;oBAClE,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;wBACvB,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;oBACpE,CAAC,CAAC,CAAC;oBACH,IAAI;wBACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;qBAC7B;oBAAC,OAAO,GAAG,EAAE;wBACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACpB;iBACF;gBACD,EAAE,EAAE,CAAC;YACP,CAAC;SAAA;KACF,CAAC;AACJ,CAAC,CAAC","file":"index.js","sourcesContent":["module.exports = function elasticsearchInit(sails) {\n  return {\n    initialize: async function(cb) {\n      if (process.env.INIT_ELASTICSEARCH) {\n        const SeqModels = require('../../../models');\n        const { Event, News, Stack, Client } = SeqModels;\n        const events = await Event.findAll();\n        const news = await News.findAll();\n        const stacks = await Stack.findAll();\n        const clients = await Client.findAll();\n\n        const promises = [];\n        events.forEach(event => {\n          promises.push(EventService.updateElasticsearchIndex({ event }));\n        });\n        news.forEach(n => {\n          promises.push(NewsService.updateElasticsearchIndex({ news: n }));\n        });\n        stacks.forEach(stack => {\n          promises.push(StackService.updateElasticsearchIndex({ stack }));\n        });\n        clients.forEach(client => {\n          promises.push(ClientService.updateElasticsearchIndex({ client }));\n        });\n        try {\n          await Promise.all(promises);\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      cb();\n    },\n  };\n};\n"],"sourceRoot":"../../../../src"}