{"version":3,"sources":["../api/services/CommitService/makeCommit.ts"],"names":[],"mappings":"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","file":"makeCommit.js","sourcesContent":["import { Commit, Client, Event } from '@Models';\nimport getLatestCommit from './getLatestCommit';\nimport * as EventService from '../EventService';\nimport * as RecordService from '../RecordService';\nimport * as RedisService from '../RedisService';\nimport * as UtilService from '../UtilService';\nimport * as ContributionService from '../ContributionService';\nimport { RedstoneError, ResourceNotFoundErrorType, InvalidInputErrorType } from '@Types';\nimport { Transaction } from 'sequelize';\nimport _ from 'lodash';\n\nasync function makeCommit(\n  eventId: number | string,\n  authorId: Client | number,\n  summary: string,\n  { description, parent, transaction }: {\n    description?: string;\n    parent?: number;\n    transaction?: Transaction;\n  } = {},\n) {\n  const commitTime = new Date().toISOString().replace('T', ' ').replace('Z', ' +00:00');\n  const eventObj = await EventService.findEvent(eventId, { transaction, plain: true });\n\n  if (!eventObj) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该时间线：${eventId}`);\n  }\n\n  for (const stack of eventObj.stacks || []) {\n    if (stack.news.length === 0 && !stack.stackEventId) {\n      throw new RedstoneError(InvalidInputErrorType, `时间线上的进展必须有至少一条过审新闻或时间线`);\n    }\n  }\n\n  delete eventObj.owner;\n  const parentCommit = parent ? await Commit.findByPk(parent) : await getLatestCommit(eventObj.id);\n  if (parentCommit) {\n    delete parentCommit.data.commitTime;\n    delete parentCommit.data.contribution;\n    delete parentCommit.data.owner;\n    if (_.isEqual(parentCommit.data, convertDateToString(eventObj))) {\n      // Event data didn't change.\n      return;\n    }\n  }\n\n  eventObj.contribution = await EventService.getContribution(eventObj, true);\n  eventObj.commitTime = commitTime;\n\n  const author = authorId instanceof Client\n    ? authorId as Client\n    : await Client.findByPk(authorId, { attributes: ['id'] });\n\n  if (!author) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该用户：${eventId}`);\n  }\n\n  let commit: Commit;\n  await UtilService.execWithTransaction(async transaction => {\n    if (eventObj.status === 'hidden' && !parentCommit) {\n      eventObj.status = 'admitted';\n      const e = await Event.findByPk(eventObj.id, { transaction });\n      e.status = 'admitted';\n      e.save({ transaction });\n    }\n\n    commit = await Commit.create({\n      authorId: author.id,\n      eventId: eventObj.id,\n      summary,\n      description,\n      time: commitTime,\n      data: eventObj,\n      diff: [],\n      parentId: parentCommit ? parentCommit.id : null,\n    }, { transaction });\n\n    await ContributionService.generateCommitContributionData(commit, { transaction });\n    commit.data = {\n      ...commit.data,\n      contributors: await EventService.getContributors(eventObj.id, { transaction }),\n    };\n    await commit.save({ transaction });\n\n    await RecordService.create({\n      model: 'Event',\n      target: eventObj.id,\n      subtarget: commit.id,\n      action: 'makeCommitForEvent',\n      owner: author.id,\n    }, { transaction });\n  }, transaction);\n\n  await RedisService.set(`commit-${eventObj.id}`, commit.get({ plain: true }));\n  return commit;\n}\n\nfunction convertDateToString(o: { [index: string]: any }) {\n  for (const key of Object.keys(o)) {\n    if (o[key] instanceof Date) {\n      o[key] = o[key].toISOString();\n    } else if (_.isObject(o[key])) {\n      o[key] = convertDateToString(o[key]);\n    }\n  }\n\n  return o;\n}\n\nexport default makeCommit;\n"],"sourceRoot":"../../../../src"}