{"version":3,"sources":["../api/services/EventService/forkEvent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA8F;AAC9F,4DAAoC;AACpC,sEAA8C;AAC9C,wEAAgD;AAChD,4DAA8C;AAC9C,gEAAkD;AAClD,8DAAgD;AAChD,gEAAkD;AAClD,4EAA8D;AAC9D,mCAAkE;AAElE,oDAAuB;AAEvB,SAAe,SAAS,CACtB,OAAe,EACf,MAAuB,EACvB,EAAE,WAAW,KAAoC,EAAE;;QAEnD,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAE5D,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,aAAa,OAAO,EAAE,CAAC,CAAC;SAC5E;QACD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;QAE1B,MAAM,IAAI,GAAG,MAAM,YAAY,gBAAM;YACnC,CAAC,CAAC,MAAgB;YAClB,CAAC,CAAC,MAAM,gBAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE1D,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,UAAU,OAAO,EAAE,CAAC,CAAC;SACzE;QACD,IAAI,QAAe,CAAC;QAEpB,MAAM,WAAW,CAAC,mBAAmB,CAAC,CAAM,WAAW,EAAC,EAAE;YACxD,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAE7E,QAAQ,GAAG,MAAM,eAAK,CAAC,MAAM,CAAC;gBAC5B,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,MAAM,IAAA,wBAAc,EAAC,YAAY,CAAC;gBAC1C,WAAW,EAAE,KAAK,CAAC,WAAW;gBAC9B,oBAAoB,EAAE,KAAK,CAAC,oBAAoB;gBAChD,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,KAAK,CAAC,EAAE;gBAClB,OAAO,EAAE,IAAI,CAAC,EAAE;aACjB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,IAAI,KAAK,CAAC,WAAW,EAAE;gBACrB,MAAM,qBAAW,CAAC,MAAM,iCACnB,KAAK,CAAC,WAAW,KACpB,OAAO,EAAE,QAAQ,CAAC,EAAE,EACpB,EAAE,EAAE,SAAS,KACZ,EAAE,WAAW,EAAE,CAAC,CAAC;aACrB;YAED,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAM,KAAK,EAAC,EAAE;gBAChD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,MAAM,iCAC9B,gBAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,KACrE,OAAO,EAAE,QAAQ,CAAC,EAAE,KACnB,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEpB,MAAM,aAAa,CAAC,MAAM,CAAC;oBACzB,KAAK,EAAE,OAAO;oBACd,MAAM,EAAE,2BAA2B;oBACnC,KAAK,EAAE,IAAI,CAAC,EAAE;oBACd,MAAM,EAAE,KAAK,CAAC,EAAE;oBAChB,SAAS,EAAE,QAAQ,CAAC,EAAE;oBACtB,IAAI,EAAE,QAAQ;iBACf,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEpB,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACtC,OAAO,EAAE,QAAQ,CAAC,EAAE;oBACpB,OAAO,EAAE,QAAQ,CAAC,EAAE;oBACpB,MAAM,EAAE,IAAI,CAAC,EAAE;iBAChB,CAAC,CAAC,CAAC;gBACJ,MAAM,wBAAc,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAC5D,CAAC,CAAA,CAAC,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE9B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACrC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,KAAK,EAAE,GAAG,CAAC,EAAE;aACd,CAAC,CAAC,CAAC;YACJ,MAAM,kBAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpD,MAAM,YAAY,GAAG,MAAM,IAAA,mBAAS,EAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAEhF,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK;gBACzB,CAAC,CAAC,eAAe,KAAK,CAAC,KAAK,CAAC,QAAQ,MAAM,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,EAAE;gBACpE,CAAC,CAAC,eAAe,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,EAAE,CAAC;YAE7C,MAAM,SAAS,GAAG,MAAM,gBAAM,CAAC,MAAM,CAAC;gBACpC,OAAO;gBACP,IAAI,EAAE,YAAY;gBAClB,WAAW,EAAE,GAAG,MAAM,CAAC,OAAO,OAAO,MAAM,CAAC,WAAW,EAAE;gBACzD,QAAQ,EAAE,IAAI,CAAC,EAAE;gBACjB,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,YAAY,EAAE,IAAI;gBAClB,IAAI,EAAE,EAAE;gBACR,IAAI,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC;aACvE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,MAAM,aAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,KAAK,CAAC,EAAE;gBAChB,SAAS,EAAE,QAAQ,CAAC,EAAE;gBACtB,KAAK,EAAE,IAAI,CAAC,EAAE;gBACd,SAAS,EAAE,QAAQ;gBACnB,SAAS,EAAE,QAAQ;aACpB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,MAAM,mBAAmB,CAAC,8BAA8B,CAAC,SAAS,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YACrF,SAAS,CAAC,IAAI,CAAC,YAAY,GAAG,MAAM,IAAA,yBAAe,EAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAClF,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;YAC/B,MAAM,SAAS,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;YACtC,MAAM,YAAY,CAAC,GAAG,CAAC,UAAU,QAAQ,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAClF,CAAC,CAAA,EAAE,WAAW,CAAC,CAAC;QAEhB,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED,SAAe,eAAe,CAAC,SAAiB,EAAE,QAAgB,EAAE,WAAwB,EAAE,KAAK,GAAG,CAAC;;QACrG,MAAM,YAAY,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,KAAK,GAAG,CAAC;QAExE,MAAM,aAAa,GAAG,MAAM,eAAK,CAAC,OAAO,CAAC;YACxC,KAAK,EAAE;gBACL,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,QAAQ;aAClB;YACD,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,WAAW;SACZ,CAAC,CAAC;QAEH,IAAI,aAAa;YAAE,OAAO,eAAe,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QACvF,OAAO,YAAY,CAAC;IACtB,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","file":"forkEvent.js","sourcesContent":["import { Event, EventStackNews, HeaderImage, Stack, EventTag, Client, Commit } from '@Models';\nimport findEvent from './findEvent';\nimport generatePinyin from './generatePinyin';\nimport getContributors from './getContributors';\nimport * as UtilService from '../UtilService';\nimport * as RecordService from '../RecordService';\nimport * as RedisService from '../RedisService';\nimport * as CommitService from '../CommitService';\nimport * as ContributionService from '../ContributionService';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport { Transaction } from 'sequelize';\nimport _ from 'lodash';\n\nasync function forkEvent(\n  eventId: number,\n  userId: Client | number,\n  { transaction }: { transaction?: Transaction } = {},\n) {\n  const forkTime = new Date();\n  const commit = await CommitService.getLatestCommit(eventId);\n\n  if (!commit) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该事件的记录：${eventId}`);\n  }\n  const event = commit.data;\n\n  const user = userId instanceof Client\n    ? userId as Client\n    : await Client.findByPk(userId, { attributes: ['id'] });\n\n  if (!user) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该用户：${eventId}`);\n  }\n  let newEvent: Event;\n\n  await UtilService.execWithTransaction(async transaction => {\n    const newEventName = await getNewEventName(event.name, user.id, transaction);\n\n    newEvent = await Event.create({\n      name: newEventName,\n      pinyin: await generatePinyin(newEventName),\n      description: event.description,\n      latestAdmittedNewsId: event.latestAdmittedNewsId,\n      status: 'hidden',\n      parentId: event.id,\n      ownerId: user.id,\n    }, { transaction });\n\n    if (event.headerImage) {\n      await HeaderImage.create({\n        ...event.headerImage,\n        eventId: newEvent.id,\n        id: undefined,\n      }, { transaction });\n    }\n\n    const stackQueue = event.stacks.map(async stack => {\n      const newStack = await Stack.create({\n        ..._.pick(stack, ['title', 'description', 'status', 'order', 'time']),\n        eventId: newEvent.id,\n      }, { transaction });\n\n      await RecordService.create({\n        model: 'Stack',\n        action: 'copyStackWhenForkingEvent',\n        owner: user.id,\n        target: stack.id,\n        subtarget: newStack.id,\n        data: newStack,\n      }, { transaction });\n\n      const esnData = stack.news.map(news => ({\n        eventId: newEvent.id,\n        stackId: newStack.id,\n        newsId: news.id,\n      }));\n      await EventStackNews.bulkCreate(esnData, { transaction });\n    });\n    await Promise.all(stackQueue);\n\n    const tagData = event.tags.map(tag => ({\n      eventId: newEvent.id,\n      tagId: tag.id,\n    }));\n    await EventTag.bulkCreate(tagData, { transaction });\n\n    const newEventData = await findEvent(newEvent.id, { transaction, plain: true });\n\n    const summary = event.owner\n      ? `Forked from ${event.owner.username}’s ${event.name} #${event.id}`\n      : `Forked from ${event.name} #${event.id}`;\n\n    const newCommit = await Commit.create({\n      summary,\n      data: newEventData,\n      description: `${commit.summary}\\n\\n${commit.description}`,\n      authorId: user.id,\n      eventId: newEvent.id,\n      isForkCommit: true,\n      diff: [],\n      time: forkTime.toISOString().replace('T', ' ').replace('Z', ' +00:00'),\n    }, { transaction });\n\n    await RecordService.create({\n      model: 'Event',\n      action: 'forkEvent',\n      target: event.id,\n      subtarget: newEvent.id,\n      owner: user.id,\n      createdAt: forkTime,\n      updatedAt: forkTime,\n    }, { transaction });\n\n    await ContributionService.generateCommitContributionData(newCommit, { transaction });\n    newCommit.data.contributors = await getContributors(newEvent.id, { transaction });\n    newCommit.parentId = commit.id;\n    await newCommit.save({ transaction });\n    await RedisService.set(`commit-${newEvent.id}`, newCommit.get({ plain: true }));\n  }, transaction);\n\n  return newEvent;\n}\n\nasync function getNewEventName(eventName: string, clientId: number, transaction: Transaction, count = 1): Promise<string> {\n  const newEventName = count === 1 ? eventName : `${eventName}(${count})`;\n\n  const existingEvent = await Event.findOne({\n    where: {\n      name: newEventName,\n      ownerId: clientId,\n    },\n    attributes: ['id'],\n    transaction,\n  });\n\n  if (existingEvent) return getNewEventName(eventName, clientId, transaction, count + 1);\n  return newEventName;\n}\n\nexport default forkEvent;\n"],"sourceRoot":"../../../../src"}