{"version":3,"sources":["../api/services/EventService/removeNews.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA0D;AAC1D,mCAAkE;AAClE,uEAAyD;AACzD,qEAAuD;AACvD,4DAAoC;AAEpC,SAAe,UAAU,CAAC,SAA0B,EAAE,MAAc,EAAE,QAAgB,EAAE,IAAW;;QACjG,MAAM,KAAK,GAAG,MAAM,IAAA,mBAAS,EAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QACD,MAAM,OAAO,GAAG,KAAK,CAAC,EAAY,CAAC;QAEnC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,MAAM,cAAc,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC;YAClD,KAAK,EAAE;gBACL,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE;aAChB;SACF,CAAC,CAAC;QACH,IAAI,CAAC,cAAc;YAAE,OAAO;QAE5B,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;YAC7B,IAAI,cAAc,CAAC,OAAO,EAAE;gBAC1B,MAAM,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;aACpG;YAED,MAAM,aAAa,CAAC,OAAO,CAAC;gBAC1B,KAAK,EAAE,gBAAgB;gBACvB,IAAI,EAAE,cAAc;gBACpB,MAAM,EAAE,OAAO;gBACf,SAAS,EAAE,IAAI,CAAC,EAAE;gBAClB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,qBAAqB;gBAC7B,SAAS,EAAE,CAAC;gBACZ,SAAS,EAAE,CAAC;aACb,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACxB,CAAC;CAAA;AAED,kBAAe,UAAU,CAAC","file":"removeNews.js","sourcesContent":["import { EventStackNews, News, sequelize } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as RecordService from '@Services/RecordService';\nimport * as StackService from '@Services/StackService';\nimport findEvent from './findEvent';\n\nasync function removeNews(eventName: number | string, newsId: number, clientId: number, time?: Date) {\n  const event = await findEvent(eventName, { eventOnly: true });\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该进展');\n  }\n  const eventId = event.id as number;\n\n  const news = await News.findByPk(newsId);\n  if (!news) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该新闻');\n  }\n\n  const eventStackNews = await EventStackNews.findOne({\n    where: {\n      eventId: eventId,\n      newsId: news.id,\n    },\n  });\n  if (!eventStackNews) return;\n\n  await sequelize.transaction(async transaction => {\n    const t = time || new Date();\n    if (eventStackNews.stackId) {\n      await StackService.removeNews(eventStackNews.stackId, news.id, clientId, { transaction, time: t });\n    }\n\n    await RecordService.destroy({\n      model: 'EventStackNews',\n      data: eventStackNews,\n      target: eventId,\n      subtarget: news.id,\n      owner: clientId,\n      action: 'removeNewsFromEvent',\n      createdAt: t,\n      updatedAt: t,\n    }, { transaction });\n  });\n\n  return eventStackNews;\n}\n\nexport default removeNews;\n"],"sourceRoot":"../../../../src"}