{"version":3,"sources":["../api/services/EventService/updateHeaderImage.ts"],"names":[],"mappings":"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","file":"updateHeaderImage.js","sourcesContent":["import { RedstoneError, InvalidInputErrorType, ResourceNotFoundErrorType } from '@Types';\nimport { Event, HeaderImage, sequelize } from '@Models';\nimport * as RecordService from '@Services/RecordService';\nimport isURL from '@Utils/urlValidator';\nimport updateAlgoliaIndex from './updateAlgoliaIndex';\n\nasync function updateHeaderImage(eventId: number, data: { [index: string]: string }, clientId: number) {\n  const event = await Event.findByPk(eventId, {\n    include: [{\n      model: HeaderImage,\n      as: 'headerImage',\n      required: false,\n    }],\n  });\n\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该事件`);\n  }\n\n  let headerImage: any = { eventId };\n\n  for (const attribute of ['imageUrl', 'source', 'sourceUrl']) {\n    headerImage[attribute] = data[attribute];\n  }\n\n  if (headerImage.imageUrl && !headerImage.source) {\n    throw new RedstoneError(InvalidInputErrorType, '请提供题图来源');\n  }\n\n  if (headerImage.sourceUrl && !isURL(headerImage.sourceUrl)) {\n    throw new RedstoneError(InvalidInputErrorType, '链接格式不规范');\n  }\n\n  const query = {\n    model: 'HeaderImage',\n    owner: clientId,\n    data: headerImage,\n  };\n\n  await sequelize.transaction(async transaction => {\n    if (event.headerImage) {\n      if (headerImage.imageUrl) {\n        for (const key of Object.keys(headerImage)) {\n          (event.headerImage as any)[key] = headerImage[key];\n        }\n        await event.headerImage.save({ transaction });\n        await RecordService.update({\n          ...query,\n          action: 'updateEventHeaderImage',\n          target: event.headerImage.id,\n          before: event.headerImage,\n        }, { transaction });\n        headerImage = event.headerImage;\n      } else {\n        await HeaderImage.destroy({\n          where: { eventId },\n          transaction,\n        });\n        await RecordService.destroy({\n          ...query,\n          action: 'destroyEventHeaderImage',\n          target: event.headerImage.id,\n          before: event.headerImage,\n        }, { transaction });\n        headerImage = {};\n      }\n    } else {\n      headerImage = await HeaderImage.create({\n        ...headerImage,\n        eventId: event.id,\n      }, { transaction });\n      await RecordService.create({\n        ...query,\n        target: headerImage.id,\n        action: 'createEventHeaderImage',\n      }, { transaction });\n    }\n  });\n\n  updateAlgoliaIndex({ eventId });\n\n  return headerImage as HeaderImage;\n}\n\nexport default updateHeaderImage;\n"],"sourceRoot":"../../../../src"}