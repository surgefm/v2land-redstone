{"version":3,"sources":["../api/services/EventService/findEvent.ts"],"names":[],"mappings":"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","file":"findEvent.js","sourcesContent":["import { Event, HeaderImage, Stack, News, Tag, Sequelize, Client, Site, SiteAccount } from '@Models';\nimport { EventObj } from '@Types';\nimport * as AccessControlService from '@Services/AccessControlService';\nimport * as StarService from '@Services/StarService';\nimport { Op, Transaction } from 'sequelize';\nimport _ from 'lodash';\nimport getContributors from './getContributors';\n\ninterface FindEventOptions {\n  eventOnly?: boolean;\n  transaction?: Transaction;\n  getNewsroomContent?: boolean;\n  plain?: boolean;\n}\n\nasync function findEvent(\n  eventName: string | number,\n  options?: FindEventOptions & { plain?: undefined | false },\n): Promise<Event>;\nasync function findEvent(\n  eventName: string | number,\n  options: FindEventOptions & { plain: true },\n): Promise<EventObj>;\n\nasync function findEvent(\n  eventName: string | number,\n  { eventOnly = false, plain = false, getNewsroomContent = false, transaction }: FindEventOptions = {},\n) {\n  const where = _.isNaN(+eventName) ? { name: eventName } : { id: eventName };\n\n  if (eventOnly) {\n    const event = await Event.findOne({\n      where,\n      include: [{\n        model: HeaderImage,\n        as: 'headerImage',\n        required: false,\n      }],\n      transaction,\n    });\n    if (!event) return;\n    if (plain) return event.get({ plain });\n    return event;\n  }\n\n  let event: Event | EventObj = await Event.findOne({\n    attributes: {\n      include: [[\n        Sequelize.literal(`(\n          SELECT COUNT(stack)\n          FROM \"stack\" AS stack\n          WHERE stack.\"eventId\" = event.id AND stack.order >= 0 AND stack.status = 'admitted'\n        )`),\n        'stackCount',\n      ]],\n    },\n    where,\n    include: [\n      {\n        model: HeaderImage,\n        as: 'headerImage',\n        required: false,\n      }, {\n        model: News,\n        as: 'offshelfNews',\n        where: {\n          id: {\n            [Op.in]: Sequelize.literal(`(\n              SELECT esn.\"newsId\"\n              FROM \"eventStackNews\" AS esn\n              LEFT JOIN news as news ON esn.\"newsId\" = news.id\n              WHERE news.status = 'admitted' AND esn.\"stackId\" IS NULL\n            )`),\n          },\n        },\n        order: [['time', 'DESC']],\n        through: { attributes: [] },\n        required: false,\n      }, {\n        model: Stack,\n        as: 'stacks',\n        where: {\n          status: 'admitted',\n          ...(getNewsroomContent ? {} : { order: { [Op.gte]: 0 } }),\n        },\n        order: [['order', 'DESC']],\n        required: false,\n        include: [{\n          model: News,\n          as: 'news',\n          where: { status: 'admitted' },\n          order: [['time', 'ASC']],\n          through: { attributes: [] },\n          required: false,\n          include: [{\n            model: Site,\n            as: 'site',\n            required: false,\n          }, {\n            model: SiteAccount,\n            as: 'siteAccount',\n            required: false,\n          }],\n        }, {\n          model: Event,\n          as: 'stackEvent',\n          where: { status: 'admitted' },\n          required: false,\n          include: [{\n            model: HeaderImage,\n            as: 'headerImage',\n            required: false,\n          }],\n        }],\n        attributes: {\n          include: [[\n            Sequelize.literal(`(\n              SELECT COUNT(esn)\n              FROM \"eventStackNews\" AS esn\n              LEFT JOIN \"news\" AS news ON news.id = esn.\"newsId\"\n              WHERE esn.\"stackId\" = stacks.id AND news.status = 'admitted'\n            )`),\n            'newsCount',\n          ]],\n        },\n      }, {\n        model: News,\n        as: 'latestAdmittedNews',\n        required: false,\n      }, {\n        model: Tag,\n        as: 'tags',\n        where: { status: 'visible' },\n        through: { attributes: [] },\n        required: false,\n      }, {\n        model: Client,\n        as: 'owner',\n        attributes: ['id', 'username', 'nickname', 'avatar', 'description'],\n        required: false,\n      },\n    ],\n    transaction,\n  });\n\n  if (!event) return;\n\n  if (plain) event = event.get({ plain }) as EventObj;\n\n  const [roles, contributors] = await Promise.all([\n    AccessControlService.getEventClients(event.id),\n    getContributors(event.id, { transaction }),\n  ]);\n  event.roles = roles;\n  event.contributors = contributors;\n\n  event.stackCount = +event.stackCount;\n  event.newsCount = 0;\n  (event.offshelfNews as News[]).sort((a, b) => (new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()));\n  (event.stacks as Stack[]).sort((a, b) => b.order - a.order);\n\n  for (const stack of event.stacks) {\n    stack.newsCount = +stack.newsCount;\n    event.newsCount += stack.newsCount;\n    (stack.news as News[]).sort((a, b) => (new Date(a.time).getTime() - new Date(b.time).getTime()));\n  }\n\n  event.starCount = await StarService.countStars(event.id);\n\n  return event;\n}\n\nexport default findEvent;\n"],"sourceRoot":"../../../../src"}