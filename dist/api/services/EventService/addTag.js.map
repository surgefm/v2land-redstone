{"version":3,"sources":["../api/services/EventService/addTag.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA0D;AAC1D,mCAAkE;AAClE,uEAAyD;AAEzD,SAA8B,MAAM,CAAC,OAAe,EAAE,KAAa,EAAE,QAAgB;;QACnF,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,MAAM,GAAG,GAAG,MAAM,aAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,IAAI,QAAQ,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;YACpC,KAAK,EAAE;gBACL,KAAK,EAAE,GAAG,CAAC,EAAE;gBACb,OAAO,EAAE,KAAK,CAAC,EAAE;aAClB;SACF,CAAC,CAAC;QAEH,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;gBAC9C,QAAQ,GAAG,MAAM,kBAAQ,CAAC,MAAM,CAAC;oBAC/B,KAAK,EAAE,GAAG,CAAC,EAAE;oBACb,OAAO,EAAE,KAAK,CAAC,EAAE;iBAClB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEpB,MAAM,aAAa,CAAC,MAAM,CAAC;oBACzB,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,UAAU;oBACjB,MAAM,EAAE,QAAQ,CAAC,EAAE;oBACnB,MAAM,EAAE,eAAe;oBACvB,KAAK,EAAE,QAAQ;iBAChB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YACtB,CAAC,CAAA,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;CAAA;AAtCD,yBAsCC","file":"addTag.js","sourcesContent":["import { Event, EventTag, Tag, sequelize } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as RecordService from '@Services/RecordService';\n\nexport default async function addTag(eventId: number, tagId: number, clientId: number) {\n  const event = await Event.findByPk(eventId);\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该事件');\n  }\n\n  const tag = await Tag.findByPk(tagId);\n  if (!tag) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该话题');\n  }\n\n  let eventTag = await EventTag.findOne({\n    where: {\n      tagId: tag.id,\n      eventId: event.id,\n    },\n  });\n\n  if (eventTag) {\n    return null;\n  } else {\n    await sequelize.transaction(async transaction => {\n      eventTag = await EventTag.create({\n        tagId: tag.id,\n        eventId: event.id,\n      }, { transaction });\n\n      await RecordService.create({\n        data: eventTag,\n        model: 'EventTag',\n        target: eventTag.id,\n        action: 'addTagToEvent',\n        owner: clientId,\n      }, { transaction });\n    });\n\n    return eventTag;\n  }\n}\n"],"sourceRoot":"../../../../src"}