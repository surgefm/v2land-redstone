{"version":3,"sources":["../api/services/EventService/addNews.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAkE;AAClE,mCAAkE;AAClE,uEAAyD;AACzD,4DAAoC;AACpC,4EAAoD;AAEpD,SAAe,OAAO,CAAC,SAA0B,EAAE,MAAc,EAAE,QAAgB;;QACjF,MAAM,KAAK,GAAG,MAAM,IAAA,mBAAS,EAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QACD,MAAM,OAAO,GAAG,KAAK,CAAC,EAAY,CAAC;QAEnC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,IAAI,cAAc,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC;YAChD,KAAK,EAAE;gBACL,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE;aAChB;SACF,CAAC,CAAC;QACH,IAAI,cAAc,EAAE;YAClB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,cAAc,GAAG,MAAM,wBAAc,CAAC,MAAM,CAAC;gBAC3C,OAAO;gBACP,MAAM,EAAE,IAAI,CAAC,EAAE;aAChB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,MAAM,aAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,gBAAgB;gBACvB,IAAI,EAAE,cAAc;gBACpB,MAAM,EAAE,OAAO;gBACf,SAAS,EAAE,IAAI,CAAC,EAAE;gBAClB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,gBAAgB;gBACxB,SAAS,EAAE,IAAI;aAChB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,MAAM,MAAM,GAAG,MAAM,IAAA,2BAAiB,EAAC,OAAO,CAAC,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC/B,cAAc;gBACd,KAAK;gBACL,IAAI;gBACJ,MAAM,EAAE,MAAM,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;aACxC,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACxB,CAAC;CAAA;AAED,kBAAe,OAAO,CAAC","file":"addNews.js","sourcesContent":["import { Client, EventStackNews, News, sequelize } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as RecordService from '@Services/RecordService';\nimport findEvent from './findEvent';\nimport getNewsroomSocket from './getNewsroomSocket';\n\nasync function addNews(eventName: number | string, newsId: number, clientId: number) {\n  const event = await findEvent(eventName, { eventOnly: true });\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该进展');\n  }\n  const eventId = event.id as number;\n\n  const news = await News.findByPk(newsId);\n  if (!news) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该新闻');\n  }\n\n  let eventStackNews = await EventStackNews.findOne({\n    where: {\n      eventId: eventId,\n      newsId: news.id,\n    },\n  });\n  if (eventStackNews) {\n    return null;\n  }\n\n  await sequelize.transaction(async transaction => {\n    const time = new Date();\n    eventStackNews = await EventStackNews.create({\n      eventId,\n      newsId: news.id,\n    }, { transaction });\n\n    await RecordService.create({\n      model: 'EventStackNews',\n      data: eventStackNews,\n      target: eventId,\n      subtarget: news.id,\n      owner: clientId,\n      action: 'addNewsToEvent',\n      createdAt: time,\n    }, { transaction });\n\n    const socket = await getNewsroomSocket(eventId);\n    socket.emit('add news to event', {\n      eventStackNews,\n      event,\n      news,\n      client: await Client.findByPk(clientId),\n    });\n  });\n\n  return eventStackNews;\n}\n\nexport default addNews;\n"],"sourceRoot":"../../../../src"}