{"version":3,"sources":["../api/services/EventService/getEventList.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA2C;AAG3C,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwChB,CAAC;AAEF,SAAe,YAAY,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAK3D;;QACC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAEpB,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,mBAAS,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC/C,GAAG,EAAE,IAAI;YACT,WAAW;SACZ,CAAuB,CAAC;QAEzB,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAED,kBAAe,YAAY,CAAC","file":"getEventList.js","sourcesContent":["import { Event, sequelize } from '@Models';\nimport { Transaction } from 'sequelize';\n\nconst Mode1Sql = `\nWITH MATCH AS (\n    SELECT\n        event.id id\n    FROM\n        \"public\".\"event\"\n    LEFT JOIN \"public\".\"stack\" ON event.id = stack.event\n\n    AND stack.status = 'admitted'\nGROUP BY\n    event.id\nORDER BY\n    min(stack. \"updatedAt\") ASC\n)\nSELECT\n    \"event\".\"name\",\n    \"event\".\"pinyin\",\n    \"event\".\"description\",\n    \"event\".\"status\",\n    \"event\".\"id\",\n    \"event\".\"createdAt\",\n    \"event\".\"updatedAt\",\n    \"headerImage\".\"imageUrl\" AS \"headerImage.imageUrl\",\n    \"headerImage\".\"source\" AS \"headerImage.source\",\n    \"headerImage\".\"sourceUrl\" AS \"headerImage.sourceUrl\",\n    \"headerImage\".\"id\" AS \"headerImage.id\",\n    \"headerImage\".\"createdAt\" AS \"headerImage.createdAt\",\n    \"headerImage\".\"updatedAt\" AS \"headerImage.updatedAt\",\n    \"headerImage\".\"event\" AS \"headerImage.event\"\nFROM\n    \"public\".\"event\"\n    RIGHT JOIN MATCH ON \"event\".id = MATCH.id\n    LEFT OUTER JOIN \"public\".\"headerimage\" AS \"headerImage\" ON \"event\".\"id\" = \"headerImage\".\"eventId\"\nWHERE\n    \"event\".\"id\" IN (\n        SELECT\n            id\n        FROM\n            MATCH) OFFSET 0\n    LIMIT 10\n`;\n\nasync function getEventList({ mode, page, where, transaction }: {\n  mode: number | string;\n  page: number | string;\n  where: any;\n  transaction: Transaction;\n}) {\n  mode = Number(mode);\n  page = Number(page);\n\n  const [events] = await sequelize.query(Mode1Sql, {\n    raw: true,\n    transaction,\n  }) as [Event[], unknown];\n\n  return events;\n}\n\nexport default getEventList;\n"],"sourceRoot":"../../../../src"}