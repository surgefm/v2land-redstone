{"version":3,"sources":["../api/services/OAuth2Service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,gFAAgD;AAChD,qCAAmD;AAEnD,SAAsB,iBAAiB,CACrC,QAAgB,EAChB,qBAA6B,EAC7B,WAAoB;;QAEpB,MAAM,0BAA0B,GAAG,MAAM,kCAAwB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE;gBACjF,KAAK,EAAE,QAAQ;gBACf,qBAAqB;gBACrB,MAAM,EAAE,QAAQ;aACjB,EAAE,CAAC,CAAC;QAEL,MAAM,KAAK,GAAG,IAAA,8BAAY,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9D,MAAM,YAAY,GAAG,WAAW,CAAC,CAAC,CAAC,IAAA,8BAAY,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/F,MAAM,WAAW,GAAG,MAAM,kCAAwB,CAAC,MAAM,CAAC;YACxD,KAAK;YACL,YAAY;YACZ,MAAM,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YACvD,KAAK,EAAE,QAAQ;YACf,qBAAqB;YACrB,MAAM,EAAE,QAAQ;SACjB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,0BAA0B,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAS,EAAE;YACnE,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;YACzB,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC,CAAA,CAAC,EAAE,CAAC,CAAC;QAEN,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AA7BD,8CA6BC","file":"OAuth2Service.js","sourcesContent":["import randomString from 'crypto-random-string';\nimport { AuthorizationAccessToken } from '@Models';\n\nexport async function getNewAccessToken(\n  clientId: number,\n  authorizationClientId: number,\n  refreshable: boolean,\n) {\n  const existingActiveAccessTokens = await AuthorizationAccessToken.findAll({ where: {\n    owner: clientId,\n    authorizationClientId,\n    status: 'active',\n  } });\n\n  const token = randomString({ length: 256, type: 'url-safe' });\n  const refreshToken = refreshable ? randomString({ length: 256, type: 'url-safe' }) : undefined;\n  const accessToken = await AuthorizationAccessToken.create({\n    token,\n    refreshToken,\n    expire: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),\n    owner: clientId,\n    authorizationClientId,\n    status: 'active',\n  });\n\n  const promises = existingActiveAccessTokens.map(token => (async () => {\n    token.status = 'revoked';\n    await token.save();\n  })());\n\n  await Promise.all(promises);\n  return accessToken;\n}\n"],"sourceRoot":"../../../src"}