{"version":3,"sources":["../api/services/InviteCodeService.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAA6C;AAE7C,mDAA6C;AAC7C,+CAA6D;AAEtD,MAAM,gBAAgB,GAAG,CAAO,OAAiC,EAAmB,EAAE;IAC3F,MAAM,KAAK,GAAG,MAAM,IAAA,0BAAU,EAAC,OAAO,CAAC,CAAC;IACxC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,IAAA,0CAA4B,GAAE,EAAE,CAAC;IAC3D,OAAO,MAAM,oBAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE;QACpD,IAAI,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,IAAA,0CAA4B,GAAE,EAAE,CAAC;KACxD;IACD,MAAM,oBAAU,CAAC,MAAM,CAAC;QACtB,OAAO,EAAE,KAAK,CAAC,EAAE;QACjB,IAAI;KACL,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AACd,CAAC,CAAA,CAAC;AAXW,QAAA,gBAAgB,oBAW3B;AAEK,MAAM,OAAO,GAAG,CAAO,IAAY,EAA+B,EAAE;IACzE,MAAM,MAAM,GAAG,MAAM,oBAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC7D,IAAI,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAC1B,IAAI,MAAM,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAChC,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AALW,QAAA,OAAO,WAKlB;AAEK,MAAM,aAAa,GAAG,CAAO,IAAgB,EAAE,IAAY,EAAE,WAAyB,EAAiB,EAAE;IAC9G,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;IACtB,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;AACnC,CAAC,CAAA,CAAC;AAHW,QAAA,aAAa,iBAGxB","file":"InviteCodeService.js","sourcesContent":["import { InviteCode, Client } from '@Models';\nimport { Transaction } from 'sequelize';\nimport { findClient } from './ClientService';\nimport { generateRandomAlphabetString } from './UtilService';\n\nexport const createInviteCode = async (ownerId: Client | number | string): Promise<string> => {\n  const owner = await findClient(ownerId);\n  let code = `${owner.id}-${generateRandomAlphabetString()}`;\n  while (await InviteCode.findOne({ where: { code } })) {\n    code = `${owner.id}-${generateRandomAlphabetString()}`;\n  }\n  await InviteCode.create({\n    ownerId: owner.id,\n    code,\n  });\n  return code;\n};\n\nexport const isValid = async (code: string): Promise<false | InviteCode> => {\n  const invite = await InviteCode.findOne({ where: { code } });\n  if (!invite) return false;\n  if (invite.userId) return false;\n  return invite;\n};\n\nexport const useInviteCode = async (code: InviteCode, user: Client, transaction?: Transaction): Promise<void> => {\n  code.userId = user.id;\n  await code.save({ transaction });\n};\n"],"sourceRoot":"../../../src"}