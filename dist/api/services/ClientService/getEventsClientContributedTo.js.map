{"version":3,"sources":["../api/services/ClientService/getEventsClientContributedTo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qCAAkF;AAClF,mEAAqD;AAErD,SAAe,4BAA4B,CAAC,QAAgB,EAAE,EAAE,WAAW,KAAoC,EAAE;;QAC/G,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,KAAK,CAAQ;;;;;qBAKzB,QAAQ;;;;kCAIK,QAAQ;;;;GAIvC,EAAE;YACD,WAAW;YACX,IAAI,EAAE,mBAAS,CAAC,UAAU,CAAC,MAAM;SAClC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAM,CAAC,EAAC,EAAE;YACrC,CAAC,CAAC,WAAW,GAAG,MAAM,qBAAW,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YACrF,MAAM,SAAS,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACvE,CAAC,CAAC,IAAI,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM,CAAC,EAAC,EAAE,gDAAC,OAAA,aAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA,GAAA,CAAC,CAAC,CAAC;YAC5E,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;YACpD,CAAC,CAAC,SAAS,GAAG,MAAM,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACnD,CAAC,CAAA,CAAC,CAAC,CAAC;QAEJ,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAED,kBAAe,4BAA4B,CAAC","file":"getEventsClientContributedTo.js","sourcesContent":["import { Transaction } from 'sequelize';\nimport { sequelize, Event, HeaderImage, Tag, EventTag, Sequelize } from '@Models';\nimport * as StarService from '@Services/StarService';\n\nasync function getEventsClientContributedTo(clientId: number, { transaction }: { transaction?: Transaction } = {}) {\n  const events = await sequelize.query<Event>(`\n    SELECT *\n    FROM event\n    WHERE\n        event.status = 'admitted' AND\n      (\"ownerId\" = ${clientId} OR\n      (event.id in (\n        SELECT DISTINCT ON (\"eventId\") \"eventId\"\n        FROM public.\"eventContributor\"\n        WHERE \"contributorId\" = ${clientId}\n        ORDER BY \"eventId\", \"createdAt\" DESC\n      )))\n    ORDER BY event.\"updatedAt\" DESC\n  `, {\n    transaction,\n    type: Sequelize.QueryTypes.SELECT,\n  });\n\n  await Promise.all(events.map(async e => {\n    e.headerImage = await HeaderImage.findOne({ where: { eventId: e.id }, transaction });\n    const eventTags = await EventTag.findAll({ where: { eventId: e.id } });\n    e.tags = await Promise.all(eventTags.map(async t => Tag.findByPk(t.tagId)));\n    e.tags = e.tags.filter(t => t.status === 'visible');\n    e.starCount = await StarService.countStars(e.id);\n  }));\n\n  return events;\n}\n\nexport default getEventsClientContributedTo;\n\n"],"sourceRoot":"../../../../src"}