{"version":3,"sources":["../api/services/ClientService/createClient.ts"],"names":[],"mappings":"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","file":"createClient.js","sourcesContent":["import { Transaction } from 'sequelize';\nimport { Client, Record } from '@Models';\n\nimport * as AccessControlService from '../AccessControlService';\nimport * as InviteCodeService from '../InviteCodeService';\nimport * as UtilService from '../UtilService';\nimport * as RedisService from '../RedisService';\nimport * as EmailService from '../EmailService';\nimport tokenGenerator from './tokenGenerator';\nimport updateAlgoliaIndex from './updateAlgoliaIndex';\n\ntype UserData = {\n  username: string;\n  nickname?: string;\n  description?: string;\n  hashedPassword?: string;\n  avatar?: string;\n  email?: string;\n  emailVerified?: boolean;\n  inviteCode?: string;\n}\n\nasync function createClient({\n  username,\n  nickname,\n  description,\n  hashedPassword = '',\n  email = '',\n  avatar,\n  emailVerified = false,\n  inviteCode,\n}: UserData, transaction?: Transaction): Promise<Client> {\n  let client: Client;\n\n  await UtilService.execWithTransaction(async (transaction: Transaction) => {\n    const code = inviteCode && await InviteCodeService.isValid(inviteCode);\n    const role = inviteCode ? 'editor' : 'contributor';\n\n    client = await Client.create({\n      username,\n      nickname: nickname || username,\n      description,\n      password: hashedPassword,\n      avatar,\n      email,\n      emailVerified,\n      role,\n    }, {\n      raw: true,\n      transaction,\n    });\n\n    if (code) {\n      await InviteCodeService.useInviteCode(code, client, transaction);\n    }\n\n    await AccessControlService.allowClientToEditRole(client.id, client.id);\n    await AccessControlService.addUserRoles(client.id, role === 'editor'\n      ? AccessControlService.roles.editors\n      : AccessControlService.roles.contributors);\n\n    await Record.create({\n      model: 'Client',\n      operation: 'create',\n      data: client,\n      target: client.id,\n      action: 'createClient',\n    }, { transaction });\n\n    if (!emailVerified) {\n      const verificationToken = tokenGenerator();\n      await Record.create({\n        model: 'Miscellaneous',\n        operation: 'create',\n        data: {\n          clientId: client.id,\n          verificationToken,\n          expire: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3),\n        },\n        target: client.id,\n        action: 'createClientVerificationToken',\n      }, { transaction });\n      EmailService.register(client, verificationToken);\n    }\n  }, transaction);\n\n  updateAlgoliaIndex({ clientId: client.id, transaction });\n  await RedisService.set(RedisService.getClientIdKey(client.username), client.id);\n\n  return client;\n}\n\nexport default createClient;\n"],"sourceRoot":"../../../../src"}