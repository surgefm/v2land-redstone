{"version":3,"sources":["../api/services/ChatService/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport { BroadcastOperator } from 'socket.io';\nimport { DefaultEventsMap } from 'socket.io/dist/typed-events';\nimport { Chat, ChatMember } from '@Models';\nimport chatroomPath from '@Sockets/chatroom/chatroomPath';\n\n\nexport const getNewsroomChatId = (eventId: number) => {\n  return `chat-newsroom:${eventId}`;\n};\n\nexport const getClientChatId = (...clientIds: number[]) => {\n  const ids = [...new Set(clientIds).values()].sort();\n  return `chat-clients:${ids.join('-')}`;\n};\n\nexport const getChatId = (type: 'client' | 'newsroom', ids: number | number[]) => {\n  if (type === 'client') return getClientChatId(...ids as number[]);\n  return getNewsroomChatId(ids as number);\n};\n\n\nexport function getChat(type: 'client', clientIds: number[]): Promise<Chat>;\nexport function getChat(type: 'newsroom', eventId: number): Promise<Chat>;\nexport async function getChat(type: 'client' | 'newsroom', ids: number | number[]) {\n  if (type === 'client') {\n    return Chat.findByPk(getClientChatId(...ids as number[]));\n  }\n  return Chat.findByPk(getNewsroomChatId(ids as number));\n}\n\n\nexport function getOrCreateChat(type: 'client', clientIds: number[]): Promise<Chat>;\nexport function getOrCreateChat(type: 'newsroom', eventId: number): Promise<Chat>;\nexport async function getOrCreateChat(type: 'client' | 'newsroom', ids: number | number[]) {\n  if (type === 'client') {\n    const _ids = ids as number[];\n    const clientChatId = getClientChatId(..._ids);\n    const exist = await Chat.findByPk(clientChatId);\n    if (exist) return exist;\n    const newChat = await Chat.create({\n      id: clientChatId,\n    });\n    await Promise.all(_ids.map(id => ChatMember.create({\n      id: uuidv4(),\n      chatId: clientChatId,\n      clientId: id,\n    })));\n    return newChat;\n  } else if (type === 'newsroom') {\n    const eventId = ids as number;\n    const newsroomChatId = getNewsroomChatId(eventId);\n    const exist = await Chat.findByPk(newsroomChatId);\n    if (exist) return exist;\n    return Chat.create({\n      id: newsroomChatId,\n      eventId,\n    });\n  }\n}\n\n\nexport function getChatSocket(type: 'client', clientIds: number[]): Promise<BroadcastOperator<DefaultEventsMap, any>>;\nexport function getChatSocket(type: 'newsroom', eventId: number): Promise<BroadcastOperator<DefaultEventsMap, any>>;\nexport function getChatSocket(chatId: string): Promise<BroadcastOperator<DefaultEventsMap, any>>;\nexport async function getChatSocket(type: 'client' | 'newsroom' | string, ids?: number | number[]) {\n  const { loadSocket } = await import('@Sockets');\n  const server = await loadSocket();\n  if (type === 'client') {\n    return server.of(chatroomPath).in(getClientChatId(...(ids as number[])));\n  } else if (type === 'newsroom') {\n    return server.of(chatroomPath).in(getNewsroomChatId(ids as number));\n  }\n  return server.of(chatroomPath).in(type);\n}\n\n\nexport function revealChatroom(chatId: string): ['client', number[]] | ['newsroom', number] {\n  const [typeStr, idStr] = chatId.split(':');\n  return [\n    typeStr === 'chat-newsroom' ? 'newsroom' : 'client',\n    typeStr === 'chat-newsroom' ? +idStr : +idStr.split('-').map(s => +s),\n  ] as ['client', number[]] | ['newsroom', number];\n}\n"],"sourceRoot":"../../../../src"}