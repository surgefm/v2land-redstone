{"version":3,"sources":["../api/services/UploadService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qCAA6B;AAC7B,wDAAgC;AAChC,+CAAiD;AAEjD,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;AACxC,QAAA,KAAK,GAAG,MAAM,IAAI,SAAS,IAAI,SAAS,CAAC;AAEzC,QAAA,EAAE,GAAG,aAAK,CAAC,CAAC,CAAC,IAAI,YAAE,CAAC;IAC/B,UAAU,EAAE,YAAY;IACxB,QAAQ,EAAE,qCAAqC;IAC/C,WAAW,EAAE;QACX,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM;QAC/B,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS;KACvC;CACF,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAEH,MAAM,aAAa,GAAG,CAAO,GAAW,EAAE,SAAiB,EAAmB,EAAE;IACrF,IAAI,CAAC,aAAK;QAAE,OAAO;IACnB,MAAM,QAAQ,GAAG,IAAA,8BAAgB,EAAC,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,MAAM,IAAA,kBAAQ,EAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,UAAE,CAAC,MAAM,CAAC;YACR,MAAM,EAAE,SAAS;YACjB,GAAG,EAAE,QAAQ;YACb,IAAI,EAAE,MAAM;YACZ,GAAG,EAAE,aAAa;YAClB,YAAY,EAAE,qBAAqB;SACpC,EAAE,CAAC,GAAQ,EAAE,EAAE;YACd,IAAI,GAAG;gBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AAhBW,QAAA,aAAa,iBAgBxB","file":"UploadService.js","sourcesContent":["import { S3 } from 'aws-sdk';\nimport download from 'download';\nimport { generateFilename } from './UtilService';\n\nconst { S3_KEY, S3_SECRET, S3_BUCKET } = process.env;\nexport const hasS3 = S3_KEY && S3_SECRET && S3_BUCKET;\n\nexport const s3 = hasS3 ? new S3({\n  apiVersion: '2006-03-01',\n  endpoint: 'https://sfo3.digitaloceanspaces.com',\n  credentials: {\n    accessKeyId: process.env.S3_KEY,\n    secretAccessKey: process.env.S3_SECRET,\n  },\n}) : null;\n\nexport const uploadFromUrl = async (url: string, extension: string): Promise<string> => {\n  if (!hasS3) return;\n  const filename = generateFilename({ originalname: extension });\n  const buffer = await download(url, 'dist');\n  return new Promise((resolve, reject) => {\n    s3.upload({\n      Bucket: S3_BUCKET,\n      Key: filename,\n      Body: buffer,\n      ACL: 'public-read',\n      StorageClass: 'INTELLIGENT_TIERING',\n    }, (err: any) => {\n      if (err) return reject(err);\n      resolve(filename);\n    });\n  });\n};\n"],"sourceRoot":"../../../src"}