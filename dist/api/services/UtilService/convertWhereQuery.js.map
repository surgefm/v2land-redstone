{"version":3,"sources":["../api/services/UtilService/convertWhereQuery.ts"],"names":[],"mappings":";;;;;AAAA,yCAA+B;AAC/B,oDAAuB;AAEvB,SAAS,iBAAiB,CAAC,KAAU;IACnC,IAAI,CAAC,KAAK;QAAE,OAAO,EAAE,CAAC;IAEtB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpC,IAAI,GAAG,KAAK,YAAY,EAAE;YACxB,KAAK,CAAC,cAAE,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YACnC,OAAO,KAAK,CAAC,UAAU,CAAC;SACzB;aAAM,IAAI,GAAG,KAAK,UAAU,EAAE;YAC7B,KAAK,CAAC,cAAE,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,KAAK,CAAC,QAAQ,CAAC;SACvB;aAAM,IAAI,GAAG,KAAK,UAAU,EAAE;YAC7B,KAAK,CAAC,cAAE,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YACpC,OAAO,KAAK,CAAC,QAAQ,CAAC;SACvB;aAAM,IAAI,GAAG,KAAK,IAAI,IAAI,gBAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;YAChD,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,KAAK,CAAC,cAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;YAClB,OAAO,KAAK,CAAC,EAAE,CAAC;SACjB;aAAM,IAAI,gBAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;YAChC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;SACtC;aAAM,IAAI,gBAAC,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;YACtC,KAAK,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,kBAAe,iBAAiB,CAAC","file":"convertWhereQuery.js","sourcesContent":["import { Op } from 'sequelize';\nimport _ from 'lodash';\n\nfunction convertWhereQuery(where: any) {\n  if (!where) return {};\n\n  for (const key of Object.keys(where)) {\n    if (key === 'startsWith') {\n      where[Op.iLike] = `${where[key]}%`;\n      delete where.startsWith;\n    } else if (key === 'endsWith') {\n      where[Op.iLike] = `%${where[key]}`;\n      delete where.endsWith;\n    } else if (key === 'contains') {\n      where[Op.iLike] = `%${where[key]}%`;\n      delete where.contains;\n    } else if (key === 'or' && _.isArray(where[key])) {\n      const or = where[key].map((w: any) => convertWhereQuery(w));\n      where[Op.or] = or;\n      delete where.or;\n    } else if (_.isArray(where[key])) {\n      where[key] = { [Op.in]: where[key] };\n    } else if (_.isPlainObject(where[key])) {\n      where[key] = convertWhereQuery(where[key]);\n    }\n  }\n\n  return where;\n}\n\nexport default convertWhereQuery;\n"],"sourceRoot":"../../../../src"}