{"version":3,"sources":["../api/services/NotificationService/notifyWhenNewsCreated.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAmC;AACnC,qCAAqD;AACrD,oEAAsD;AACtD,8DAAgD;AAChD,gEAAkD;AAClD,8EAAgE;AAEhE,SAAe,qBAAqB,CAAC,IAAU,EAAE,OAAiC;;QAChF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;QACrD,MAAM,OAAO,GAAG,MAAM,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAEpE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,KAAI,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;QACxD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAClD,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;YAChE,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;SACpE;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;CAAA;AAED,SAAe,SAAS,CAAC,KAAY,EAAE,KAAY,EAAE,IAAU,EAAE,QAAgB,EAAE,OAAgB;;QACjG,IAAI,OAAO,GAAG,IAAI,QAAQ,YAAY,IAAI,CAAC,KAAK,IAAI;YACpD,WAAW,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,YAAY,CAAC;QAEhD,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACzC,OAAO,GAAG,QAAQ,QAAQ,SAAS;gBACnC,KAAK,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,IAAI;gBACvE,SAAS,CAAC;SACX;QAED,OAAO,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;CAAA;AAED,SAAe,YAAY,CAAC,KAAY,EAAE,KAAY,EAAE,IAAU,EAAE,QAAgB,EAAE,OAAgB;;QACpG,IAAI,OAAO,GAAG,IAAI,QAAQ,WAAW,IAAI,CAAC,KAAK,IAAI;YACjD,eAAe,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,SAAS,CAAC;QAGnD,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACzC,OAAO,GAAG,OAAO,QAAQ,QAAQ;gBACjC,KAAK,KAAK,CAAC,IAAI,KAAK,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI;gBACvE,SAAS,CAAC;SACX;QAED,OAAO,eAAe,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;CAAA;AAED,kBAAe,qBAAqB,CAAC","file":"notifyWhenNewsCreated.js","sourcesContent":["import { globals } from '@Configs';\nimport { News, Client, Event, Stack } from '@Models';\nimport * as TelegramService from '../TelegramService';\nimport * as SlackService from '../SlackService';\nimport * as ClientService from '../ClientService';\nimport * as AccessControlService from '../AccessControlService';\n\nasync function notifyWhenNewsCreated(news: News, handler: number | string | Client) {\n  const client = await ClientService.findClient(handler);\n  const username = (client && client.username) || '游客';\n  const isAdmin = await AccessControlService.isClientAdmin(client.id);\n\n  const stacks = news.stacks || await news.$get('stacks');\n  const promises = [];\n  for (const stack of stacks) {\n    const event = await Event.findByPk(stack.eventId);\n    promises.push(sendSlack(event, stack, news, username, isAdmin));\n    promises.push(sendTelegram(event, stack, news, username, isAdmin));\n  }\n\n  return Promise.all(promises);\n}\n\nasync function sendSlack(event: Event, stack: Stack, news: News, username: string, isAdmin: boolean) {\n  let content = `*${username}* 提交了新闻 *${news.title}* ` +\n  `，请管理员尽快<${globals.site}/${event.id}/admit|审核>`;\n\n  if (isAdmin && news.status === 'admitted') {\n    content = `管理员 *${username}* 提交了新闻` +\n    ` <${globals.site}/${event.id}/${stack.id}/${news.id})|${event.name}> ` +\n    `，进来看看吧！`;\n  }\n\n  return SlackService.sendText(content);\n}\n\nasync function sendTelegram(event: Event, stack: Stack, news: News, username: string, isAdmin: boolean) {\n  let content = `*${username}*提交了新闻*「${news.title}*」` +\n    `，请管理员尽快[审核](${globals.site}/${event.id}/admit)`;\n\n\n  if (isAdmin && news.status === 'admitted') {\n    content = `管理员*${username}*提交了新闻` +\n    `「[${event.name}](${globals.site}/${event.id}/${stack.id}/${news.id})」` +\n    `，进来看看吧！`;\n  }\n\n  return TelegramService.sendText(content, 'Markdown', true);\n}\n\nexport default notifyWhenNewsCreated;\n"],"sourceRoot":"../../../../src"}