{"version":3,"sources":["../api/services/NotificationService/notifyWhenEventCreated.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAmC;AAGnC,oEAAsD;AACtD,8DAAgD;AAChD,gEAAkD;AAClD,8EAAgE;AAEhE,SAAe,sBAAsB,CAAC,KAAe,EAAE,OAAiC;;QACtF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;QACrD,MAAM,OAAO,GAAG,MAAM,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAEpE,MAAM,gBAAgB,GAAG,GAAS,EAAE;YAClC,IAAI,OAAO,GAAG,IAAI,QAAQ,YAAY,KAAK,CAAC,IAAI,IAAI;gBACpD,WAAW,kBAAO,CAAC,IAAI,kBAAkB,CAAC;YAE1C,IAAI,OAAO,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;gBAC1C,OAAO,GAAG,QAAQ,QAAQ,SAAS;oBACnC,KAAK,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,IAAI;oBAC/C,SAAS,CAAC;aACX;YAED,OAAO,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC,CAAA,CAAC;QAEF,MAAM,mBAAmB,GAAG,GAAS,EAAE;YACrC,IAAI,OAAO,GAAG,IAAI,QAAQ,WAAW,KAAK,CAAC,IAAI,IAAI;gBACnD,eAAe,kBAAO,CAAC,IAAI,eAAe,CAAC;YAE3C,IAAI,OAAO,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;gBAC1C,OAAO,GAAG,OAAO,QAAQ,QAAQ;oBACjC,KAAK,KAAK,CAAC,IAAI,KAAK,kBAAO,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI;oBAChD,SAAS,CAAC;aACX;YAED,OAAO,eAAe,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAA,CAAC;QAEF,OAAO,OAAO,CAAC,GAAG,CAAC;YACjB,gBAAgB,EAAE;YAClB,mBAAmB,EAAE;SACtB,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,sBAAsB,CAAC","file":"notifyWhenEventCreated.js","sourcesContent":["import { globals } from '@Configs';\nimport { EventObj } from '@Types';\nimport { Client } from '@Models';\nimport * as TelegramService from '../TelegramService';\nimport * as SlackService from '../SlackService';\nimport * as ClientService from '../ClientService';\nimport * as AccessControlService from '../AccessControlService';\n\nasync function notifyWhenEventCreated(event: EventObj, handler: number | string | Client) {\n  const client = await ClientService.findClient(handler);\n  const username = (client && client.username) || '游客';\n  const isAdmin = await AccessControlService.isClientAdmin(client.id);\n\n  const sendSlackMessage = async () => {\n    let content = `*${username}* 提交了事件 *${event.name}* ` +\n    `，请管理员尽快<${globals.site}/admin/event|审核>`;\n\n    if (isAdmin && event.status === 'admitted') {\n      content = `管理员 *${username}* 提交了事件` +\n      ` <${globals.site}/${event.id}|${event.name}> ` +\n      `，进来看看吧！`;\n    }\n\n    return SlackService.sendText(content);\n  };\n\n  const sendTelegramMessage = async () => {\n    let content = `*${username}*提交了事件*「${event.name}*」` +\n    `，请管理员尽快[审核](${globals.site}/admin/event)`;\n\n    if (isAdmin && event.status === 'admitted') {\n      content = `管理员*${username}*提交了事件` +\n      `「[${event.name}](${globals.site}/${event.id})」` +\n      `，进来看看吧！`;\n    }\n\n    return TelegramService.sendText(content, 'Markdown', true);\n  };\n\n  return Promise.all([\n    sendSlackMessage(),\n    sendTelegramMessage(),\n  ]);\n}\n\nexport default notifyWhenEventCreated;\n"],"sourceRoot":"../../../../src"}