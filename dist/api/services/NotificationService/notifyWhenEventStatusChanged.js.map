{"version":3,"sources":["../api/services/NotificationService/notifyWhenEventStatusChanged.ts"],"names":[],"mappings":"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","file":"notifyWhenEventStatusChanged.js","sourcesContent":["import { MissingParameterError } from '@Utils/errors';\nimport { globals } from '@Configs';\nimport { EventObj } from '@Types';\nimport { Client, Record } from '@Models';\nimport * as TelegramService from '../TelegramService';\nimport * as SlackService from '../SlackService';\nimport * as ClientService from '../ClientService';\n\nasync function notifyWhenEventStatusChanged(\n  oldEvent: EventObj,\n  newEvent: EventObj,\n  clientId: number | string | Client,\n) {\n  if (!oldEvent) {\n    throw new MissingParameterError('oldEvent');\n  }\n  if (!newEvent) {\n    throw new MissingParameterError('newEvent');\n  }\n\n  const client = await ClientService.findClient(clientId);\n\n  if ((oldEvent.status === 'pending' || oldEvent.status === 'rejected') &&\n    newEvent.status === 'admitted') {\n    await sendNotification(newEvent, 'admitted', client);\n  } else if (oldEvent.status !== 'rejected' && newEvent.status === 'rejected') {\n    await sendNotification(newEvent, 'rejected', client);\n  } else if (oldEvent.status === 'hidden' && newEvent.status === 'admitted') {\n    await sendNotification(newEvent, 'admittedFromHidden', client);\n  }\n}\n\nasync function sendNotification(event: EventObj, status: string, handler: Client) {\n  const newStatusStringSet = {\n    'admitted': '审核通过了，进来看看吧！',\n    'admittedFromHidden': '转为公开状态，进来看看吧！',\n    'pending': '改为待审核状态，如有疑虑请咨询任一社区管理员。',\n    'rejected': '拒绝了，如有疑虑请咨询任一社区管理员。',\n    'hidden': '隐藏了，如有疑虑请咨询任一社区管理员。',\n  };\n\n  const submitRecord = await Record.findOne({\n    where: {\n      model: 'Event',\n      action: 'createEvent',\n      target: event.id,\n    },\n    include: [{\n      model: Client,\n      required: true,\n    }],\n  });\n\n  const username = (submitRecord && submitRecord.ownedBy.username)\n    ? submitRecord.ownedBy.username\n    : '游客';\n\n  const sendTelegram = async () => {\n    const content =\n      `*${ username }*提交的事件` +\n      `「[${ event.name }](${ globals.site }/${ event.id }) 」` +\n      `被管理员*${ handler.username }*${ (newStatusStringSet as any)[status] }`;\n    return TelegramService.sendText(content, 'Markdown');\n  };\n\n  const sendSlack = async () => {\n    const content =\n      `*${ username }* 提交的事件` +\n      ` <${ globals.site }/${ event.id }|${ event.name }>  ` +\n      `被管理员 *${ handler.username }* ${ (newStatusStringSet as any)[status] }`;\n    return SlackService.sendText(content);\n  };\n\n  return Promise.all([\n    sendTelegram(),\n    sendSlack(),\n  ]);\n}\n\nexport default notifyWhenEventStatusChanged;\n"],"sourceRoot":"../../../../src"}