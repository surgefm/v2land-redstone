{"version":3,"sources":["../api/services/NotificationService/updateStackNotifications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAwE;AACxE,4DAA8C;AAC9C,yCAA4C;AAE5C,SAAe,wBAAwB,CACrC,KAAY,EACZ,EAAE,WAAW,EAAE,KAAK,GAAG,KAAK,KAGxB,EAAE;;QAEN,MAAM,WAAW,GAAG,MAAM,eAAK,CAAC,OAAO,CAAC;YACtC,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,MAAM,EAAE,UAAU;gBAClB,KAAK,EAAE,EAAE,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;aACvB;YACD,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC1B,UAAU,EAAE,CAAC,IAAI,CAAC;YAClB,WAAW;SACZ,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAAE,OAAO;QAExE,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,KAAK,CAAC;YACrC,KAAK,EAAE;gBACL,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,KAAK,CAAC,EAAE;gBAChB,MAAM,EAAE,gBAAgB;aACzB;YACD,WAAW;SACZ,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,IAAI,WAAW;YAAE,OAAO;QAElC,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;SAC9D;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;gBAC9C,OAAO,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;YACxD,CAAC,CAAA,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;SACvD;IACH,CAAC;CAAA;AAED,SAAe,mBAAmB,CAAC,KAAY,EAAE,KAAY,EAAE,WAAwB;;QACrF,MAAM,KAAK,GAAG,CAAC,eAAe,EAAE,wBAAwB,CAAC,CAAC;QAE1D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE;gBAC5C,MAAM,sBAAY,CAAC,MAAM,CAAC;oBACxB,MAAM,EAAE,WAAW;iBACpB,EAAE;oBACD,KAAK,EAAE;wBACL,OAAO,EAAE,KAAK,CAAC,EAAE;wBACjB,IAAI;qBACL;oBACD,WAAW;iBACZ,CAAC,CAAC;aACJ;YACD,MAAM,sBAAY,CAAC,MAAM,CAAC;gBACxB,IAAI,EAAE,MAAM,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;gBACxE,MAAM,EAAE,SAAS;gBACjB,OAAO,EAAE,KAAK,CAAC,EAAE;gBACjB,IAAI;aACL,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;SACrB;QAED,MAAM,gBAAM,CAAC,MAAM,CAAC;YAClB,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,KAAK,CAAC,EAAE;YAChB,SAAS,EAAE,QAAQ;YACnB,MAAM,EAAE,gBAAgB;SACzB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;IACtB,CAAC;CAAA;AAED,kBAAe,wBAAwB,CAAC","file":"updateStackNotifications.js","sourcesContent":["import { Record, Event, Stack, Notification, sequelize } from '@Models';\nimport * as ModeService from '../ModeService';\nimport { Transaction, Op } from 'sequelize';\n\nasync function updateStackNotifications(\n  stack: Stack,\n  { transaction, force = false }: {\n    transaction?: Transaction;\n    force?: boolean;\n  } = {},\n) {\n  const latestStack = await Stack.findOne({\n    where: {\n      eventId: stack.eventId,\n      status: 'admitted',\n      order: { [Op.gte]: 0 },\n    },\n    order: [['order', 'DESC']],\n    attributes: ['id'],\n    transaction,\n  });\n\n  if (!force && (!latestStack || (+latestStack.id !== +stack.id))) return;\n\n  const recordCount = await Record.count({\n    where: {\n      model: 'Stack',\n      target: stack.id,\n      action: 'notifyNewStack',\n    },\n    transaction,\n  });\n\n  if (!force && recordCount) return;\n\n  let event = stack.event;\n  if (typeof event !== 'object') {\n    event = await Event.findByPk(stack.eventId, { transaction });\n  }\n\n  if (!transaction) {\n    await sequelize.transaction(async transaction => {\n      return updateNotifications(event, stack, transaction);\n    });\n  } else {\n    return updateNotifications(event, stack, transaction);\n  }\n}\n\nasync function updateNotifications(event: Event, stack: Stack, transaction: Transaction) {\n  const modes = ['EveryNewStack', '30DaysSinceLatestStack'];\n\n  for (const mode of modes) {\n    if (ModeService.getMode(mode).keepLatestOnly) {\n      await Notification.update({\n        status: 'discarded',\n      }, {\n        where: {\n          eventId: event.id,\n          mode,\n        },\n        transaction,\n      });\n    }\n    await Notification.create({\n      time: await ModeService.getMode(mode).new({ event, stack, transaction }),\n      status: 'pending',\n      eventId: event.id,\n      mode,\n    }, { transaction });\n  }\n\n  await Record.create({\n    model: 'Stack',\n    target: stack.id,\n    operation: 'create',\n    action: 'notifyNewStack',\n  }, { transaction });\n}\n\nexport default updateStackNotifications;\n"],"sourceRoot":"../../../../src"}