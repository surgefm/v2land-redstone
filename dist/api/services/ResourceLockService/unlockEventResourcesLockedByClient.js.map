{"version":3,"sources":["../api/services/ResourceLockService/unlockEventResourcesLockedByClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAuD;AACvD,qCAAkD;AAClD,mCAA6D;AAC7D,8FAAsE;AACtE,sDAA8B;AAE9B,SAA8B,kCAAkC,CAAC,OAAe,EAAE,QAAgB;;QAChG,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,aAAa,GAAG,MAAM,IAAA,oCAA0B,EAAC,OAAO,CAAC,CAAC;YAChE,MAAM,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;YAC3E,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,gBAAM,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACzG,OAAO,iBAAiB,CAAC;SAC1B;aAAM;YACL,MAAM,aAAa,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;gBAC/C,KAAK,EAAE;oBACL,OAAO;oBACP,KAAK,EAAE,QAAQ;oBACf,MAAM,EAAE,2BAAkB,CAAC,MAAM;oBACjC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;iBAC3C;gBACD,UAAU,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,CAAC;aACzD,CAAC,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAC7D,OAAO,aAAkC,CAAC;SAC3C;IACH,CAAC;CAAA;AAnBD,qDAmBC","file":"unlockEventResourcesLockedByClient.js","sourcesContent":["import * as RedisService from '@Services/RedisService';\nimport { ResourceLock, Sequelize } from '@Models';\nimport { ResourceLockStatus, ResourceLockObj } from '@Types';\nimport getEventLockedResourceList from './getEventLockedResourceList';\nimport unlock from './unlock';\n\nexport default async function unlockEventResourcesLockedByClient(eventId: number, clientId: number) {\n  if (RedisService.redis) {\n    const resourceLocks = await getEventLockedResourceList(eventId);\n    const unlockedResources = resourceLocks.filter(l => l.locker === clientId);\n    await Promise.all(unlockedResources.map(lock => unlock(lock.model, lock.resourceId, clientId, eventId)));\n    return unlockedResources;\n  } else {\n    const resourceLocks = await ResourceLock.findAll({\n      where: {\n        eventId,\n        owner: clientId,\n        status: ResourceLockStatus.ACTIVE,\n        expires: { [Sequelize.Op.lt]: Date.now() },\n      },\n      attributes: ['eventId', 'model', 'resourceId', 'locker'],\n    });\n    await Promise.all(resourceLocks.map(lock => lock.destroy()));\n    return resourceLocks as ResourceLockObj[];\n  }\n}\n"],"sourceRoot":"../../../../src"}