{"version":3,"sources":["../api/services/ResourceLockService/lock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAuD;AACvD,qCAAkD;AAClD,mCAA4C;AAC5C,uCAAmC;AACnC,wFAAgE;AAChE,kGAA0E;AAE1E,MAAM,GAAG,GAAG,kBAAO,CAAC,eAAe,CAAC;AAEpC,SAAe,IAAI,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAgB,EAAE,OAAe;;QACtF,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,GAAG,GAAG,IAAA,iCAAuB,EAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACvD,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAC;YACnD,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE;gBAC1B,MAAM,EAAE,QAAQ;gBAChB,OAAO;aACR,CAAC,CAAC;YACH,MAAM,YAAY,CAAC,IAAI,CAAC,IAAA,sCAA4B,EAAC,OAAO,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC9E,MAAM,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,IAAI,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;gBACtC,KAAK,EAAE;oBACL,KAAK;oBACL,UAAU;oBACV,MAAM,EAAE,2BAAkB,CAAC,MAAM;oBACjC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;iBAC3C;gBACD,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;aAClC,CAAC,CAAC;YACH,IAAI,IAAI,EAAE;gBACR,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ;oBAAE,OAAO,KAAK,CAAC;gBAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;gBACjD,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAClB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,sBAAY,CAAC,MAAM,CAAC;gBACxB,KAAK;gBACL,UAAU;gBACV,MAAM,EAAE,2BAAkB,CAAC,MAAM;gBACjC,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC;gBAC1C,OAAO;gBACP,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CAAA;AAED,kBAAe,IAAI,CAAC","file":"lock.js","sourcesContent":["import * as RedisService from '@Services/RedisService';\nimport { ResourceLock, Sequelize } from '@Models';\nimport { ResourceLockStatus } from '@Types';\nimport { globals } from '@Configs';\nimport getRedisResourceLockKey from './getRedisResourceLockKey';\nimport getRedisEventResourceLockKey from './getRedisEventResourceLockKey';\n\nconst ttl = globals.resourceLockTTL;\n\nasync function lock(model: string, resourceId: number, clientId: number, eventId: number) {\n  if (RedisService.redis) {\n    const key = getRedisResourceLockKey(model, resourceId);\n    const lock = await RedisService.get(key);\n    if (lock && lock.locker !== clientId) return false;\n    await RedisService.set(key, {\n      locker: clientId,\n      eventId,\n    });\n    await RedisService.hset(getRedisEventResourceLockKey(eventId), key, clientId);\n    await RedisService.expire(key, ttl);\n    return true;\n  } else {\n    const lock = await ResourceLock.findOne({\n      where: {\n        model,\n        resourceId,\n        status: ResourceLockStatus.ACTIVE,\n        expires: { [Sequelize.Op.lt]: Date.now() },\n      },\n      attributes: ['locker', 'expires'],\n    });\n    if (lock) {\n      if (lock.locker !== clientId) return false;\n      lock.expires = new Date(Date.now() + ttl * 1000);\n      await lock.save();\n      return true;\n    }\n\n    await ResourceLock.create({\n      model,\n      resourceId,\n      status: ResourceLockStatus.ACTIVE,\n      expires: new Date(Date.now() + ttl * 1000),\n      eventId,\n      locker: clientId,\n    });\n    return true;\n  }\n}\n\nexport default lock;\n"],"sourceRoot":"../../../../src"}