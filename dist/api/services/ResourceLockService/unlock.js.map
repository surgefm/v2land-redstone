{"version":3,"sources":["../api/services/ResourceLockService/unlock.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAuD;AACvD,qCAAkD;AAClD,mCAA6D;AAC7D,wFAAgE;AAChE,kGAA0E;AAE1E,SAA8B,MAAM,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAgB,EAAE,OAAe;;QACvG,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,GAAG,GAAG,IAAA,iCAAuB,EAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACvD,MAAM,KAAK,GAAoB,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3D,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAC;YACtD,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM,YAAY,CAAC,IAAI,CAAC,IAAA,sCAA4B,EAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,IAAI,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;gBACtC,KAAK,EAAE;oBACL,KAAK;oBACL,UAAU;oBACV,MAAM,EAAE,2BAAkB,CAAC,MAAM;oBACjC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;iBAC3C;aACF,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAC;YACpD,IAAI,CAAC,MAAM,GAAG,2BAAkB,CAAC,QAAQ,CAAC;YAC1C,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CAAA;AAtBD,yBAsBC","file":"unlock.js","sourcesContent":["import * as RedisService from '@Services/RedisService';\nimport { ResourceLock, Sequelize } from '@Models';\nimport { ResourceLockStatus, ResourceLockObj } from '@Types';\nimport getRedisResourceLockKey from './getRedisResourceLockKey';\nimport getRedisEventResourceLockKey from './getRedisEventResourceLockKey';\n\nexport default async function unlock(model: string, resourceId: number, clientId: number, eventId: number) {\n  if (RedisService.redis) {\n    const key = getRedisResourceLockKey(model, resourceId);\n    const value: ResourceLockObj = await RedisService.get(key);\n    if (!value || value.locker !== clientId) return false;\n    await RedisService.del(key);\n    await RedisService.hdel(getRedisEventResourceLockKey(eventId), key);\n    return true;\n  } else {\n    const lock = await ResourceLock.findOne({\n      where: {\n        model,\n        resourceId,\n        status: ResourceLockStatus.ACTIVE,\n        expires: { [Sequelize.Op.lt]: Date.now() },\n      },\n    });\n    if (!lock || lock.locker !== clientId) return false;\n    lock.status = ResourceLockStatus.UNLOCKED;\n    await lock.save();\n    return true;\n  }\n}\n"],"sourceRoot":"../../../../src"}