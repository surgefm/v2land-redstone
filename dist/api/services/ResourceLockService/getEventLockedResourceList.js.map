{"version":3,"sources":["../api/services/ResourceLockService/getEventLockedResourceList.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAuD;AACvD,qCAAkD;AAClD,mCAA6D;AAC7D,kGAA0E;AAE1E,SAA8B,0BAA0B,CAAC,OAAe;;QACtE,IAAI,YAAY,CAAC,KAAK,EAAE;YACtB,MAAM,QAAQ,GAAG,IAAA,sCAA4B,EAAC,OAAO,CAAC,CAAC;YACvD,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,EAAE,CAAC;YACjC,MAAM,MAAM,GAAsB,MAAM,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YACnE,MAAM,OAAO,GAAsB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC7D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACvC,IAAI,CAAC,KAAK,EAAE;oBACV,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC1C;gBACD,uBACE,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAClC,UAAU,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IACrC,KAAK,EACR;YACJ,CAAC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;SAChB;aAAM;YACL,MAAM,aAAa,GAAsB,MAAM,sBAAY,CAAC,OAAO,CAAC;gBAClE,KAAK,EAAE;oBACL,OAAO;oBACP,MAAM,EAAE,2BAAkB,CAAC,MAAM;oBACjC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;iBAC3C;gBACD,UAAU,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,CAAC;aACzD,CAAC,CAAC;YACH,OAAO,aAAa,CAAC;SACtB;IACH,CAAC;CAAA;AA9BD,6CA8BC","file":"getEventLockedResourceList.js","sourcesContent":["import * as RedisService from '@Services/RedisService';\nimport { ResourceLock, Sequelize } from '@Models';\nimport { ResourceLockStatus, ResourceLockObj } from '@Types';\nimport getRedisEventResourceLockKey from './getRedisEventResourceLockKey';\n\nexport default async function getEventLockedResourceList(eventId: number) {\n  if (RedisService.redis) {\n    const eventKey = getRedisEventResourceLockKey(eventId);\n    const fields = await RedisService.hgetall(eventKey);\n    const keys = Object.keys(fields);\n    if (keys.length === 0) return [];\n    const values: ResourceLockObj[] = await RedisService.mget(...keys);\n    const results: ResourceLockObj[] = values.map((value, index) => {\n      const strings = keys[index].split('-');\n      if (!value) {\n        RedisService.hdel(eventKey, keys[index]);\n      }\n      return {\n        model: strings[strings.length - 2],\n        resourceId: +strings[strings.length - 1],\n        ...value,\n      };\n    });\n    return results;\n  } else {\n    const resourceLocks: ResourceLockObj[] = await ResourceLock.findAll({\n      where: {\n        eventId,\n        status: ResourceLockStatus.ACTIVE,\n        expires: { [Sequelize.Op.lt]: Date.now() },\n      },\n      attributes: ['eventId', 'model', 'resourceId', 'locker'],\n    });\n    return resourceLocks;\n  }\n}\n"],"sourceRoot":"../../../../src"}