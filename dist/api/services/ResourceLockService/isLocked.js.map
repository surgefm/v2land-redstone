{"version":3,"sources":["../api/services/ResourceLockService/isLocked.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAuD;AACvD,qCAAkD;AAClD,mCAA6D;AAC7D,wFAAgE;AAEhE,SAA8B,QAAQ,CAAC,KAAa,EAAE,UAAkB,EAAE,QAAiB;;QACzF,MAAM,IAAI,GAAoB,YAAY,CAAC,KAAK;YAC9C,CAAC,CAAC,MAAM,YAAY,CAAC,GAAG,CAAC,IAAA,iCAAuB,EAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACpE,CAAC,CAAC,MAAM,sBAAY,CAAC,OAAO,CAAC;gBAC3B,KAAK,EAAE;oBACL,KAAK;oBACL,UAAU;oBACV,MAAM,EAAE,2BAAkB,CAAC,MAAM;oBACjC,OAAO,EAAE,EAAE,CAAC,mBAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;iBAC3C;gBACD,UAAU,EAAE,CAAC,QAAQ,CAAC;aACvB,CAAC,CAAC;QAEL,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QACxB,IAAI,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ;YAAE,OAAO,KAAK,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AAhBD,2BAgBC","file":"isLocked.js","sourcesContent":["import * as RedisService from '@Services/RedisService';\nimport { ResourceLock, Sequelize } from '@Models';\nimport { ResourceLockStatus, ResourceLockObj } from '@Types';\nimport getRedisResourceLockKey from './getRedisResourceLockKey';\n\nexport default async function isLocked(model: string, resourceId: number, clientId?: number) {\n  const lock: ResourceLockObj = RedisService.redis\n    ? await RedisService.get(getRedisResourceLockKey(model, resourceId))\n    : await ResourceLock.findOne({\n      where: {\n        model,\n        resourceId,\n        status: ResourceLockStatus.ACTIVE,\n        expires: { [Sequelize.Op.lt]: Date.now() },\n      },\n      attributes: ['locker'],\n    });\n\n  if (!lock) return false;\n  if (clientId && lock.locker === clientId) return false;\n  return true;\n}\n"],"sourceRoot":"../../../../src"}