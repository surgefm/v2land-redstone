{"version":3,"sources":["../api/services/NewsService/updateElasticsearchIndex.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,qCAA+B;AAC/B,mFAA2D;AAE3D,SAAe,wBAAwB,CAAC,EAAE,IAAI,EAAE,MAAM,EAGrD;;QACC,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC;gBACxB,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;aACtB,CAAC,CAAC;SACJ;QAED,IAAI,OAAO,CAAC;QACZ,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACrC;QAED,OAAO,8BAAoB,CAAC,MAAM,CAAC;YACjC,KAAK,EAAE,MAAM;YACb,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE;gBACJ,KAAK,EAAE,OAAO;gBACd,eAAe,EAAE,IAAI;aACtB;SACF,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,wBAAwB,CAAC","file":"updateElasticsearchIndex.js","sourcesContent":["import { News } from '@Models';\nimport ElasticsearchService from '../ElasticsearchService';\n\nasync function updateElasticsearchIndex({ news, newsId }: {\n  news?: News;\n  newsId?: number;\n}) {\n  if (!news) {\n    news = await News.findOne({\n      where: { id: newsId },\n    });\n  }\n\n  let newsObj;\n  if (news.get) {\n    newsObj = news.get({ plain: true });\n  }\n\n  return ElasticsearchService.update({\n    index: 'news',\n    id: news.id,\n    body: {\n      'doc': newsObj,\n      'doc_as_upsert': true,\n    },\n  });\n}\n\nexport default updateElasticsearchIndex;\n"],"sourceRoot":"../../../../src"}