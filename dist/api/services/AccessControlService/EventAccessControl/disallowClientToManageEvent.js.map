{"version":3,"sources":["../api/services/AccessControlService/EventAccessControl/disallowClientToManageEvent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uEAAyD;AACzD,0EAA4E;AAC5E,mDAA0D;AAE1D,SAA8B,2BAA2B,CAAC,QAAgB,EAAE,OAAe,EAAE,EAAW;;QACtG,IAAI,EAAE,EAAE;YACN,MAAM,aAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,6BAA6B;gBACrC,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;gBAClB,KAAK,EAAE,EAAE;aACV,CAAC,CAAC;SACJ;QACD,OAAO,IAAA,4BAAe,EAAC,QAAQ,EAAE,IAAA,uCAAuB,EAAC,OAAO,CAAC,CAAC,CAAC;IACrE,CAAC;CAAA;AAXD,8CAWC","file":"disallowClientToManageEvent.js","sourcesContent":["import * as RecordService from '@Services/RecordService';\nimport { removeUserRoles } from '@Services/AccessControlService/operations';\nimport { getEventManageRolePlain } from './getEventRoles';\n\nexport default async function disallowClientToManageEvent(clientId: number, eventId: number, by?: number) {\n  if (by) {\n    await RecordService.update({\n      model: 'Client',\n      action: 'disallowClientToManageEvent',\n      target: clientId,\n      subtarget: eventId,\n      owner: by,\n    });\n  }\n  return removeUserRoles(clientId, getEventManageRolePlain(eventId));\n}\n"],"sourceRoot":"../../../../../src"}