{"version":3,"sources":["../api/services/AccessControlService/acl.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAC5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,8CAAsB;AACtB,kEAAmC;AACnC,sDAA4B;AAC5B,qCAA+C;AAC/C,uCAAsC;AACtC,kEAA0C;AAE1C,MAAM,MAAM,GAAG,qBAAU,CAAC,KAAK,CAAC;AAChC,MAAM,GAAG,GAAG,YAAY,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3F,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,iBAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAE7D,MAAM,cAAc,GAAqB,MAAM,CAAC,IAAI;IAClD,CAAC,CAAC,IAAI,sBAAY,CAAC,KAAK,EAAE,WAAW,CAA4B;IACjE,CAAC,CAAC,IAAI,uBAAM,CAAC,mBAAS,EAAE;QACtB,MAAM,EAAE,MAAM;QACd,aAAa,EAAE;YACb,GAAG,EAAE,EAAE,IAAI,EAAE,mBAAS,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE;YACjD,KAAK,EAAE,EAAE,IAAI,EAAE,mBAAS,CAAC,IAAI,EAAE;SAChC;QACD,MAAM,EAAE;YACN,KAAK,EAAE;gBACL,GAAG,EAAE,EAAE,IAAI,EAAE,mBAAS,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE;gBAClD,KAAK,EAAE,EAAE,IAAI,EAAE,mBAAS,CAAC,IAAI,EAAE;aAChC;SACF;KACF,CAAC,CAAC;AAEL,MAAM,GAAG,GAAG,IAAI,aAAG,CAAC,cAAc,CAAC,CAAC;AACnC,GAAW,CAAC,KAAK,GAAG,KAAK,CAAC;AAE3B,kBAAe,GAAG,CAAC","file":"acl.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n\nimport Acl from 'acl';\nimport AclSeq from 'acl-sequelize';\nimport Redis from 'ioredis';\nimport { sequelize, Sequelize } from '@Models';\nimport { datastores } from '@Configs';\nimport RedisBackend from './redisBackend';\n\nconst config = datastores.redis;\nconst url = `rediss://${config.username}:${config.password}@${config.host}:${config.port}`;\nconst redis = process.env.REDIS_HOST ? new Redis(url) : null;\n\nconst storageBackend: Acl.Backend<any> = config.host\n  ? new RedisBackend(redis, 'surge-acl') as any as Acl.Backend<any>\n  : new AclSeq(sequelize, {\n    prefix: 'acl_',\n    defaultSchema: {\n      key: { type: Sequelize.STRING, primaryKey: true },\n      value: { type: Sequelize.TEXT },\n    },\n    schema: {\n      users: {\n        key: { type: Sequelize.INTEGER, primaryKey: true },\n        value: { type: Sequelize.TEXT },\n      },\n    },\n  });\n\nconst acl = new Acl(storageBackend);\n(acl as any).redis = redis;\n\nexport default acl;\n"],"sourceRoot":"../../../../src"}