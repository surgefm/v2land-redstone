{"version":3,"sources":["../api/services/AccessControlService/operations.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,gDAAwB;AAIxB,SAAsB,kBAAkB,CAAC,KAAc,EAAE,SAAkB,EAAE,WAAoB;;QAC/F,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9C,aAAG,CAAC,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;gBACrE,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC5B,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAPD,gDAOC;AAED,SAAsB,SAAS,CAAC,IAAY;;QAC1C,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC/C,aAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAe,EAAE,EAAE;gBAC3C,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC5B,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAPD,8BAOC;AAEY,QAAA,cAAc,GAA8B,aAAG,CAAC,cAAc,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AACzE,QAAA,YAAY,GAA4B,aAAG,CAAC,YAAY,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AACnE,QAAA,KAAK,GAAqB,aAAG,CAAC,KAAK,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAC9C,QAAA,OAAO,GAAuB,aAAG,CAAC,OAAO,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AACpD,QAAA,SAAS,GAAyB,aAAG,CAAC,SAAS,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAC1D,QAAA,WAAW,GAA2B,aAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAChE,QAAA,iBAAiB,GAAiC,aAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAClF,QAAA,cAAc,GAA8B,aAAG,CAAC,cAAc,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AACzE,QAAA,UAAU,GAA0B,aAAG,CAAC,UAAU,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAC7D,QAAA,iBAAiB,GAAiC,aAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAClF,QAAA,eAAe,GAA+B,aAAG,CAAC,eAAe,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAC5E,QAAA,SAAS,GAAyB,aAAG,CAAC,SAAS,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC;AAC1D,QAAA,aAAa,GAA6B,aAAG,CAAC,aAAa,CAAC,IAAI,CAAC,aAAG,CAAC,CAAC","file":"operations.js","sourcesContent":["import acl from './acl';\n\ntype strings = string | string[];\n\nexport async function areAnyRolesAllowed(roles: strings, resources: strings, permissions: strings) {\n  return new Promise<boolean>((resolve, reject) => {\n    acl.areAnyRolesAllowed(roles, resources, permissions, (err, allowed) => {\n      if (err) return reject(err);\n      resolve(allowed);\n    });\n  });\n}\n\nexport async function roleUsers(role: string) {\n  return new Promise<string[]>((resolve, reject) => {\n    acl.roleUsers(role, (err, users: string[]) => {\n      if (err) return reject(err);\n      resolve(users);\n    });\n  });\n}\n\nexport const addRoleParents: typeof acl.addRoleParents = acl.addRoleParents.bind(acl);\nexport const addUserRoles: typeof acl.addUserRoles = acl.addUserRoles.bind(acl);\nexport const allow: typeof acl.allow = acl.allow.bind(acl);\nexport const hasRole: typeof acl.hasRole = acl.hasRole.bind(acl);\nexport const isAllowed: typeof acl.isAllowed = acl.isAllowed.bind(acl);\nexport const removeAllow: typeof acl.removeAllow = acl.removeAllow.bind(acl);\nexport const removePermissions: typeof acl.removePermissions = acl.removePermissions.bind(acl);\nexport const removeResource: typeof acl.removeResource = acl.removeResource.bind(acl);\nexport const removeRole: typeof acl.removeRole = acl.removeRole.bind(acl);\nexport const removeRoleParents: typeof acl.removeRoleParents = acl.removeRoleParents.bind(acl);\nexport const removeUserRoles: typeof acl.removeUserRoles = acl.removeUserRoles.bind(acl);\nexport const userRoles: typeof acl.userRoles = acl.userRoles.bind(acl);\nexport const whatResources: typeof acl.whatResources = acl.whatResources.bind(acl);\n"],"sourceRoot":"../../../../src"}