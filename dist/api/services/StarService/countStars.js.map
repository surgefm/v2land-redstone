{"version":3,"sources":["../api/services/StarService/countStars.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA+B;AAC/B,qEAAuD;AACvD,mCAAiC;AAE1B,MAAM,UAAU,GAAG,CAAO,OAAe,EAAE,EAAE;IAClD,MAAM,GAAG,GAAG,IAAA,cAAM,EAAC,OAAO,CAAC,CAAC;IAC5B,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC;IACtC,MAAM,KAAK,GAAG,MAAM,cAAI,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IACvD,MAAM,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACnC,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC;AAPW,QAAA,UAAU,cAOrB","file":"countStars.js","sourcesContent":["import { Star } from '@Models';\nimport * as RedisService from '@Services/RedisService';\nimport { getKey } from './utils';\n\nexport const countStars = async (eventId: number) => {\n  const key = getKey(eventId);\n  const cache = await RedisService.get(key);\n  if (cache !== undefined) return cache;\n  const count = await Star.count({ where: { eventId } });\n  await RedisService.set(key, count);\n  return count;\n};\n"],"sourceRoot":"../../../../src"}