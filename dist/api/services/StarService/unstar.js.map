{"version":3,"sources":["../api/services/StarService/unstar.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA+B;AAC/B,qEAAuD;AACvD,6CAA0C;AAC1C,mCAAiC;AAE1B,MAAM,MAAM,GAAG,CAAO,OAAe,EAAE,QAAgB,EAAE,EAAE;IAChE,MAAM,QAAQ,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC;QAClC,KAAK,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;KAC7B,CAAC,CAAC;IACH,IAAI,CAAC,QAAQ;QAAE,OAAO;IACtB,MAAM,IAAA,uBAAU,EAAC,OAAO,CAAC,CAAC,CAAC,eAAe;IAC1C,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzB,MAAM,YAAY,CAAC,IAAI,CAAC,IAAA,cAAM,EAAC,OAAO,CAAC,CAAC,CAAC;IAEzC,OAAO;AACT,CAAC,CAAA,CAAC;AAVW,QAAA,MAAM,UAUjB","file":"unstar.js","sourcesContent":["import { Star } from '@Models';\nimport * as RedisService from '@Services/RedisService';\nimport { countStars } from './countStars';\nimport { getKey } from './utils';\n\nexport const unstar = async (eventId: number, clientId: number) => {\n  const existing = await Star.findOne({\n    where: { eventId, clientId },\n  });\n  if (!existing) return;\n  await countStars(eventId); // Update cache\n  await existing.destroy();\n  await RedisService.decr(getKey(eventId));\n\n  return;\n};\n"],"sourceRoot":"../../../../src"}