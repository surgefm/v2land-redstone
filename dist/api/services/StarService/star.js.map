{"version":3,"sources":["../api/services/StarService/star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAA6B;AAE7B,qCAA+B;AAC/B,qEAAuD;AACvD,6CAA0C;AAC1C,mCAAiC;AAE1B,MAAM,IAAI,GAAG,CAAO,OAAe,EAAE,QAAgB,EAAE,EAAE;IAC9D,MAAM,QAAQ,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC;QAClC,KAAK,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE;KAC7B,CAAC,CAAC;IACH,IAAI,QAAQ;QAAE,OAAO,QAAQ,CAAC;IAE9B,MAAM,IAAA,uBAAU,EAAC,OAAO,CAAC,CAAC,CAAC,eAAe;IAC1C,MAAM,CAAC,GAAG,MAAM,cAAI,CAAC,MAAM,CAAC;QAC1B,EAAE,EAAE,IAAA,YAAM,GAAE;QACZ,OAAO;QACP,QAAQ;KACT,CAAC,CAAC;IACH,MAAM,YAAY,CAAC,IAAI,CAAC,IAAA,cAAM,EAAC,OAAO,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC;IACrB,OAAO,CAAC,CAAC;AACX,CAAC,CAAA,CAAC;AAfW,QAAA,IAAI,QAef","file":"star.js","sourcesContent":["import uuidv4 from 'uuid/v4';\n\nimport { Star } from '@Models';\nimport * as RedisService from '@Services/RedisService';\nimport { countStars } from './countStars';\nimport { getKey } from './utils';\n\nexport const star = async (eventId: number, clientId: number) => {\n  const existing = await Star.findOne({\n    where: { eventId, clientId },\n  });\n  if (existing) return existing;\n\n  await countStars(eventId); // Update cache\n  const s = await Star.create({\n    id: uuidv4(),\n    eventId,\n    clientId,\n  });\n  await RedisService.incr(getKey(eventId));\n  s.isNewRecord = true;\n  return s;\n};\n"],"sourceRoot":"../../../../src"}