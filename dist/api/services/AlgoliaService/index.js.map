{"version":3,"sources":["../api/services/AlgoliaService/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import algoliasearch, { SearchIndex } from 'algoliasearch';\nimport { News, Event, Stack, Site, Tag, Client } from '@Models';\nimport * as ClientService from '../ClientService';\nimport { EventObj, StackObj } from '@Types';\n\ntype PreprocessFn = (t: Record<string, any>) => Record<string, any>;\n\ninterface Id extends Record<string, any> {\n  id: number;\n}\n\ninterface ObjectID extends Record<string, any> {\n  objectID: number;\n}\n\ntype IdObject = Id | ObjectID;\n\nconst useAlgolia = process.env.ALGOLIA_APPID && process.env.ALGOLIA_API_KEY;\nexport const client = algoliasearch(process.env.ALGOLIA_APPID, process.env.ALGOLIA_API_KEY);\nexport const newsIndex = client.initIndex('news');\nexport const eventIndex = client.initIndex('events');\nexport const clientIndex = client.initIndex('clients');\nexport const tagIndex = client.initIndex('tags');\nexport const siteIndex = client.initIndex('sites');\nexport const stackIndex = client.initIndex('stacks');\n\nexport const search = async (query: string, page = 1, indices = ['events', 'tags', 'clients']) => {\n  if (!useAlgolia) return [];\n\n  const queries = indices.map(index => ({\n    indexName: index,\n    query,\n    params: { page },\n  }));\n\n  const { results } = await client.multipleQueries(queries);\n  return results;\n};\n\nconst searchIndex = (index: SearchIndex) => async (query: string, page = 1) => {\n  if (!useAlgolia) return [];\n  const { hits } = await index.search(query, { page });\n  return hits;\n};\n\nconst getPlainHelper = (obj: any) => {\n  if (Array.isArray(obj)) {\n    return obj.map(object => getPlain(object)) as Record<string, any>[];\n  }\n  if (typeof obj.get === 'function') {\n    obj = obj.get({ plain: true }) as Record<string, any>;\n  }\n  if (typeof obj.objectID === 'undefined') {\n    obj.objectID = obj.id;\n  }\n  return obj as Record<string, any>;\n};\n\nfunction getPlain(objects: any, preprocess: PreprocessFn = a => a): Record<string, any> {\n  return preprocess(getPlainHelper(objects)) as Record<string, any>;\n}\n\nfunction getPlains(objects: any, preprocess: PreprocessFn = a => a): Record<string, any>[] {\n  return getPlainHelper(objects).map(preprocess) as Record<string, any>[];\n}\n\nconst add = <Type>(index: SearchIndex, preprocess: PreprocessFn = a => a) => {\n  function addUtil(object: Type): Promise<string>;\n  function addUtil(objects: Type[]): Promise<string[]>;\n  async function addUtil(objects: Type | Type[]) {\n    if (!useAlgolia) return;\n    if (Array.isArray(objects)) {\n      const { objectIDs } = await index.saveObjects(getPlains(objects, preprocess));\n      return objectIDs;\n    }\n    const { objectID } = await index.saveObject(getPlain(objects, preprocess));\n    return objectID;\n  }\n  return addUtil;\n};\n\n\nconst update = <Type>(index: SearchIndex, preprocess: PreprocessFn = a => a) => {\n  function updateUtil(object: Type): Promise<string>;\n  function updateUtil(objects: Type[]): Promise<string[]>;\n  async function updateUtil(objects: Type | Type[]) {\n    if (!useAlgolia) return;\n    if (Array.isArray(objects)) {\n      const { objectIDs } = await index.partialUpdateObjects(getPlains(objects, preprocess), {\n        createIfNotExists: true,\n      });\n      return objectIDs;\n    }\n    const { objectID } = await index.partialUpdateObject(getPlain(objects, preprocess), {\n      createIfNotExists: true,\n    });\n    return objectID;\n  }\n  return updateUtil;\n};\n\n\nconst del = (index: SearchIndex) => {\n  const getId = (object: number | IdObject) => {\n    if (typeof object === 'number') return `${object}`;\n    if (typeof (object as any).id === 'undefined') return `${(object as ObjectID).objectID}`;\n    return `${(object as Id).id}`;\n  };\n\n  async function delUtil(objectIDs: number | number[] | IdObject | IdObject[]) {\n    if (Array.isArray(objectIDs)) {\n      return index.deleteObjects(objectIDs.map(getId));\n    }\n    return index.deleteObject(getId(objectIDs));\n  }\n\n  return delUtil;\n};\n\n\nexport const searchNews = searchIndex(newsIndex);\nexport const searchEvents = searchIndex(eventIndex);\nexport const searchTags = searchIndex(tagIndex);\nexport const searchClients = searchIndex(clientIndex);\nexport const searchSites = searchIndex(siteIndex);\nexport const searchStacks = searchIndex(stackIndex);\n\nexport const addNews = add<News>(newsIndex);\nexport const addEvent = add<Event | EventObj>(eventIndex);\nexport const addTag = add<Tag>(tagIndex);\nexport const addClient = add<Client>(clientIndex, ClientService.sanitizeClient);\nexport const addSite = add<Site>(siteIndex);\nexport const addStack = add<Stack | StackObj>(stackIndex);\n\nexport const updateNews = update<News>(newsIndex);\nexport const updateEvent = update<Event | EventObj>(eventIndex);\nexport const updateTag = update<Tag>(tagIndex);\nexport const updateClient = update<Client>(clientIndex, ClientService.sanitizeClient);\nexport const updateSite = update<Site>(siteIndex);\nexport const updateStack = update<Stack | StackObj>(stackIndex);\n\nexport const deleteNews = del(newsIndex);\nexport const deleteEvent = del(eventIndex);\nexport const deleteTag = del(tagIndex);\nexport const deleteClient = del(clientIndex);\nexport const deleteSite = del(siteIndex);\nexport const deleteStack = del(stackIndex);\n"],"sourceRoot":"../../../../src"}