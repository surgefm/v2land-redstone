{"version":3,"sources":["../api/services/ElasticsearchService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,8BAA8B;AAC9B,2EAAwC;AACxC,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;AAElB,QAAA,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,uBAAE,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAEhE,SAAsB,MAAM,CAAC,KAA8B;;QACzD,OAAO,cAAM,CAAC,CAAC,CAAC,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9C,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,MAAM,CAAC,KAA8B;;QACzD,OAAO,cAAM,CAAC,CAAC,CAAC,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9C,CAAC;CAAA;AAFD,wBAEC;AAED,SAAsB,IAAI,CAAC,KAA4B;;QACrD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,cAAM;gBAAE,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;YAClC,cAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAU,EAAE,GAAmB,EAAE,EAAE;gBACrD,IAAI,GAAG;oBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AARD,oBAQC;AAED,SAAsB,OAAO,CAAC,KAA+B;;QAC3D,OAAO,cAAM,CAAC,CAAC,CAAC,cAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/C,CAAC;CAAA;AAFD,0BAEC;AA+DD,kBAAe;IACb,MAAM;IACN,MAAM;IACN,IAAI;IACJ,OAAO;CACR,CAAC","file":"ElasticsearchService.js","sourcesContent":["/* eslint-disable camelcase */\nimport es from '@elastic/elasticsearch';\nconst url = process.env.ES_URL;\n\nexport const client = url ? new es.Client({ node: url }) : null;\n\nexport async function search(query: es.RequestParams.Search) {\n  return client ? client.search(query) : null;\n}\n\nexport async function update(query: es.RequestParams.Update) {\n  return client ? client.update(query) : null;\n}\n\nexport async function bulk(query: es.RequestParams.Bulk) {\n  return new Promise((resolve, reject) => {\n    if (!client) return resolve(null);\n    client.bulk(query, (err: Error, res: es.ApiResponse) => {\n      if (err) return reject(err);\n      resolve(res);\n    });\n  });\n}\n\nexport async function msearch(query: es.RequestParams.Msearch) {\n  return client ? client.msearch(query) : null;\n}\n\nexport interface SearchResponse<T> {\n  took: number;\n  timed_out: boolean;\n  _scroll_id?: string;\n  _shards: ShardsResponse;\n  hits: {\n    total: number;\n    max_score: number;\n    hits: Array<{\n      _index: string;\n      _type: string;\n      _id: string;\n      _score: number;\n      _source: T;\n      _version?: number;\n      _explanation?: Explanation;\n      fields?: any;\n      highlight?: any;\n      inner_hits?: any;\n      matched_queries?: string[];\n      sort?: string[];\n    }>;\n  };\n  aggregations?: any;\n}\n\nexport interface ShardsResponse {\n  total: number;\n  successful: number;\n  failed: number;\n  skipped: number;\n}\n\nexport interface Explanation {\n  value: number;\n  description: string;\n  details: Explanation[];\n}\n\nexport interface SearchBody {\n  query: Query;\n}\n\nexport interface SearchBodyMultiMatch {\n  query: QueryMultiMatch;\n}\n\ninterface Query {\n  match?: { query: string };\n  filter?: object;\n  from?: number;\n  size?: number;\n}\n\nexport interface QueryMultiMatch extends Query {\n  multi_match?: {\n    query: string;\n    fields: string[];\n  };\n}\n\nexport default {\n  search,\n  update,\n  bulk,\n  msearch,\n};\n"],"sourceRoot":"../../../src"}