{"version":3,"sources":["../api/services/TagService/getAllChildTags.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAoD;AAE7C,MAAM,eAAe,GAAG,CAAO,EACpC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,WAAW,GAK3B,EAAE,EAAE;IACH,MAAM,GAAG,GAAG,CAAC,KAAI,MAAM,aAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,CAAC,CAAA,CAAC;IAC5D,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,CAAC;IAEpB,OAAO,mBAAS,CAAC,KAAK,CAAM;;;qCAGO,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC9D,GAAG,CAAC,EAAE;GACnB,EAAE;QACD,IAAI,EAAE,mBAAS,CAAC,UAAU,CAAC,MAAM;KAClC,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AAlBW,QAAA,eAAe,mBAkB1B;AAEF,kBAAe,uBAAe,CAAC","file":"getAllChildTags.js","sourcesContent":["import { Tag, sequelize, Sequelize } from '@Models';\n\nexport const getAllChildTags = async ({\n  tag: t, tagId, transaction,\n}: {\n  tag?: Tag;\n  tagId?: number;\n  transaction?: Sequelize.Transaction;\n}) => {\n  const tag = t || await Tag.findByPk(tagId, { transaction });\n  if (!tag) return [];\n\n  return sequelize.query<Tag>(`\n    SELECT *\n    FROM tag\n    WHERE \"hierarchyPath\" @> ARRAY[${(tag.hierarchyPath || [tag.id]).join(',')}]\n    AND id != ${tag.id}\n  `, {\n    type: Sequelize.QueryTypes.SELECT,\n  });\n};\n\nexport default getAllChildTags;\n"],"sourceRoot":"../../../../src"}