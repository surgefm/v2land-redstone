{"version":3,"sources":["../api/services/TagService/removeCurator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA6D;AAC7D,mCAAkE;AAClE,qFAAuE;AACvE,uEAAyD;AAEzD,SAAe,aAAa,CAAC,KAAa,EAAE,SAAiB,EAAE,EAAoB;;QACjF,MAAM,kBAAkB,GAAG,MAAM,oBAAU,CAAC,OAAO,CAAC;YAClD,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;SAC5B,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB;YAAE,OAAO,IAAI,CAAC;QAErC,MAAM,GAAG,GAAG,MAAM,aAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;SACvE;QAED,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC;SAC3E;QAED,MAAM,QAAQ,GAAG,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,gBAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACzE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;YACnB,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;SACpE;QAED,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,aAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,YAAY;gBACnB,MAAM,EAAE,kBAAkB;gBAC1B,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,GAAG,CAAC,EAAE;gBACd,SAAS,EAAE,SAAS;gBACpB,MAAM,EAAE,QAAQ,CAAC,EAAE;aACpB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YACpB,MAAM,kBAAkB,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;YAClD,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC;IAC5B,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","file":"removeCurator.js","sourcesContent":["import { Tag, TagCurator, Client, sequelize } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as AccessControlService from '@Services/AccessControlService';\nimport * as RecordService from '@Services/RecordService';\n\nasync function removeCurator(tagId: number, curatorId: number, by?: number | Client) {\n  const existingTagCurator = await TagCurator.findOne({\n    where: { tagId, curatorId },\n  });\n  if (!existingTagCurator) return null;\n\n  const tag = await Tag.findByPk(tagId);\n  if (!tag) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该话题：${tagId}`);\n  }\n\n  const client = await Client.findByPk(curatorId);\n  if (!client) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该用户：${curatorId}`);\n  }\n\n  const byClient = typeof by === 'number' ? await Client.findByPk(by) : by;\n  if (by && !byClient) {\n    throw new RedstoneError(ResourceNotFoundErrorType, `未找到该用户：${by}`);\n  }\n\n  await sequelize.transaction(async transaction => {\n    await RecordService.create({\n      model: 'TagCurator',\n      action: 'removeTagCurator',\n      data: existingTagCurator,\n      target: tag.id,\n      subtarget: curatorId,\n      client: byClient.id,\n    }, { transaction });\n    await existingTagCurator.destroy({ transaction });\n    await AccessControlService.disallowClientToManageTag(curatorId, tagId);\n  });\n  return existingTagCurator;\n}\n\nexport default removeCurator;\n"],"sourceRoot":"../../../../src"}