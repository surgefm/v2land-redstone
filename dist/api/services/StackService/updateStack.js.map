{"version":3,"sources":["../api/services/StackService/updateStack.ts"],"names":[],"mappings":"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","file":"updateStack.js","sourcesContent":["import { Stack } from '@Models';\nimport { StackObj } from '@Types';\nimport * as NotificationService from '../NotificationService';\nimport * as RecordService from '../RecordService';\nimport addEvent from './addEvent';\nimport updateAlgoliaIndex from './updateAlgoliaIndex';\nimport { Transaction } from 'sequelize/types';\n\nasync function updateStack({ id = -1, data = {}, clientId, transaction }: {\n  id?: number;\n  data?: { enableNotification?: boolean; forceUpdate?: boolean } & StackObj;\n  clientId?: number;\n  transaction?: Transaction;\n}) {\n  const stack = await Stack.findOne({\n    where: { id },\n    transaction,\n  });\n\n  if (!stack) {\n    throw new Error(JSON.stringify({\n      status: 404,\n      message: {\n        message: '未找到该进展',\n      },\n    }));\n  }\n\n  const stackObj = stack.get({ plain: true }) as StackObj;\n  const oldStack = stackObj;\n\n  const changes: StackObj = {};\n  for (const i of ['title', 'description', 'status', 'order', 'time', 'stackEventId']) {\n    if (typeof (data as any)[i] !== 'undefined' && (data as any)[i] !== (stackObj as any)[i]) {\n      (changes as any)[i] = (data as any)[i];\n    }\n  }\n\n  if (Object.getOwnPropertyNames(changes).length === 0) {\n    return {\n      status: 200,\n      message: {\n        message: '什么变化也没有发生',\n        stack: stackObj,\n      },\n    };\n  }\n\n  const changesCopy = { ...changes };\n\n  if (changes.status) {\n    if (changes.status === 'admitted') {\n      const newsCount = await stack.$count('news', {\n        where: { status: 'admitted' },\n        transaction,\n      });\n\n      if (newsCount === 0) {\n        throw new Error('一个进展必须在含有一个已过审新闻的情况下方可开放');\n      }\n    }\n\n    stack.status = changes.status;\n    stackObj.status = changes.status;\n    await stack.save({ transaction });\n\n    await RecordService.create({\n      action: 'updateStackStatus',\n      data: { status: changes.status },\n      before: { status: stackObj.status },\n      target: id,\n      owner: clientId,\n      model: 'Stack',\n    }, { transaction });\n  }\n\n  delete changes.status;\n\n  if (changes.stackEventId) {\n    await addEvent(stack.id, changes.stackEventId, clientId);\n    stack.stackEventId = changes.stackEventId;\n    delete changes.stackEventId;\n  }\n\n  if (Object.keys(changes).length) {\n    for (const i of ['title', 'description', 'status', 'order', 'time']) {\n      if (typeof (changes as any)[i] !== 'undefined') {\n        (stack as any)[i] = (changes as any)[i];\n      }\n    }\n    await stack.save({ transaction });\n\n    await RecordService.create({\n      action: 'updateStackDetail',\n      target: id,\n      owner: clientId,\n      data: changes,\n      before: JSON.stringify(stackObj),\n      model: 'Stack',\n    }, { transaction });\n  }\n\n  setTimeout(() => {\n    if (data.enableNotification && (\n      changesCopy.status === 'admitted' ||\n      (typeof changesCopy.order !== 'undefined' && stack.status === 'admitted')\n    )) {\n      NotificationService.updateStackNotifications(stack, { force: data.forceUpdate });\n      NotificationService.notifyWhenStackStatusChanged(oldStack, stack, clientId);\n    }\n\n    updateAlgoliaIndex({ stackId: stack.id });\n  });\n\n  return {\n    status: 201,\n    message: {\n      message: '修改成功',\n      stack,\n    },\n  };\n}\n\nexport default updateStack;\n"],"sourceRoot":"../../../../src"}