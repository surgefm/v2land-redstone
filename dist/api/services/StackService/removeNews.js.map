{"version":3,"sources":["../api/services/StackService/removeNews.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qCAAsD;AACtD,mCAAkE;AAClE,uEAAyD;AACzD,mEAAqD;AAOrD,SAAe,UAAU,CAAC,OAAe,EAAE,MAAc,EAAE,QAAgB,EAAE,EAAE,WAAW,EAAE,IAAI,KAAwB,EAAE;;QACxH,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,MAAM,cAAc,GAAG,MAAM,wBAAc,CAAC,OAAO,CAAC;YAClD,KAAK,EAAE;gBACL,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,OAAO,EAAE,KAAK,CAAC,EAAE;gBACjB,MAAM,EAAE,IAAI,CAAC,EAAE;aAChB;YACD,WAAW;SACZ,CAAC,CAAC;QACH,IAAI,CAAC,cAAc;YAAE,OAAO;QAE5B,MAAM,WAAW,CAAC,mBAAmB,CAAC,CAAM,WAAW,EAAC,EAAE;YACxD,MAAM,aAAa,CAAC,OAAO,CAAC;gBAC1B,KAAK,EAAE,gBAAgB;gBACvB,IAAI,EAAE,cAAc;gBACpB,MAAM,EAAE,cAAc,CAAC,OAAO;gBAC9B,SAAS,EAAE,IAAI,CAAC,EAAE;gBAClB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,qBAAqB;gBAC7B,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;aAChB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC;YAC9B,MAAM,cAAc,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAA,EAAE,WAAW,CAAC,CAAC;QAEhB,OAAO,cAAc,CAAC;IACxB,CAAC;CAAA;AAED,kBAAe,UAAU,CAAC","file":"removeNews.js","sourcesContent":["import { Transaction } from 'sequelize';\nimport { EventStackNews, News, Stack } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as RecordService from '@Services/RecordService';\nimport * as UtilService from '@Services/UtilService';\n\ninterface RemoveNewsOptions {\n  transaction?: Transaction;\n  time?: Date;\n}\n\nasync function removeNews(stackId: number, newsId: number, clientId: number, { transaction, time }: RemoveNewsOptions = {}) {\n  const stack = await Stack.findByPk(stackId, { transaction });\n  if (!stack) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该进展');\n  }\n\n  const news = await News.findByPk(newsId, { transaction });\n  if (!news) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该新闻');\n  }\n\n  const eventStackNews = await EventStackNews.findOne({\n    where: {\n      eventId: stack.eventId,\n      stackId: stack.id,\n      newsId: news.id,\n    },\n    transaction,\n  });\n  if (!eventStackNews) return;\n\n  await UtilService.execWithTransaction(async transaction => {\n    await RecordService.destroy({\n      model: 'EventStackNews',\n      data: eventStackNews,\n      target: eventStackNews.stackId,\n      subtarget: news.id,\n      owner: clientId,\n      action: 'removeNewsFromStack',\n      createdAt: time,\n      updatedAt: time,\n    }, { transaction });\n\n    eventStackNews.stackId = null;\n    await eventStackNews.save({ transaction });\n  }, transaction);\n\n  return eventStackNews;\n}\n\nexport default removeNews;\n"],"sourceRoot":"../../../../src"}