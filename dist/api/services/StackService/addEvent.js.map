{"version":3,"sources":["../api/services/StackService/addEvent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAkD;AAClD,mCAAkE;AAClE,uEAAyD;AAEzD,SAAe,QAAQ,CAAC,OAAe,EAAE,OAAe,EAAE,QAAgB;;QACxE,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,SAAS,CAAC,CAAC;SAC/D;QAED,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE;YAAE,OAAO,IAAI,CAAC;QAE5C,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,MAAM,OAAO,GAAG;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,KAAK,CAAC,EAAE,EAAE;gBAChC,MAAM,EAAE,KAAK,CAAC,EAAE;gBAChB,SAAS,EAAE,KAAK,CAAC,EAAE;gBACnB,KAAK,EAAE,QAAQ;gBACf,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;aAChB,CAAC;YACF,IAAI,KAAK,CAAC,YAAY,EAAE;gBACtB,MAAM,aAAa,CAAC,MAAM,iBACxB,MAAM,EAAE,EAAE,YAAY,EAAE,KAAK,CAAC,YAAY,EAAE,EAC5C,MAAM,EAAE,kBAAkB,IACvB,OAAO,GACT,EAAE,WAAW,EAAE,CAAC,CAAC;aACrB;iBAAM;gBACL,MAAM,aAAa,CAAC,MAAM,iBACxB,MAAM,EAAE,iBAAiB,IACtB,OAAO,GACT,EAAE,WAAW,EAAE,CAAC,CAAC;aACrB;YACD,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC,EAAE,CAAC;YAC9B,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACpC,CAAC,CAAA,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAED,kBAAe,QAAQ,CAAC","file":"addEvent.js","sourcesContent":["import { Event, sequelize, Stack } from '@Models';\nimport { RedstoneError, ResourceNotFoundErrorType } from '@Types';\nimport * as RecordService from '@Services/RecordService';\n\nasync function addEvent(stackId: number, eventId: number, clientId: number) {\n  const stack = await Stack.findByPk(stackId);\n  if (!stack) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该进展');\n  }\n\n  const event = await Event.findByPk(eventId);\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '无法找到该事件');\n  }\n\n  if (stack.eventId === event.id) return null;\n\n  await sequelize.transaction(async transaction => {\n    const time = new Date();\n    const options = {\n      model: 'Stack',\n      data: { stackEventId: event.id },\n      target: stack.id,\n      subtarget: event.id,\n      owner: clientId,\n      createdAt: time,\n      updatedAt: time,\n    };\n    if (stack.stackEventId) {\n      await RecordService.update({\n        before: { stackEventId: stack.stackEventId },\n        action: 'updateStackEvent',\n        ...options,\n      }, { transaction });\n    } else {\n      await RecordService.create({\n        action: 'addEventToStack',\n        ...options,\n      }, { transaction });\n    }\n    stack.stackEventId = event.id;\n    await stack.save({ transaction });\n  });\n\n  return stack;\n}\n\nexport default addEvent;\n\n"],"sourceRoot":"../../../../src"}