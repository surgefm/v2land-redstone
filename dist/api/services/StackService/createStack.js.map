{"version":3,"sources":["../api/services/StackService/createStack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAwC;AAExC,mCAAmG;AAEnG,qEAAuD;AACvD,uEAAyD;AACzD,mEAAqD;AACrD,0FAAkE;AAElE,SAAe,WAAW,CAAC,OAAwB,EAAE,IAAc,EAAE,QAAgB,EAAE,WAAyB;;QAC9G,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAE/D,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,8BAAqB,EAAE,YAAY,CAAC,CAAC;SAC9D;QAED,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEpD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,sBAAa,CAAC,kCAAyB,EAAE,QAAQ,CAAC,CAAC;SAC9D;QAED,IAAI,KAAK,GAAU,IAAI,CAAC;QACxB,MAAM,WAAW,CAAC,mBAAmB,CAAC,CAAM,WAAW,EAAC,EAAE;YACxD,KAAK,GAAG,MAAM,eAAK,CAAC,OAAO,CAAC;gBAC1B,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;gBACzB,WAAW;aACZ,CAAC,CAAC;YACH,IAAI,KAAK,EAAE;gBACT,MAAM,IAAI,sBAAa,CAAC,8BAAqB,EAAE,aAAa,CAAC,CAAC;aAC/D;YAED,MAAM,IAAI,GAAG;gBACX,MAAM,EAAE,UAAU;gBAClB,KAAK;gBACL,WAAW;gBACX,KAAK,EAAE,KAAK,IAAI,CAAC,CAAC;gBAClB,OAAO,EAAE,KAAK,CAAC,EAAE;gBACjB,YAAY;gBACZ,IAAI;aACL,CAAC;YACF,KAAK,GAAG,MAAM,eAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAClD,MAAM,aAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,OAAO;gBACd,IAAI;gBACJ,MAAM,EAAE,KAAK,CAAC,EAAE;gBAChB,SAAS,EAAE,KAAK,CAAC,OAAO;gBACxB,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,aAAa;aACtB,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;QACtB,CAAC,CAAA,EAAE,WAAW,CAAC,CAAC;QAGhB,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAChC,OAAO;YACP,OAAO,EAAE,KAAK,CAAC,EAAE;YACjB,MAAM,EAAE,MAAM,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;SACxC,CAAC,CAAC;QAEH,IAAA,kCAAwB,EAAC,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC;IACf,CAAC;CAAA;AAED,kBAAe,WAAW,CAAC","file":"createStack.js","sourcesContent":["import { Client, Stack } from '@Models';\nimport { Transaction } from 'sequelize';\nimport { StackObj, RedstoneError, InvalidInputErrorType, ResourceNotFoundErrorType } from '@Types';\n\nimport * as EventService from '@Services/EventService';\nimport * as RecordService from '@Services/RecordService';\nimport * as UtilService from '@Services/UtilService';\nimport updateElasticsearchIndex from './updateElasticsearchIndex';\n\nasync function createStack(eventId: number | string, data: StackObj, clientId: number, transaction?: Transaction) {\n  const { title, description, order, time, stackEventId } = data;\n\n  if (!title) {\n    throw new RedstoneError(InvalidInputErrorType, '缺少参数：title');\n  }\n\n  const event = await EventService.findEvent(eventId);\n\n  if (!event) {\n    throw new RedstoneError(ResourceNotFoundErrorType, '未找到该事件');\n  }\n\n  let stack: Stack = null;\n  await UtilService.execWithTransaction(async transaction => {\n    stack = await Stack.findOne({\n      where: { eventId, title },\n      transaction,\n    });\n    if (stack) {\n      throw new RedstoneError(InvalidInputErrorType, '该事件下已存在同名进展');\n    }\n\n    const data = {\n      status: 'admitted',\n      title,\n      description,\n      order: order || -1,\n      eventId: event.id,\n      stackEventId,\n      time,\n    };\n    stack = await Stack.create(data, { transaction });\n    await RecordService.create({\n      model: 'stack',\n      data,\n      target: stack.id,\n      subtarget: stack.eventId,\n      owner: clientId,\n      action: 'createStack',\n    }, { transaction });\n  }, transaction);\n\n\n  const socket = await EventService.getNewsroomSocket(stack.eventId);\n  socket.emit('add event to stack', {\n    eventId,\n    stackId: stack.id,\n    client: await Client.findByPk(clientId),\n  });\n\n  updateElasticsearchIndex({ stackId: stack.id });\n  return stack;\n}\n\nexport default createStack;\n"],"sourceRoot":"../../../../src"}