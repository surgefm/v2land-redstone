{"version":3,"sources":["../api/services/StackService/updateElasticsearchIndex.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAgC;AAEhC,8EAAgE;AAEhE,SAAe,wBAAwB,CAAC,EAAE,KAAK,EAAE,OAAO,EAGvD;;QACC,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACvC;QAED,IAAI,KAAK,YAAY,eAAK,EAAE;YAC1B,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAa,CAAC;SAChD;QAED,OAAO,oBAAoB,CAAC,MAAM,CAAC;YACjC,KAAK,EAAE,QAAQ;YACf,EAAE,EAAE,KAAK,CAAC,EAAE,GAAG,EAAE;YACjB,IAAI,EAAE;gBACJ,KAAK,EAAE,KAAK;gBACZ,eAAe,EAAE,IAAI;aACtB;SACF,CAAC,CAAC;IACL,CAAC;CAAA;AAED,kBAAe,wBAAwB,CAAC","file":"updateElasticsearchIndex.js","sourcesContent":["import { Stack } from '@Models';\nimport { StackObj } from '@Types';\nimport * as ElasticsearchService from '../ElasticsearchService';\n\nasync function updateElasticsearchIndex({ stack, stackId }: {\n  stack?: Stack | StackObj;\n  stackId?: number;\n}) {\n  if (!stack) {\n    stack = await Stack.findByPk(stackId);\n  }\n\n  if (stack instanceof Stack) {\n    stack = stack.get({ plain: true }) as StackObj;\n  }\n\n  return ElasticsearchService.update({\n    index: 'stacks',\n    id: stack.id + '',\n    body: {\n      'doc': stack,\n      'doc_as_upsert': true,\n    },\n  });\n}\n\nexport default updateElasticsearchIndex;\n"],"sourceRoot":"../../../../src"}