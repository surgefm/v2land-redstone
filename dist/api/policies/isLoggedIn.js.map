{"version":3,"sources":["../api/policies/isLoggedIn.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;GAOG;AACH,qCAAiC;AACjC,yCAAiD;AAGjD,mBAA8B,GAAoB,EAAE,GAAqB,EAAE,IAAkB;;QAC3F,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,WAAW,EAAE;YACtC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;QACD,GAAG,CAAC,aAAa,GAAG,MAAM,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,GAAG,CAAC,aAAa,EAAE;YACrB,GAAG,CAAC,aAAa,CAAC,OAAO,GAAG,MAAM,gCAAoB,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC3F,GAAG,CAAC,aAAa,CAAC,QAAQ,GAAG,GAAG,CAAC,aAAa,CAAC,OAAO,KAAI,MAAM,gCAAoB,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC;YAC1H,GAAG,CAAC,aAAa,CAAC,SAAS,GAAG,GAAG,CAAC,aAAa,CAAC,SAAS,KAAI,MAAM,gCAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC;YAC9H,OAAO,IAAI,EAAE,CAAC;SACf;aAAM;YACL,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;IACH,CAAC;CAAA;AAjBD,4BAiBC;AAED;;;;;;GAMG;AACH,SAAe,SAAS,CAAC,GAAoB,EAAE,QAAgB;;QAC7D,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC5B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA","file":"isLoggedIn.js","sourcesContent":["/**\n * isLoggedIn\n *\n * @module      :: Policy\n * @description :: Check if the session client has logged in\n * @docs        :: http://sailsjs.org/#!/documentation/concepts/Policies\n *\n */\nimport { Client } from '@Models';\nimport { AccessControlService } from '@Services';\nimport { RedstoneRequest, RedstoneResponse, NextFunction } from '@Types';\n\nexport default async function(req: RedstoneRequest, res: RedstoneResponse, next: NextFunction) {\n  if (typeof req.session === 'undefined') {\n    return res.status(401).json({\n      message: '请在登录后进行该操作',\n    });\n  }\n  req.currentClient = await getClient(req, req.session.clientId);\n  if (req.currentClient) {\n    req.currentClient.isAdmin = await AccessControlService.isClientAdmin(req.session.clientId);\n    req.currentClient.isEditor = req.currentClient.isAdmin || await AccessControlService.isClientEditor(req.session.clientId);\n    req.currentClient.isManager = req.currentClient.isManager || await AccessControlService.isClientManager(req.session.clientId);\n    return next();\n  } else {\n    return res.status(401).json({\n      message: '请在登录后进行该操作',\n    });\n  }\n}\n\n/**\n * getClient\n *\n * @module      :: Policy\n * @description :: Check if the clientId is undefined or invalid; if valid, return a client instance\n * @returns     :: a client instance(if client's found) or false (if not found)\n */\nasync function getClient(req: RedstoneRequest, clientId: number) {\n  if (!clientId) {\n    return null;\n  }\n  const client = await Client.findByPk(clientId);\n  if (!client) {\n    delete req.session.clientId;\n    return null;\n  }\n  return client;\n}\n"],"sourceRoot":"../../../src"}