{"version":3,"sources":["../api/policies/hasPermission.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,yCAAiD;AAEjD,MAAM,aAAa,GAAG,CAAC,UAAkB,EAAE,MAAc,EAAE,YAAqB,EAAE,EAAE,CAAC,CAAO,GAAoB,EAAE,GAAqB,EAAE,IAAkB,EAAE,EAAE;IAC7J,MAAM,UAAU,GAAG,MAAM,gCAAoB,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAClG,IAAI,UAAU;QAAE,OAAO,IAAI,EAAE,CAAC;IAE9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,YAAY,IAAI,SAAS;KACnC,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AAEF,kBAAe,aAAa,CAAC","file":"hasPermission.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse, NextFunction } from '@Types';\nimport { AccessControlService } from '@Services';\n\nconst hasPermission = (resourceId: string, action: string, errorMessage?: string) => async (req: RedstoneRequest, res: RedstoneResponse, next: NextFunction) => {\n  const haveAccess = await AccessControlService.isAllowed(req.session.clientId, resourceId, action);\n  if (haveAccess) return next();\n\n  return res.status(403).json({\n    message: errorMessage || '用户没有该权限',\n  });\n};\n\nexport default hasPermission;\n"],"sourceRoot":"../../../src"}