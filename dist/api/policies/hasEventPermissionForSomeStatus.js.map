{"version":3,"sources":["../api/policies/hasEventPermissionForSomeStatus.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,yCAA+D;AAC/D,oDAAuB;AAEvB,MAAM,+BAA+B,GAAG,CAAC,YAAqB,EAAE,EAAE,CAAC,CAAO,GAAoB,EAAE,GAAqB,EAAE,IAAkB,EAAE,EAAE;IAC3I,MAAM,OAAO,GAAG,MAAM,wBAAY,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC1D,MAAM,KAAK,GAAG,MAAM,wBAAY,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACzE,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAI,gBAAC,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,YAAY;SACtB,CAAC,CAAC;KACJ;IACD,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;QAC/B,UAAU,GAAG,IAAI,CAAC;KACnB;SAAM;QACL,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE;YACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;SACJ;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS,EAAE;YAC3D,UAAU,GAAG,MAAM,gCAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,gCAAoB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;SAC5H;aAAM,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;YACtC,UAAU,GAAG,MAAM,gCAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,gCAAoB,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC;SAC7H;QACD,UAAU,GAAG,UAAU,KAAI,MAAM,gCAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC;KAC7F;IACD,IAAI,UAAU;QAAE,OAAO,IAAI,EAAE,CAAC;IAE9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,YAAY,IAAI,aAAa;KACvC,CAAC,CAAC;AACL,CAAC,CAAA,CAAC;AAEF,kBAAe,+BAA+B,CAAC","file":"hasEventPermissionForSomeStatus.js","sourcesContent":["import { RedstoneRequest, RedstoneResponse, NextFunction } from '@Types';\nimport { AccessControlService, EventService } from '@Services';\nimport _ from 'lodash';\n\nconst hasEventPermissionForSomeStatus = (errorMessage?: string) => async (req: RedstoneRequest, res: RedstoneResponse, next: NextFunction) => {\n  const eventId = await EventService.getEventId(req.params);\n  const event = await EventService.findEvent(eventId, { eventOnly: true });\n  let haveAccess = false;\n  if (_.isUndefined(event)) {\n    return res.status(404).json({\n      message: '用户请求的事件不存在',\n    });\n  }\n  if (event.status === 'admitted') {\n    haveAccess = true;\n  } else {\n    if (!req.session.clientId) {\n      return res.status(401).json({\n        message: '请在登录后进行该操作',\n      });\n    }\n    if (event.status === 'hidden' || event.status === 'removed') {\n      haveAccess = await AccessControlService.hasRole(req.session.clientId, AccessControlService.getEventViewRolePlain(eventId));\n    } else if (event.status === 'rejected') {\n      haveAccess = await AccessControlService.hasRole(req.session.clientId, AccessControlService.getEventOwnerRolePlain(eventId));\n    }\n    haveAccess = haveAccess || await AccessControlService.isClientManager(req.session.clientId);\n  }\n  if (haveAccess) return next();\n\n  return res.status(403).json({\n    message: errorMessage || '用户没有查看事件的权限',\n  });\n};\n\nexport default hasEventPermissionForSomeStatus;\n"],"sourceRoot":"../../../src"}