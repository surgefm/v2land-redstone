{"version":3,"sources":["../config/session.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;AAEH,gEAAuC;AACvC,wDAAgC;AAChC,qCAAoC;AAEpC,yDAAqD;AACrD,sDAA4B;AAC5B,kEAAyC;AAEzC,sEAA6C;AAC7C,0FAAyD;AAEzD,IAAI,YAAwC,CAAC;AAyCb,oCAAY;AAvC5C,MAAM,GAAG,GAAG,IAAA,sBAAW,EAAC,iBAAO,CAAC,GAAG,CAAC,CAAC;AACrC,MAAM,MAAM,GAAG;IACb,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;QACnF,CAAC,CAAC,eAAe;QACjB,CAAC,CAAC,IAAI;IACR,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;CAChC,CAAC;AAgCO,wBAAM;AA9Bf,MAAM,aAAa,GAAG;IACpB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,kCAAkC;IACxE,MAAM,EAAE,IAAI;IACZ,iBAAiB,EAAE,IAAI;IACvB,KAAK,EAAE,SAAsB;IAC7B,IAAI,EAAE,WAAW;IACjB,KAAK,EAAE,IAAI;IACX,MAAM;CACP,CAAC;AAsBe,sCAAa;AApB9B,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;IAC1B,MAAM,UAAU,GAAG,IAAA,uBAAY,EAAC,yBAAc,CAAC,CAAC;IAChD,MAAM,WAAW,GAAG,IAAI,iBAAK,CAAC,0BAAW,CAAC,CAAC;IAC3C,yBAAyB;IACzB,uBAAA,YAAY,GAAG,GAAG,EAAE,CAAC,IAAI,UAAU,CAAC;QAClC,MAAM,EAAE,WAAW;QACnB,MAAM,EAAE,UAAU;QAClB,GAAG,EAAE,KAAK,GAAG,CAAC;KACf,CAAC,CAAC;IAEH,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;CACjD;KAAM;IACL,MAAM,cAAc,GAAG,IAAA,mCAAgB,EAAC,yBAAc,CAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,KAAK,GAAG,IAAI,cAAc,CAAC,EAAE,EAAE,EAAE,mBAAS,EAAE,CAAC,CAAC;IACpD,KAAK,CAAC,IAAI,EAAE,CAAC;IACb,uBAAA,YAAY,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;IAE3B,OAAO,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;CACpF;AAGD,kBAAe,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC","file":"session.js","sourcesContent":["/**\n * Session Configuration\n * (sails.config.session)\n *\n * Sails session integration leans heavily on the great work already done by\n * Express, but also unifies Socket.io with the Connect session store. It uses\n * Connect's cookie parser to normalize configuration differences between Express\n * and Socket.io and hooks into Sails' middleware interpreter to allow you to access\n * and auto-save to `req.session` with Socket.io the same way you would with Express.\n *\n * For more information on configuring the session, check out:\n * http://sailsjs.org/#!/documentation/reference/sails.config/sails.config.session.html\n */\n\nimport parseDomain from 'parse-domain';\nimport globals from './globals';\nimport { sequelize } from '@Models';\n\nimport { redisConfig } from '@Services/RedisService';\nimport Redis from 'ioredis';\nimport sessionRedis from 'connect-redis';\n\nimport expressSession from 'express-session';\nimport sessionSequelize from 'connect-session-sequelize';\n\nlet sessionStore: () => expressSession.Store;\n\nconst url = parseDomain(globals.api);\nconst cookie = {\n  domain: ((process.env.NODE_ENV === 'production' || process.env.CUSTOM_DOMAIN) && url)\n    ? '.langchao.org'\n    : null,\n  secure: false,\n  maxAge: 7 * 24 * 60 * 60 * 1000,\n};\n\nconst sessionConfig = {\n  secret: process.env.SESSION_SECRET || '970a14748cf639a4aa3d7b0d60cc9cac',\n  resave: true,\n  saveUninitialized: true,\n  unset: 'destroy' as 'destroy',\n  name: 'surge.sid',\n  proxy: true,\n  cookie,\n};\n\nif (process.env.REDIS_HOST) {\n  const RedisStore = sessionRedis(expressSession);\n  const redisClient = new Redis(redisConfig);\n  // redisClient.connect();\n  sessionStore = () => new RedisStore({\n    client: redisClient,\n    prefix: 'session:',\n    ttl: 86400 * 7,\n  });\n\n  console.info('Using Redis as session storage.');\n} else {\n  const SequelizeStore = sessionSequelize(expressSession.Store);\n  const store = new SequelizeStore({ db: sequelize });\n  store.sync();\n  sessionStore = () => store;\n\n  console.info('Using PostgreSQL as session storage. One service instance at most.');\n}\n\nexport { cookie, sessionConfig, sessionStore };\nexport default { cookie, sessionConfig, sessionStore };\n"],"sourceRoot":"../../src"}