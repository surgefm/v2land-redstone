{"version":3,"sources":["../config/views.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;GAWG;;AAEH,kBAAe;IAEb;;;;;;;;;;;;;;;iFAe6E;IAE7E,SAAS,EAAE,KAAK;IAEhB;;;;;;;;;;;;;;;;;;;;;;iFAsB6E;IAE7E;;;;;;;;;;;;;;;;iFAgB6E;IAE7E,MAAM,EAAE,QAAQ;IAEhB;;;;;;;;;;iFAU6E;IAE7E,QAAQ,EAAE,KAAK;CAEhB,CAAC","file":"views.js","sourcesContent":["/**\n * View Engine Configuration\n * (sails.config.views)\n *\n * Server-sent views are a classic and effective way to get your app up\n * and running. Views are normally served from controllers.  Below, you can\n * configure your templating language/framework of choice and configure\n * Sails' layout support.\n *\n * For more information on views and layouts, check out:\n * http://sailsjs.org/#!/documentation/concepts/Views\n */\n\nexport default {\n\n  /** **************************************************************************\n  *                                                                           *\n  * View engine (aka template language) to use for your app's *server-side*   *\n  * views                                                                     *\n  *                                                                           *\n  * Sails+Express supports all view engines which implement TJ Holowaychuk's  *\n  * `consolidate.js`, including, but not limited to:                          *\n  *                                                                           *\n  * ejs, jade, handlebars, mustache underscore, hogan, haml, haml-coffee,     *\n  * dust atpl, eco, ect, jazz, jqtpl, JUST, liquor, QEJS, swig, templayed,    *\n  * toffee, walrus, & whiskers                                                *\n  *                                                                           *\n  * For more options, check out the docs:                                     *\n  * https://github.com/balderdashy/sails-wiki/blob/0.9/config.views.md#engine *\n  *                                                                           *\n  ****************************************************************************/\n\n  extension: 'ejs',\n\n  /** **************************************************************************\n  *                                                                           *\n  * Layouts are simply top-level HTML templates you can use as wrappers for   *\n  * your server-side views. If you're using ejs or jade, you can take         *\n  * advantage of Sails' built-in `layout` support.                            *\n  *                                                                           *\n  * When using a layout, when one of your views is served, it is injected     *\n  * into the `body` partial defined in the layout. This lets you reuse header *\n  * and footer logic between views.                                           *\n  *                                                                           *\n  * NOTE: Layout support is only implemented for the `ejs` view engine!       *\n  *       For most other engines, it is not necessary, since they implement   *\n  *       partials/layouts themselves. In those cases, this config will be    *\n  *       silently ignored.                                                   *\n  *                                                                           *\n  * The `layout` setting may be set to one of the following:                  *\n  *                                                                           *\n  * If `false`, layouts will be disabled. Otherwise, if a string is           *\n  * specified, it will be interpreted as the relative path to your layout     *\n  * file from `views/` folder. (the file extension, \".ejs\", should be         *\n  * omitted)                                                                  *\n  *                                                                           *\n  ****************************************************************************/\n\n  /** **************************************************************************\n  *                                                                           *\n  * Using Multiple Layouts                                                    *\n  *                                                                           *\n  * If you're using the default `ejs` or `handlebars` Sails supports the use  *\n  * of multiple `layout` files. To take advantage of this, before rendering a *\n  * view, override the `layout` local in your controller by setting           *\n  * `res.locals.layout`. (this is handy if you parts of your app's UI look    *\n  * completely different from each other)                                     *\n  *                                                                           *\n  * e.g. your default might be                                                *\n  * layout: 'layouts/public'                                                  *\n  *                                                                           *\n  * But you might override that in some of your controllers with:             *\n  * layout: 'layouts/internal'                                                *\n  *                                                                           *\n  ****************************************************************************/\n\n  layout: 'layout',\n\n  /** **************************************************************************\n  *                                                                           *\n  * Partials are simply top-level snippets you can leverage to reuse template *\n  * for your server-side views. If you're using handlebars, you can take      *\n  * advantage of Sails' built-in `partials` support.                          *\n  *                                                                           *\n  * If `false` or empty partials will be located in the same folder as views. *\n  * Otherwise, if a string is specified, it will be interpreted as the        *\n  * relative path to your partial files from `views/` folder.                 *\n  *                                                                           *\n  ****************************************************************************/\n\n  partials: false,\n\n};\n"],"sourceRoot":"../../src"}