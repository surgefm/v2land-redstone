{"version":3,"sources":["../config/http.ts"],"names":[],"mappings":";;AAEA,qCAAmD;AAEnD,kBAAe;IAEb;;;;;;;;iFAQ6E;IAE7E,UAAU,EAAE;QAEV;;;;;kFAK0E;QAE1E,KAAK,EAAE;YACL,cAAc;YACd,SAAS;YACT,sBAAsB;YACtB,YAAY;YACZ,UAAU;YACV,WAAW;YACX,SAAS;YACT,SAAS;YACT,QAAQ;YACR,KAAK;YACL,SAAS;SACV;QAED,OAAO,EAAE,UAAS,GAAY,EAAE,GAAa,EAAE,IAAkB;YAC/D,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC;YAClD,OAAO,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,oBAAoB,EAAE,UAAS,GAAoB,EAAE,GAAa,EAAE,IAAkB;YACpF,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;gBACtE,OAAO,IAAI,EAAE,CAAC;aACf;YAED,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC/C,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,EAAE;gBAC1C,OAAO,IAAI,EAAE,CAAC;aACf;YAED,MAAM,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,kCAAwB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,WAAgB,EAAE,EAAE;gBAC/F,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,mBAAmB;qBAC7B,CAAC,CAAC;iBACJ;qBAAM,IAAI,WAAW,CAAC,MAAM,IAAI,SAAS,EAAE;oBAC1C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,qBAAqB;qBAC/B,CAAC,CAAC;iBACJ;gBAED,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;gBACzC,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;QACL,CAAC;KAEF;IAED;;;;;;;;gFAQ4E;IAE5E,qBAAqB;CACtB,CAAC","file":"http.js","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { RedstoneRequest } from '@Types';\nimport { AuthorizationAccessToken } from '@Models';\n\nexport default {\n\n  /** **************************************************************************\n  *                                                                           *\n  * Express middleware to use for every Sails request. To add custom          *\n  * middleware to the mix, add a function to the middleware config object and *\n  * add its key to the \"order\" array. The $custom key is reserved for         *\n  * backwards-compatibility with Sails v0.9.x apps that use the               *\n  * `customMiddleware` config option.                                         *\n  *                                                                           *\n  ****************************************************************************/\n\n  middleware: {\n\n    /** *************************************************************************\n  *                                                                          *\n  * The order in which middleware should be run for HTTP request. (the Sails *\n  * router is invoked by the \"router\" middleware below.)                     *\n  *                                                                          *\n  ***************************************************************************/\n\n    order: [\n      'cookieParser',\n      'session',\n      'bearerAuthentication',\n      'bodyParser',\n      'compress',\n      'poweredBy',\n      '$custom',\n      'noCache',\n      'router',\n      'www',\n      'favicon',\n    ],\n\n    noCache: function(req: Request, res: Response, next: NextFunction) {\n      res.header('Cache-Control', 'no-cache, no-store');\n      return next();\n    },\n\n    bearerAuthentication: function(req: RedstoneRequest, res: Response, next: NextFunction) {\n      if ((req.session && req.session.clientId) || !req.get('Authorization')) {\n        return next();\n      }\n\n      const authorization = req.get('Authorization');\n      if (authorization.slice(0, 7) != 'Bearer ') {\n        return next();\n      }\n\n      const accessTokenStr = authorization.slice(7);\n      AuthorizationAccessToken.findOne({ where: { token: accessTokenStr } }).then((accessToken: any) => {\n        if (accessToken == null) {\n          return res.status(400).json({\n            message: '未找到该 AccessToken。',\n          });\n        } else if (accessToken.status == 'revoked') {\n          return res.status(400).json({\n            message: '你的 AccessToken 已失效。',\n          });\n        }\n\n        req.session.clientId = accessToken.owner;\n        next();\n      });\n    },\n\n  },\n\n  /** *************************************************************************\n  *                                                                          *\n  * The number of seconds to cache flat files on disk being served by        *\n  * Express static middleware (by default, these files are in `.tmp/public`) *\n  *                                                                          *\n  * The HTTP static cache is only active in a 'production' environment,      *\n  * since that's the only time Express will cache flat-files.                *\n  *                                                                          *\n  ***************************************************************************/\n\n  // cache: 31557600000\n};\n"],"sourceRoot":"../../src"}