{"version":3,"sources":["../tests/integration/services/AccessControlService.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oCAAoC;AACpC,oDAA4B;AAC5B,yCAAiD;AAEjD,MAAM,cAAc,GAAG,CAAO,QAAgB,EAAE,EAAE;IAChD,OAAO,gCAAoB,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,gCAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxG,CAAC,CAAA,CAAC;AAEF,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,mBAAmB,EAAE;;YACtB,MAAM,gCAAoB,CAAC,UAAU,EAAE,CAAC;QAC1C,CAAC;KAAA,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE;;YAC9C,MAAM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,gCAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,gCAAoB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YACrF,MAAM,SAAS,GAAG,MAAM,gCAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC/E,IAAA,gBAAM,EAAC,SAAS,KAAK,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;;YACzC,MAAM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,gCAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,gCAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAChF,MAAM,SAAS,GAAG,MAAM,gCAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC/E,IAAA,gBAAM,EAAC,SAAS,KAAK,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;;YACxC,MAAM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,gCAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,gCAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC/E,MAAM,SAAS,GAAG,MAAM,gCAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC/E,IAAA,gBAAM,EAAC,SAAS,KAAK,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;;YAC5C,MAAM,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,gCAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,gCAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC/E,MAAM,SAAS,GAAG,MAAM,gCAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC/E,IAAA,gBAAM,EAAC,SAAS,KAAK,KAAK,CAAC,CAAC;QAC9B,CAAC;KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"AccessControlService.test.js","sourcesContent":["/* eslint-disable no-invalid-this */\nimport assert from 'assert';\nimport { AccessControlService } from '@Services';\n\nconst removeAllRoles = async (clientId: number) => {\n  return AccessControlService.removeUserRoles(clientId, await AccessControlService.userRoles(clientId));\n};\n\ndescribe('AccessControlService', () => {\n  it('should initialize', async function() {\n    await AccessControlService.initialize();\n  });\n\n  it('should allow contributors to create event', async function() {\n    await removeAllRoles(-1);\n    await AccessControlService.addUserRoles(-1, AccessControlService.roles.contributors);\n    const isAllowed = await AccessControlService.isAllowed(-1, 'events', 'create');\n    assert(isAllowed === true);\n  });\n\n  it('should allow editors to create event', async function() {\n    await removeAllRoles(-1);\n    await AccessControlService.addUserRoles(-1, AccessControlService.roles.editors);\n    const isAllowed = await AccessControlService.isAllowed(-1, 'events', 'create');\n    assert(isAllowed === true);\n  });\n\n  it('should allow admins to create event', async function() {\n    await removeAllRoles(-1);\n    await AccessControlService.addUserRoles(-1, AccessControlService.roles.admins);\n    const isAllowed = await AccessControlService.isAllowed(-1, 'events', 'create');\n    assert(isAllowed === true);\n  });\n\n  it('should not allow guests to create event', async function() {\n    await removeAllRoles(-1);\n    await AccessControlService.addUserRoles(-1, AccessControlService.roles.guests);\n    const isAllowed = await AccessControlService.isAllowed(-1, 'events', 'create');\n    assert(isAllowed === false);\n  });\n});\n"],"sourceRoot":"../../../../src"}