{"version":3,"sources":["../tests/integration/controllers/ClientController.test.ts"],"names":[],"mappings":"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","file":"ClientController.test.js","sourcesContent":["import request from 'supertest';\nimport { sequelize } from '@Models';\nimport app from '~/app';\n\nlet agent: request.SuperTest<request.Test>;\n\nconst testEmail = process.env.TEST_EMAIL || 'test@langchao.org';\n\ndescribe('ClientController', function() {\n  describe('#register()', function() {\n    before(async function() {\n      await sequelize.query(`DELETE FROM commit`);\n      await sequelize.query(`DELETE FROM client`);\n    });\n\n    it('should return success', function(done) {\n      // Use agent to store session.\n      agent = request.agent(app);\n\n      agent\n        .post('/client/register')\n        .send({\n          username: 'testRegister',\n          nickname: 'testRegister',\n          password: 'testPassword1',\n          email: testEmail,\n        })\n        .expect(201, done);\n    });\n\n    it('should return an error message when the username is unavailable', async function() {\n      await agent\n        .post('/client/register')\n        .send({\n          username: 'login',\n          nickname: 'testChangePwd',\n          password: 'testChangePassword1',\n          email: testEmail,\n        })\n        .expect(400, {\n          message: '用户名不可用',\n        });\n    });\n  });\n\n  describe('#changePassword()', function() {\n    const password = 'changedPassword1';\n\n    before(async function() {\n      await sequelize.query(`DELETE FROM client`);\n    });\n\n    it('should successfully change password', async function() {\n      const res = await agent\n        .post('/client/register')\n        .send({\n          username: 'testChangePwd',\n          nickname: 'testChangePwd',\n          password: 'testChangePassword1',\n          email: testEmail,\n        })\n        .expect(201);\n\n      const { client } = JSON.parse(res.text);\n      const clientId = client.id;\n\n      await agent\n        .post('/client/login')\n        .send({\n          username: 'testChangePwd',\n          password: 'testChangePassword1',\n        })\n        .expect(200);\n\n      await agent\n        .put('/client/password')\n        .send({\n          id: clientId,\n          password,\n        })\n        .expect(201, {\n          message: '更新密码成功',\n        });\n    });\n\n    it('should login success', async function() {\n      await agent\n        .get('/client/logout')\n        .expect(200, {\n          message: '成功退出登录',\n        });\n\n      await agent\n        .post('/client/login')\n        .send({\n          username: 'testChangePwd',\n          password,\n        })\n        .expect(200);\n    });\n  });\n\n  describe('#login/logout()', function() {\n    before(async function() {\n      await sequelize.query(`DELETE FROM client`);\n\n      await agent\n        .post('/client/register')\n        .send({\n          username: 'testAccountLogin',\n          nickname: 'testAccountLogin',\n          password: 'testPassword1',\n          email: testEmail,\n        })\n        .expect(201);\n    });\n\n    it('should return success', async function() {\n      await agent\n        .post('/client/login')\n        .send({\n          username: 'testAccountLogin',\n          password: 'testPassword1',\n        })\n        .expect(200);\n    });\n\n    it('should return client\\'s information', async function() {\n      await agent\n        .get('/client/me')\n        .expect(200);\n    });\n\n    it('should log out successfully', async function() {\n      await agent\n        .get('/client/logout')\n        .expect(200, {\n          message: '成功退出登录',\n        });\n\n      await agent\n        .get('/client/me')\n        .expect(401, {\n          message: '请在登录后进行该操作',\n        });\n    });\n\n    it('should logout after the client ID stored in session does not exist', async function() {\n      await agent\n        .get('/client/me')\n        .expect(401, {\n          message: '请在登录后进行该操作',\n        });\n    });\n  });\n});\n"],"sourceRoot":"../../../../src"}