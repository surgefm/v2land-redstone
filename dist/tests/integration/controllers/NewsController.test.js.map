{"version":3,"sources":["../tests/integration/controllers/NewsController.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oCAAoC;AACpC,0DAAgC;AAChC,wDAA8B;AAC9B,qCAAmD;AACnD,yCAAiD;AACjD,gDAAwB;AAExB,IAAI,KAAsC,CAAC;AAE3C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,sBAAsB,CAAC;AAC3F,MAAM,YAAY,GAAG,QAAQ,CAAC;AAE9B,MAAM,aAAa,GAAG,MAAM,CAAC;AAE7B,QAAQ,CAAC,gBAAgB,EAAE;IACzB,MAAM,CAAC;;YACL,KAAK,GAAG,mBAAO,CAAC,KAAK,CAAC,aAAG,CAAC,CAAC;YAE3B,MAAM,mBAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAC5C,MAAM,mBAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC1C,MAAM,mBAAS,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC3C,MAAM,mBAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAE5C,MAAM,eAAK,CAAC,MAAM,CAAC;gBACjB,IAAI,EAAE,aAAa;gBACnB,WAAW,EAAE,QAAQ;gBACrB,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,MAAM,CAAC;gBACjC,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,SAAS;aAChB,EAAE;gBACD,GAAG,EAAE,IAAI;aACV,CAAC,CAAC;YAEH,MAAM,gCAAoB,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAE7D,MAAM,KAAK;iBACR,IAAI,CAAC,eAAe,CAAC;iBACrB,IAAI,CAAC;gBACJ,QAAQ,EAAE,YAAY;gBACtB,QAAQ,EAAE,cAAc;aACzB,CAAC,CAAC;QACP,CAAC;KAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE;;YACtB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,KAAK;iBACR,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;iBACzB,IAAI,CAAC;gBACJ,GAAG,EAAE,sBAAsB;gBAC3B,MAAM,EAAE,QAAQ;gBAChB,KAAK,EAAE,SAAS;gBAChB,QAAQ,EAAE,SAAS;gBACnB,IAAI,EAAE,IAAI,IAAI,EAAE;aACjB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"NewsController.test.js","sourcesContent":["/* eslint-disable no-invalid-this */\nimport request from 'supertest';\nimport bcrypt from 'bcryptjs';\nimport { Client, Event, sequelize } from '@Models';\nimport { AccessControlService } from '@Services';\nimport app from '~/app';\n\nlet agent: request.SuperTest<request.Test>;\n\nconst testEmail = process.env.TEST_EMAIL ? process.env.TEST_EMAIL : 'vincent@langchao.org';\nconst testUsername = 'AlanAI';\n\nconst testEventName = '陈博女装';\n\ndescribe('NewsController', function() {\n  before(async function() {\n    agent = request.agent(app);\n\n    await sequelize.query(`DELETE FROM commit`);\n    await sequelize.query(`DELETE FROM news`);\n    await sequelize.query(`DELETE FROM event`);\n    await sequelize.query(`DELETE FROM client`);\n\n    await Event.create({\n      name: testEventName,\n      description: '浪潮今天上线',\n      status: 'admitted',\n    });\n\n    const salt = await bcrypt.genSalt(10);\n    const hash = await bcrypt.hash('testPassword', salt);\n\n    const client = await Client.create({\n      username: testUsername,\n      nickname: testUsername,\n      password: hash,\n      email: testEmail,\n      role: 'manager',\n    }, {\n      raw: true,\n    });\n\n    await AccessControlService.addUserRoles(client.id, 'admins');\n\n    await agent\n      .post('/client/login')\n      .send({\n        username: testUsername,\n        password: 'testPassword',\n      });\n  });\n\n  it('should return 404', async function() {\n    this.timeout(50000);\n    await agent\n      .post(`/event/${-1}/news`)\n      .send({\n        url: 'https://langchao.org',\n        source: 'source',\n        title: '浪潮今天不上线',\n        abstract: '浪潮今天不上线',\n        time: new Date(),\n      })\n      .expect(404);\n  });\n});\n"],"sourceRoot":"../../../../src"}