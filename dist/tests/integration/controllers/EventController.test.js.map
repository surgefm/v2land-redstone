{"version":3,"sources":["../tests/integration/controllers/EventController.test.ts"],"names":[],"mappings":"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","file":"EventController.test.js","sourcesContent":["/* eslint-disable no-invalid-this */\nimport request from 'supertest';\nimport urlencode from 'urlencode';\nimport assert from 'assert';\nimport { Client, Event, Stack, News, EventStackNews, HeaderImage, sequelize } from '@Models';\nimport { AccessControlService, CommitService } from '@Services';\nimport app from '~/app';\n\nlet agent: request.SuperTest<request.Test>;\nlet clientId = 0;\nconst testEmail = process.env.TEST_EMAIL ? process.env.TEST_EMAIL : 'vincent@langchao.org';\nconst testUsername = 'VincentAI';\n\ndescribe('EventController', function() {\n  let event: Event;\n  this.timeout(10000);\n  describe('createEvent', function() {\n    before(async function() {\n      agent = request.agent(app);\n      await sequelize.query(`DELETE FROM commit`);\n      await sequelize.query(`DELETE FROM event`);\n      await sequelize.query(`DELETE FROM client`);\n\n      const client = await Client.create({\n        username: testUsername,\n        nickname: testUsername,\n        password: '$2b$10$8njIkPFgDouZsKXYrkYF4.xqShsOPMK9WHEU7aou4FAeuvzb4WRmi',\n        email: testEmail,\n      });\n\n      await AccessControlService.addUserRoles(client.id, AccessControlService.roles.admins);\n      clientId = client.id;\n      await agent\n        .post('/client/login')\n        .send({\n          username: testUsername,\n          password: '666',\n        });\n    });\n\n    it('should return success after creating event', function(done) {\n      agent\n        .post('/event')\n        .send({\n          name: '浪潮今天发布啦',\n          description: '浪潮今天发布啦',\n        })\n        .expect(201, undefined, (err, res) => {\n          event = res.body.event;\n          done();\n        });\n    });\n\n    it('event name cannot be duplicate', function(done) {\n      agent\n        .post('/event')\n        .send({\n          name: '浪潮今天发布啦',\n          description: '浪潮今天发布啦',\n        })\n        .expect(409, {\n          message: '已有同名事件或事件正在审核中',\n        })\n        .end(done);\n    });\n\n    it('should update event rejected', function(done) {\n      agent\n        .put(`/event/${event.id}`)\n        .send({\n          status: 'rejected',\n        })\n        .expect(201)\n        .end(done);\n    });\n\n    it('should update event admitted success', function(done) {\n      agent\n        .put(`/event/${event.id}`)\n        .send({\n          status: 'admitted',\n        })\n        .expect(201)\n        .end(done);\n    });\n\n    it('should make event commit success', function(done) {\n      agent\n        .post(`/event/${event.id}/commit`)\n        .send({\n          summary: 'yoyo',\n        })\n        .expect(201)\n        .end(done);\n    });\n\n    it('should get event', function(done) {\n      agent\n        .get('/event')\n        .send({\n          eventName: '浪潮今天发布啦',\n        })\n        .expect(200)\n        .end(done);\n    });\n\n    it('should return success after getting the event', function(done) {\n      agent\n        .get(`/event/@${testUsername}/${urlencode('浪潮今天发布啦')}`)\n        .expect(200)\n        .end(done);\n    });\n\n    it('should return 404 when there is no such event', function(done) {\n      agent\n        .get(`/event/@${testUsername}/${urlencode('浪潮今天没有发布')}`)\n        .expect(404)\n        .end(done);\n    });\n  });\n\n  describe('Event\\'s header image', function() {\n    before(async function() {\n      await Event.destroy({\n        where: {\n          name: '浪潮今天发布了吗？',\n        },\n      });\n\n      await HeaderImage.destroy({\n        where: {\n          sourceUrl: 'https://langchao.org/',\n        },\n      });\n\n      event = await Event.create({\n        name: '浪潮今天发布了吗？',\n        description: '浪潮今天发布了吗？',\n      });\n      await AccessControlService.setClientEventOwner(clientId, event.id);\n    });\n\n    after(async function() {\n      await Event.destroy({\n        where: {\n          name: '浪潮今天发布了吗？',\n        },\n      });\n\n      await HeaderImage.destroy({\n        where: {\n          sourceUrl: 'https://langchao.org/',\n        },\n      });\n    });\n\n    it('should return success after creating header image', function(done) {\n      agent\n        .post(`/event/${event.id}/header_image`)\n        .send({\n          imageUrl: 'https://assets.v2land.net/750x200/default.jpg',\n          source: '浪潮',\n          sourceUrl: 'https://langchao.co/',\n        })\n        .expect(201, done);\n    });\n\n    it('should return success after updating header image', function(done) {\n      agent\n        .put(`/event/${event.id}/header_image`)\n        .send({\n          imageUrl: 'https://assets.v2land.net/750x300/default.jpg',\n          source: '浪潮',\n          sourceUrl: 'https://langchao.co/',\n        })\n        .expect(201, done);\n    });\n\n    it('should not return success when updating header image with wrong format', function(done) {\n      agent\n        .put(`/event/${event.id}/header_image`)\n        .send({\n          imageUrl: 'hfdshjk.jpg',\n          source: '浪潮',\n          sourceUrl: '<script></script>',\n        })\n        .expect(400, done);\n    });\n  });\n\n  describe('Event List', function() {\n    before(async function() {\n      await sequelize.query(`DELETE FROM commit`);\n      await sequelize.query(`DELETE FROM event`);\n      for (let i = 0; i < 3; i++) {\n        event = await Event.create({\n          name: '浪潮测试' + (i + 1),\n          status: 'admitted',\n          description: '浪潮测试1',\n        });\n        const stack = await Stack.create({\n          eventId: event.id,\n          title: 'yoyo',\n          status: 'admitted',\n          order: 1,\n          time: new Date(),\n        });\n        const news = await News.create({\n          title: 'abc',\n          source: 'Surge',\n          abstract: 'S U R G E',\n          time: new Date(),\n          url: 'https://langchao.org/' + event.id,\n          status: 'admitted',\n        });\n        await EventStackNews.create({\n          eventId: event.id,\n          stackId: stack.id,\n          newsId: news.id,\n        });\n        await CommitService.makeCommit(event.id, clientId, 'hey');\n      }\n    });\n\n    it('should have list', async function() {\n      const res = await agent\n        .get(`/event?page=1&status=admitted`)\n        .expect(200);\n      const eventList: ({ name: string })[] = res.body.eventList;\n      assert.equal(eventList.length, 3);\n      eventList.forEach((value, index) => {\n        assert.equal(value.name, '浪潮测试' + (3 - index));\n      });\n    });\n  });\n});\n"],"sourceRoot":"../../../../src"}