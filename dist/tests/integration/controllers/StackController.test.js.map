{"version":3,"sources":["../tests/integration/controllers/StackController.test.ts"],"names":[],"mappings":"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","file":"StackController.test.js","sourcesContent":["import request from 'supertest';\nimport assert from 'assert';\nimport { Client, Event, sequelize } from '@Models';\nimport app from '~/app';\nimport { AccessControlService } from '@Services';\n\nlet agent: request.SuperTest<request.Test>;\n\nconst testEmail = process.env.TEST_EMAIL ? process.env.TEST_EMAIL : 'vincent@langchao.org';\nconst testUsername = 'CCAVAI';\n\ndescribe('StackController', function() {\n  const stacks: ({ id: number })[] = [];\n  let event: Event;\n  describe('createEvent', function() {\n    before(async function() {\n      agent = request.agent(app);\n\n      await sequelize.query(`DELETE FROM commit`);\n      await sequelize.query(`DELETE FROM stack`);\n      await sequelize.query(`DELETE FROM event`);\n      await sequelize.query(`DELETE FROM client`);\n\n      const client = await Client.create({\n        username: testUsername,\n        nickname: testUsername,\n        password: '$2b$10$8njIkPFgDouZsKXYrkYF4.xqShsOPMK9WHEU7aou4FAeuvzb4WRmi',\n        email: testEmail,\n      });\n\n      await AccessControlService.addUserRoles(client.id, 'editors');\n\n      await agent\n        .post('/client/login')\n        .send({\n          username: testUsername,\n          password: '666',\n        });\n\n      event = await Event.create({\n        name: '小熊维尼',\n        description: '吃蜂蜜',\n        status: 'admitted',\n      });\n      await AccessControlService.setClientEventOwner(client.id, event.id);\n    });\n\n    it('should create stack successfully', async function() {\n      const resp1 = await agent\n        .post(`/event/${event.id}/stack`)\n        .send({\n          title: '111',\n          description: '111',\n          order: -1,\n          tiem: new Date(),\n        })\n        .expect(201);\n\n      stacks.push(resp1.body.stack);\n\n      const resp2 = await agent\n        .post(`/event/${event.id}/stack`)\n        .send({\n          title: '222',\n          description: '222',\n          order: -1,\n          tiem: new Date(),\n        })\n        .expect(201);\n\n      stacks.push(resp2.body.stack);\n    });\n\n    it('should update stack successfully', async function() {\n      for (const stack of stacks) {\n        const res = await agent\n          .post(`/event/${event.id}/news`)\n          .send({\n            url: `https://langchao.org/${Date.now()}`,\n            source: 'source',\n            title: '浪潮今天不上线',\n            abstract: '浪潮今天不上线',\n            time: new Date(),\n            stackId: stack.id,\n          });\n\n        await agent\n          .put(`/news/${res.body.news.id}`)\n          .send({\n            status: 'admitted',\n          });\n\n        await agent\n          .put(`/stack/${stack.id}`)\n          .send({\n            status: 'admitted',\n            order: 1,\n          })\n          .expect(201);\n      }\n    });\n\n    it('should get stacks successfully', async function() {\n      const { body } = await agent\n        .get(`/event/${event.id}`)\n        .expect(200);\n\n      const { stacks } = body;\n      assert.equal(stacks.length, 2);\n    });\n  });\n});\n\n"],"sourceRoot":"../../../../src"}