{"version":3,"sources":["../loadSequelize.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAAiD;AACjD,qEAA6C;AAC7C,gDAAkC;AAClC,gDAAwB;AACxB,MAAM,MAAM,GAAG,IAAA,cAAI,GAAE,CAAC;AAEtB,MAAM,EAAE,UAAU,EAAE,GAAG,oBAAU,CAAC;AAClC,IAAI,OAAO,GAAuD,OAAO,CAAC,GAAG,CAAC,iBAAiB,KAAK,OAAO,CAAC;AAC5G,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACpD,OAAO,GAAG,CAAC,GAAW,EAAE,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC,CAAC;CACH;KAAM,IAAI,OAAO,EAAE;IAClB,OAAO,GAAG,CAAC,GAAW,EAAE,EAAE;QACxB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC,CAAC;CACH;AAEY,QAAA,SAAS,GAAG,IAAI,gCAAS,CAAC;IACrC,QAAQ,EAAE,UAAU,CAAC,QAAQ;IAC7B,OAAO,EAAE,UAAU;IACnB,QAAQ,EAAE,UAAU,CAAC,IAAI;IACzB,QAAQ,EAAE,UAAU,CAAC,QAAQ;IAC7B,IAAI,EAAE,UAAU,CAAC,IAAI;IACrB,IAAI,EAAE,UAAU,CAAC,IAAI;IACrB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAE,MAAc,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnF,MAAM,EAAE,IAAI;IACZ,GAAG,EAAE,IAAI;IAET,IAAI,EAAE;QACJ,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,CAAC;QACN,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,KAAK;KACZ;IAED,OAAO;CACR,CAAC,CAAC;AAEH,SAAe,aAAa;;QAC1B,MAAM,iBAAS,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,iBAAS,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","file":"loadSequelize.js","sourcesContent":["import { Sequelize } from 'sequelize-typescript';\nimport datastores from '@Configs/datastores';\nimport * as models from '@Models';\nimport pino from 'pino';\nconst logger = pino();\n\nconst { postgresql } = datastores;\nlet logging: boolean | ((sql: string, timing?: number) => void) = process.env.SEQUELIZE_LOGGING !== 'false';\nif (logging && process.env.NODE_ENV === 'production') {\n  logging = (sql: string) => {\n    logger.info(sql);\n  };\n} else if (logging) {\n  logging = (sql: string) => {\n    console.info(sql);\n  };\n}\n\nexport const sequelize = new Sequelize({\n  database: postgresql.database,\n  dialect: 'postgres',\n  username: postgresql.user,\n  password: postgresql.password,\n  host: postgresql.host,\n  port: postgresql.port,\n  modelPaths: Object.keys(models).map(model => (models as any)[model]).filter(x => x),\n  native: true,\n  ssl: true,\n\n  pool: {\n    max: 22,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n\n  logging,\n});\n\nasync function loadSequelize() {\n  await sequelize.authenticate();\n  await sequelize.sync();\n}\n\nexport default loadSequelize;\n"],"sourceRoot":"../src"}