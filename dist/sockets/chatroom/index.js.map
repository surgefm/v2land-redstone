{"version":3,"sources":["../sockets/chatroom/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,mEAAqD;AACrD,qFAAuE;AACvE,sDAAkD;AAElD,kEAA0C;AAE1C,SAAwB,YAAY,CAAC,EAAU;IAC7C,MAAM,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,sBAAY,CAAC,CAAC;IACrC,QAAQ,CAAC,GAAG,CAAC,wBAAU,CAAC,CAAC;IACzB,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;QACnC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,CAAO,IAA2B,EAAE,GAAsB,EAAE,KAAe,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;YAChH,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YAC9C,MAAM,SAAS,GAAG,IAAI,KAAK,QAAQ;gBACjC,CAAC,CAAC,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,QAAQ,EAAE,GAAe,CAAC;gBACjF,CAAC,CAAC,MAAM,oBAAoB,CAAC,2BAA2B,CAAC,QAAQ,EAAE,GAAa,CAAC,CAAC;YACpF,IAAI,CAAC,SAAS,EAAE;gBACd,OAAO,EAAE,CAAC,uCAAuC,CAAC,CAAC;aACpD;YACD,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAClD,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5B,EAAE,CAAC,IAAI,EAAE;gBACP,QAAQ,EAAE,MAAM,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC;gBACnD,OAAO,EAAE,MAAM,WAAW,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC;aACrD,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAO,IAA2B,EAAE,GAAsB,EAAE,OAAe,EAAE,KAAe,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;YAChI,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YAC9C,MAAM,SAAS,GAAG,IAAI,KAAK,QAAQ;gBACjC,CAAC,CAAC,MAAM,oBAAoB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAe,CAAC;gBACzE,CAAC,CAAC,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,QAAQ,EAAE,GAAa,CAAC,CAAC;YAClF,IAAI,CAAC,SAAS,EAAE;gBACd,OAAO,EAAE,CAAC,oCAAoC,CAAC,CAAC;aACjD;YACD,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5D,EAAE,EAAE,CAAC;QACP,CAAC,CAAA,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAO,SAAiB,EAAE,KAAe,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;YAC7E,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YAC9C,MAAM,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnD,EAAE,EAAE,CAAC;QACP,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAtCD,+BAsCC","file":"index.js","sourcesContent":["import { Server } from 'socket.io';\nimport * as ChatService from '@Services/ChatService';\nimport * as AccessControlService from '@Services/AccessControlService';\nimport { isLoggedIn } from '@Sockets/middlewares';\n\nimport chatroomPath from './chatroomPath';\n\nexport default function loadChatroom(io: Server) {\n  const newsroom = io.of(chatroomPath);\n  newsroom.use(isLoggedIn);\n  newsroom.on('connection', (socket) => {\n    socket.on('join chatroom', async (type: 'client' | 'newsroom', ids: number | number[], cb: Function = () => {}) => {\n      const { clientId } = socket.handshake.session;\n      const hasAccess = type === 'client'\n        ? await AccessControlService.isAllowedToViewClientChat(clientId, ids as number[])\n        : await AccessControlService.isAllowedToViewNewsroomChat(clientId, ids as number);\n      if (!hasAccess) {\n        return cb('You donâ€™t have access to the chatroom');\n      }\n      const roomName = ChatService.getChatId(type, ids);\n      await socket.join(roomName);\n      cb(null, {\n        messages: await ChatService.loadMessages(type, ids),\n        members: await ChatService.getChatMembers(type, ids),\n      });\n    });\n\n    socket.on('send message', async (type: 'client' | 'newsroom', ids: number | number[], message: string, cb: Function = () => {}) => {\n      const { clientId } = socket.handshake.session;\n      const hasAccess = type === 'client'\n        ? await AccessControlService.isAllowedToTalkTo(clientId, ids as number[])\n        : await AccessControlService.isAllowedToChatInNewsroom(clientId, ids as number);\n      if (!hasAccess) {\n        return cb('You have no access to the chatroom');\n      }\n      await ChatService.sendMessage(type, clientId, message, ids);\n      cb();\n    });\n\n    socket.on('read message', async (messageId: string, cb: Function = () => {}) => {\n      const { clientId } = socket.handshake.session;\n      await ChatService.readMessage(clientId, messageId);\n      cb();\n    });\n  });\n}\n"],"sourceRoot":"../../../src"}