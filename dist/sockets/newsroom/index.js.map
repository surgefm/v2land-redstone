{"version":3,"sources":["../sockets/newsroom/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Server } from 'socket.io';\nimport { Event } from '@Models';\nimport { ResourceLockService, AccessControlService, RedisService } from '@Services';\nimport { isLoggedIn } from '@Sockets/middlewares';\nimport _ from 'lodash';\n\nimport getRoomName from './getRoomName';\nimport newsroomPath from './newsroomPath';\n\nimport addEventToStack from './addEventToStack';\nimport addEventToTag from './addEventToTag';\nimport addNewsToEvent from './addNewsToEvent';\nimport addNewsToStack from './addNewsToStack';\nimport createStack from './createStack';\nimport inviteEditor from './inviteEditor';\nimport inviteManager from './inviteManager';\nimport inviteViewer from './inviteViewer';\nimport lockResource from './lockResource';\nimport makeCommit from './makeCommit';\nimport removeEditor from './removeEditor';\nimport removeManager from './removeManager';\nimport removeViewer from './removeViewer';\nimport removeEventFromStack from './removeEventFromStack';\nimport removeEventFromTag from './removeEventFromTag';\nimport removeNewsFromEvent from './removeNewsFromEvent';\nimport removeNewsFromStack from './removeNewsFromStack';\nimport unlockResource from './unlockResource';\nimport updateEvent from './updateEvent';\nimport updateHeaderImage from './updateHeaderImage';\nimport updateStack from './updateStack';\nimport updateStackOrders from './updateStackOrders';\n\nexport default function loadNewsroom(io: Server) {\n  const newsroom = io.of(newsroomPath);\n  newsroom.use(isLoggedIn);\n  newsroom.on('connection', (socket) => {\n    socket.on('join newsroom', async (eventId: number, cb: Function = () => {}) => {\n      const { clientId } = socket.handshake.session;\n      const event = await Event.findByPk(eventId);\n      const hasAccess = event.status === 'admitted' ||\n        await AccessControlService.isAllowedToViewEvent(clientId, eventId);\n\n      if (!hasAccess) {\n        return cb('You donâ€™t have access to the newsroom');\n      }\n      const roomName = getRoomName(eventId);\n      await socket.join(roomName);\n      await RedisService.hset(`socket:client-${clientId}-${eventId}`, socket.id, true);\n\n      socket.in(roomName).emit('join newsroom', { eventId, clientId });\n      const resourceLocks = await ResourceLockService.getEventLockedResourceList(eventId);\n      const roles = await AccessControlService.getEventClients(eventId);\n      if (RedisService.redis) {\n        const sockets = await newsroom.in(roomName).allSockets();\n        const clients = Array.from(sockets).map(client => `socket:${client}`);\n        const clientIds = clients.length === 0 ? [] : _.uniq(await RedisService.mget(...clients));\n        cb(null, {\n          resourceLocks,\n          clients: clientIds,\n          roles,\n        });\n      } else {\n        cb(null, {\n          resourceLocks,\n          clients: [clientId],\n          roles,\n        });\n      }\n    });\n\n    const leaveNewsroom = async (eventId: number, cb: Function = () => {}) => {\n      const { clientId } = socket.handshake.session;\n      const rooms: string[] = typeof eventId === 'number'\n        ? [getRoomName(eventId)]\n        : Object.keys(socket.rooms).map(key => (socket.rooms as any)[key]);\n\n      for (let i = 0; i < rooms.length; i++) {\n        const split = rooms[i].split('-');\n        const eventId = +split[split.length - 1];\n        socket.in(rooms[i]).emit('leave newsroom', { eventId, clientId });\n        socket.leave(rooms[i]);\n        await RedisService.hdel(`socket:client-${clientId}-${eventId}`, socket.id);\n      }\n\n      cb();\n    };\n\n    socket.on('leave newsroom', leaveNewsroom);\n    socket.on('disconnect', () => leaveNewsroom(null));\n\n    addEventToStack(socket);\n    addEventToTag(socket);\n    addNewsToEvent(socket);\n    addNewsToStack(socket);\n    createStack(socket);\n    inviteEditor(socket);\n    inviteManager(socket);\n    inviteViewer(socket);\n    lockResource(socket);\n    makeCommit(socket);\n    removeEditor(socket, io);\n    removeManager(socket, io);\n    removeViewer(socket, io);\n    removeEventFromStack(socket);\n    removeEventFromTag(socket);\n    removeNewsFromEvent(socket);\n    removeNewsFromStack(socket);\n    unlockResource(socket);\n    updateEvent(socket);\n    updateHeaderImage(socket);\n    updateStack(socket);\n    updateStackOrders(socket);\n  });\n}\n"],"sourceRoot":"../../../src"}