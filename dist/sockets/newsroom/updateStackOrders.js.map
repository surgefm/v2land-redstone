{"version":3,"sources":["../sockets/newsroom/updateStackOrders.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,qCAA2C;AAC3C,oDAAuB;AACvB,yCAA8E;AAE9E,gEAAwC;AAOxC,SAAwB,iBAAiB,CAAC,MAAc;IACtD,MAAM,CAAC,EAAE,CAAC,qBAAqB,EAAE,CAAO,OAAe,EAAE,MAAc,EAAE,KAAe,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;QAClG,IAAI,CAAC,gBAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACtB,OAAO,EAAE,CAAC,sBAAsB,CAAC,CAAC;SACnC;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;QAC9C,MAAM,UAAU,GAAG,MAAM,gCAAoB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACtF,IAAI,CAAC,UAAU;YAAE,OAAO,EAAE,CAAC,yCAAyC,CAAC,CAAC;QAEtE,KAAK,MAAM,EAAE,OAAO,EAAE,IAAI,MAAM,EAAE;YAChC,MAAM,KAAK,GAAG,MAAM,eAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YACzE,IAAI,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE;gBAC7B,OAAO,EAAE,CAAC,6CAA6C,CAAC,CAAC;aAC1D;SACF;QAED,MAAM,mBAAS,CAAC,WAAW,CAAC,CAAM,WAAW,EAAC,EAAE;YAC9C,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,wBAAY,CAAC,WAAW,CAAC;gBACxE,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,EAAE,KAAK,EAAE;gBACf,QAAQ;gBACR,WAAW;aACZ,CAAC,CAAC,CAAC;YACJ,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzB,MAAM,yBAAa,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,OAAO;gBACd,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,QAAQ;gBACf,MAAM,EAAE,mBAAmB;aAC5B,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;YAEpB,MAAM,CAAC,EAAE,CAAC,IAAA,qBAAW,EAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE;gBAC1D,OAAO;gBACP,MAAM;aACP,CAAC,CAAC;YACH,EAAE,EAAE,CAAC;QACP,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC;AAvCD,oCAuCC","file":"updateStackOrders.js","sourcesContent":["import { Socket } from 'socket.io';\nimport { sequelize, Stack } from '@Models';\nimport _ from 'lodash';\nimport { StackService, AccessControlService, RecordService } from '@Services';\n\nimport getRoomName from './getRoomName';\n\ntype data = {\n  stackId: number;\n  order: number;\n}\n\nexport default function updateStackOrders(socket: Socket) {\n  socket.on('update stack orders', async (eventId: number, stacks: data[], cb: Function = () => {}) => {\n    if (!_.isArray(stacks)) {\n      return cb('Invalid inputï¼šstacks');\n    }\n\n    const { clientId } = socket.handshake.session;\n    const haveAccess = await AccessControlService.isAllowedToEditEvent(clientId, eventId);\n    if (!haveAccess) return cb('You are not allowed to edit this event.');\n\n    for (const { stackId } of stacks) {\n      const stack = await Stack.findByPk(stackId, { attributes: ['eventId'] });\n      if (stack.eventId !== eventId) {\n        return cb('The stacks need to belong to the same event');\n      }\n    }\n\n    await sequelize.transaction(async transaction => {\n      const queue = stacks.map(({ stackId, order }) => StackService.updateStack({\n        id: stackId,\n        data: { order },\n        clientId,\n        transaction,\n      }));\n      await Promise.all(queue);\n      await RecordService.update({\n        model: 'Event',\n        target: eventId,\n        owner: clientId,\n        action: 'updateStackOrders',\n      }, { transaction });\n\n      socket.in(getRoomName(eventId)).emit('update stack orders', {\n        eventId,\n        stacks,\n      });\n      cb();\n    });\n  });\n}\n"],"sourceRoot":"../../../src"}