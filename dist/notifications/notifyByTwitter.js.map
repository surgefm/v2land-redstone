{"version":3,"sources":["../notifications/notifyByTwitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,yCAAwD;AACxD,gDAAwB;AACxB,MAAM,MAAM,GAAG,IAAA,cAAI,GAAE,CAAC;AAEtB,SAAe,eAAe,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAI/D;;QACC,IAAI,CAAC,OAAO,EAAE;YACZ,YAAY,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;YAC1B,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,YAAY,CAAC,UAAU,eAAe,CAAC,CAAC,CAAC;SACjF;QAED,IAAI,OAAO,GAAG,uBAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/D,OAAO,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC;QACvC,OAAO,0BAAc,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;CAAA;AAED,kBAAe,eAAe,CAAC","file":"notifyByTwitter.js","sourcesContent":["/**\n * 使用用户的绑定 Twitter 账号发布推文\n */\nimport { Contact, Subscription } from '@Models';\nimport { UtilService, TwitterService } from '@Services';\nimport pino from 'pino';\nconst logger = pino();\n\nasync function notifyByTwitter({ contact, subscription, template }: {\n  contact: Contact;\n  subscription: Subscription;\n  template: any;\n}) {\n  if (!contact) {\n    subscription.status = 'failed';\n    await subscription.save();\n    return logger.error(new Error(`未找到用户 ${subscription.subscriber} 的 Twitter 绑定`));\n  }\n\n  let message = UtilService.shortenString(template.message, 100);\n  message += ' ' + template.url + ' #浪潮';\n  return TwitterService.tweet(contact.auth, message);\n}\n\nexport default notifyByTwitter;\n"],"sourceRoot":"../../src"}