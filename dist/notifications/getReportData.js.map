{"version":3,"sources":["../notifications/getReportData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;GAEG;AACH,qCAAmF;AACnF,yCAAwC;AACxC,yCAA4C;AAC5C,oDAAuB;AACvB,sEAAqC;AAErC,SAAe,aAAa,CAAC,MAAc,EAAE,EAAE,WAAW,EAAgC;;QACxF,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YACvD,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE;YAC5B,OAAO,EAAE,CAAC,eAAK,CAAC;YAChB,WAAW;SACZ,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEzB,MAAM,kBAAkB,GAAG,gBAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAE5D,MAAM,MAAM,GAAG,MAAM,gBAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,MAAM,gBAAM,CAAC,KAAK,CAAC;YACrC,KAAK,EAAE;gBACL,MAAM,EAAE,uBAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC;gBAC/C,KAAK,EAAE,MAAM,CAAC,KAAK;aACpB;SACF,CAAC,CAAC;QACH,OAAO;YACL,aAAa;YACb,kBAAkB;YAClB,IAAI,EAAE,OAAO,EAAE;YACf,SAAS,EAAE,uBAAW,CAAC,KAAK;YAC5B,WAAW,EAAE,WAAW,GAAG,CAAC;YAC5B,MAAM;SACP,CAAC;IACJ,CAAC;CAAA;AAED,SAAe,mBAAmB,CAAC,YAA0B;;QAC3D,IAAI,CAAC,YAAY,CAAC,OAAO;YAAE,OAAO;QAClC,YAAY,CAAC,KAAK,GAAG,MAAM,eAAK,CAAC,OAAO,CAAC;YACvC,KAAK,EAAE;gBACL,OAAO,EAAE,YAAY,CAAC,OAAO;gBAC7B,MAAM,EAAE,UAAU;gBAClB,KAAK,EAAE,EAAE,CAAC,cAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;aACvB;YACD,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC1B,OAAO,EAAE,CAAC;oBACR,KAAK,EAAE,cAAI;oBACX,EAAE,EAAE,MAAM;oBACV,KAAK,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;oBAC7B,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;oBACxB,QAAQ,EAAE,KAAK;iBAChB,CAAC;SACH,CAAC,CAAC;QACH,IAAI,YAAY,CAAC,KAAK,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE;YACjD,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAChD;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CAAA;AAED,SAAS,OAAO;IACd,MAAM,IAAI,GAAG,IAAA,yBAAM,EAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IAElD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACxB,MAAM,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;IACtC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACnC,CAAC;AAED,kBAAe,aAAa,CAAC","file":"getReportData.js","sourcesContent":["/**\n * Prepare data for notification reports.\n */\nimport { Event, Report, Client, Stack, News, Record, Notification } from '@Models';\nimport { ModeService } from '@Services';\nimport { Op, Transaction } from 'sequelize';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\n\nasync function getReportData(report: Report, { transaction }: { transaction: Transaction }) {\n  const notifications = await report.$get('notifications', {\n    where: { status: 'pending' },\n    include: [Event],\n    transaction,\n  });\n\n  const queue = notifications.map(n => getNotificationData(n));\n  await Promise.all(queue);\n\n  const notificationGroups = _.groupBy(notifications, 'mode');\n\n  const client = await Client.findByPk(report.owner);\n  const reportCount = await Record.count({\n    where: {\n      action: ModeService.getRecordActionName(report),\n      owner: report.owner,\n    },\n  });\n  return {\n    notifications,\n    notificationGroups,\n    date: getDate(),\n    modeNames: ModeService.names,\n    reportCount: reportCount + 1,\n    client,\n  };\n}\n\nasync function getNotificationData(notification: Notification) {\n  if (!notification.eventId) return;\n  notification.stack = await Stack.findOne({\n    where: {\n      eventId: notification.eventId,\n      status: 'admitted',\n      order: { [Op.gte]: 0 },\n    },\n    order: [['order', 'DESC']],\n    include: [{\n      model: News,\n      as: 'news',\n      where: { status: 'admitted' },\n      order: [['time', 'ASC']],\n      required: false,\n    }],\n  });\n  if (notification.stack && notification.stack.news) {\n    notification.news = notification.stack.news[0];\n  }\n  return notification;\n}\n\nfunction getDate() {\n  const date = moment(new Date).tz('Asia/Shanghai');\n\n  const year = date.year();\n  const month = date.month();\n  const day = date.date();\n  const str = `${year}.${month}.${day}`;\n  return { year, month, day, str };\n}\n\nexport default getReportData;\n"],"sourceRoot":"../../src"}