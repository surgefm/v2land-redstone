{"version":3,"sources":["../notifications/notifyByWeibo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,yCAAsD;AACtD,gFAAwD;AACxD,gDAAwB;AACxB,MAAM,MAAM,GAAG,IAAA,cAAI,GAAE,CAAC;AAEtB,SAAe,aAAa,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAI7D;;QACC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAA,6BAAmB,EAAC,YAAY,CAAC,CAAC;YACxC,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,YAAY,CAAC,UAAU,QAAQ,CAAC,CAAC,CAAC;SAC1E;QAED,MAAM,OAAO,GAAG,uBAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC;cAC5D,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;QACvB,OAAO,wBAAY,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","file":"notifyByWeibo.js","sourcesContent":["/**\n * 使用用户的绑定新浪账号发布微博\n */\nimport { Contact, Subscription } from '@Models';\nimport { UtilService, WeiboService } from '@Services';\nimport disableSubscription from './disableSubscription';\nimport pino from 'pino';\nconst logger = pino();\n\nasync function notifyByWeibo({ contact, subscription, template }: {\n  contact: Contact;\n  subscription: Subscription;\n  template: any;\n}) {\n  if (!contact) {\n    await disableSubscription(subscription);\n    return logger.error(new Error(`未找到用户 ${subscription.subscriber} 的微博绑定`));\n  }\n\n  const message = UtilService.shortenString(template.message, 100)\n    + ' ' + template.url;\n  return WeiboService.post(contact.auth, message);\n}\n\nexport default notifyByWeibo;\n"],"sourceRoot":"../../src"}