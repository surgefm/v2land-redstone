{"version":3,"sources":["../notifications/notify.ts"],"names":[],"mappings":"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","file":"notify.js","sourcesContent":["/**\n * 发出推送\n */\nimport {\n  Event, Notification, News, Stack, Subscription,\n  Record, Contact, Auth, EventStackNews,\n} from '@Models';\nimport { ModeService } from '@Services';\nimport { Op } from 'sequelize';\nimport notifyByEmail from './notifyByEmail';\nimport notifyByEmailDailyReport from './notifyByEmailDailyReport';\nimport notifyByTwitter from './notifyByTwitter';\nimport notifyByTwitterAt from './notifyByTwitterAt';\nimport notifyByWeibo from './notifyByWeibo';\nimport notifyByWeiboAt from './notifyByWeiboAt';\nimport notifyByMobileAppNotification from './notifyByMobileAppNotification';\nimport pino from 'pino';\nconst logger = pino();\n\nasync function notify(notification: Notification) {\n  const eventId = notification.eventId;\n  const event = notification.event || await Event.findByPk(eventId);\n  const mode = ModeService.getMode(notification.mode);\n  let news: News & { EventStackNews: EventStackNews };\n  let stack;\n  if (mode.needNews) {\n    const newsList = await event.$get('news', {\n      where: {\n        eventId: notification.eventId,\n        status: 'admitted',\n      },\n      order: [['time', 'DESC']],\n    });\n    if (newsList.length === 0) return;\n    news = newsList[0];\n  }\n\n  if (mode.needStack) {\n    stack = await Stack.findOne({\n      where: {\n        eventId: notification.eventId,\n        order: { [Op.gte]: 0 },\n      },\n      order: [['order', 'DESC']],\n    });\n    if (!stack) return;\n  }\n\n  const template = await mode.getTemplate({\n    notification,\n    event,\n    news: news, // news and stack may be undefined in some cases.\n    stack: stack,\n  });\n\n  const notificationData: any = notification.get({ plain: true });\n  notificationData.eventId = event.id;\n\n  const subscriptions = await Subscription.findAll({\n    where: {\n      mode: notification.mode,\n      eventId: notification.eventId,\n      status: 'active',\n    },\n  });\n\n  const sendNotification = async (subscription: Subscription) => {\n    const data = {\n      model: 'Subscription',\n      target: subscription.id,\n      action: 'notify',\n    };\n\n    const same = await Record.count({\n      where: {\n        ...data,\n        'data.id': notificationData.id,\n      },\n    });\n\n    if (same > 0) {\n      // Already notified.\n      return;\n    }\n\n    const queue = [];\n\n    const contactList = await Contact.findAll({\n      where: {\n        subscriptionId: subscription.id,\n        status: 'active',\n      },\n      include: [{\n        model: Auth,\n        as: 'auth',\n        required: false,\n      }],\n    });\n\n    for (const contact of contactList) {\n      if (!contact.auth && ['twitter', 'weibo', 'telegram'].includes(contact.type)) {\n        contact.auth = await Auth.findOne({\n          where: {\n            site: contact.type,\n            profileId: contact.profileId,\n          },\n          order: [['updatedAt', 'DESC']],\n        });\n      }\n      const inputs = { contact, subscription, template, notification };\n      switch (contact.method) {\n      case 'email':\n        queue.push(notifyByEmail(inputs));\n        break;\n      case 'emailDailyReport':\n        queue.push(notifyByEmailDailyReport(inputs));\n        break;\n      case 'twitter':\n        queue.push(notifyByTwitter(inputs));\n        break;\n      case 'twitterAt':\n        queue.push(notifyByTwitterAt(inputs));\n        break;\n      case 'weibo':\n        queue.push(notifyByWeibo(inputs));\n        break;\n      case 'weiboAt':\n        queue.push(notifyByWeiboAt(inputs));\n        break;\n      case 'mobileAppNotification':\n        queue.push(notifyByMobileAppNotification(inputs));\n        break;\n      }\n    }\n    await Promise.all(queue);\n  };\n\n  const promises = subscriptions.map(s => sendNotification(s));\n  try {\n    await Promise.all(promises);\n  } catch (err) {\n    logger.error(err);\n  }\n\n  const nextTime = await mode.notified({\n    notification,\n    event,\n    news: news, // news and stack may be undefined in some cases.\n    stack: stack,\n  });\n\n  await Notification.update({\n    status: 'complete',\n  }, {\n    where: { id: notification.id },\n  });\n\n  if (!['new', 'EveryNewStack'].includes(notification.mode)) {\n    await Notification.create({\n      eventId: notification.eventId,\n      mode: notification.mode,\n      time: nextTime,\n      status: 'pending',\n    });\n  }\n}\n\nexport default notify;\n"],"sourceRoot":"../../src"}