{"version":3,"sources":["../models/Chat.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+DAS8B;AAE9B,oDAA4B;AAC5B,8DAAsC;AAMtC,IAAM,IAAI,GAAV,MAAM,IAAK,SAAQ,4BAAW;CAW7B,CAAA;AAVC;IAAC,iCAAU;IACV,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;;gCACX;AAEX;IAAC,IAAA,8BAAO,EAAC,GAAG,EAAE,CAAC,oBAAU,CAAC;;qCACJ;AAEtB;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,eAAK,CAAC;IACvB,6BAAM;;qCACS;AAVZ,IAAI;IAJT,IAAA,4BAAK,EAAC;QACL,SAAS,EAAE,MAAM;QACjB,eAAe,EAAE,IAAI;KACN,CAAC;GACZ,IAAI,CAWT;AAED,kBAAe,IAAI,CAAC","file":"Chat.js","sourcesContent":["import {\n  Table,\n  Column,\n  Model,\n  TableOptions,\n  ForeignKey,\n  HasMany,\n  PrimaryKey,\n  DataType,\n} from 'sequelize-typescript';\n\nimport Event from './Event';\nimport ChatMember from './ChatMember';\n\n@Table({\n  modelName: 'chat',\n  freezeTableName: true,\n} as TableOptions)\nclass Chat extends Model<Chat> {\n  @PrimaryKey\n  @Column(DataType.TEXT)\n  id: string;\n\n  @HasMany(() => ChatMember)\n  members: ChatMember[];\n\n  @ForeignKey(() => Event)\n  @Column\n  eventId: number;\n}\n\nexport default Chat;\n"],"sourceRoot":"../../src"}