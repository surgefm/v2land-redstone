{"version":3,"sources":["../models/Stack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+DAY8B;AAE9B,oDAA4B;AAC5B,kDAA0B;AAC1B,sEAA8C;AAO9C,IAAM,KAAK,GAAX,MAAM,KAAM,SAAQ,4BAAY;CA6C/B,CAAA;AA5CC;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;;oCACR;AAEd;IAAC,IAAA,gCAAS,EAAC,IAAI,CAAC;IACf,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;;0CACD;AAErB;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,SAAS,CAAC;IAClB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;;qCAC1E;AAEf;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,CAAC,CAAC,CAAC;IACX,IAAA,6BAAM,EAAC,+BAAQ,CAAC,OAAO,CAAC;;oCACX;AAEd;IAAC,IAAA,gCAAS,EAAC,IAAI,CAAC;IACf,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;8BAChB,IAAI;mCAAC;AAEX;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,eAAK,CAAC;IACvB,6BAAM;;sCACS;AAEhB;IAAC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,eAAK,EAAE,SAAS,CAAC;8BAC3B,eAAK;oCAAC;AAEb;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,eAAK,CAAC;IACvB,6BAAM;;2CACc;AAErB;IAAC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,eAAK,EAAE,cAAc,CAAC;8BAC3B,eAAK;yCAAC;AAElB;IAAC,IAAA,oCAAa,EAAC,GAAG,EAAE,CAAC,cAAI,EAAE,GAAG,EAAE,CAAC,wBAAc,CAAC;;mCACE;AAElD;IAAC,IAAA,8BAAO,EAAC,GAAG,EAAE,CAAC,wBAAc,CAAC;;6CACG;AAzC7B,KAAK;IAJV,IAAA,4BAAK,EAAC;QACL,SAAS,EAAE,OAAO;QAClB,eAAe,EAAE,IAAI;KACN,CAAC;GACZ,KAAK,CA6CV;AAED,kBAAe,KAAK,CAAC","file":"Stack.js","sourcesContent":["import {\n  Table,\n  Column,\n  Model,\n  DataType,\n  TableOptions,\n  AllowNull,\n  Default,\n  ForeignKey,\n  BelongsTo,\n  HasMany,\n  BelongsToMany,\n} from 'sequelize-typescript';\n\nimport Event from './Event';\nimport News from './News';\nimport EventStackNews from './EventStackNews';\nimport Record from './Record';\n\n@Table({\n  modelName: 'stack',\n  freezeTableName: true,\n} as TableOptions)\nclass Stack extends Model<Stack> {\n  @AllowNull(false)\n  @Column(DataType.TEXT)\n  title: string;\n\n  @AllowNull(true)\n  @Column(DataType.TEXT)\n  description?: string;\n\n  @AllowNull(false)\n  @Default('pending')\n  @Column(DataType.ENUM('pending', 'admitted', 'invalid', 'rejected', 'hidden', 'removed'))\n  status: string;\n\n  @AllowNull(false)\n  @Default(-1)\n  @Column(DataType.INTEGER)\n  order: number;\n\n  @AllowNull(true)\n  @Column(DataType.DATE)\n  time: Date;\n\n  @ForeignKey(() => Event)\n  @Column\n  eventId: number;\n\n  @BelongsTo(() => Event, 'eventId')\n  event: Event;\n\n  @ForeignKey(() => Event)\n  @Column\n  stackEventId: number;\n\n  @BelongsTo(() => Event, 'stackEventId')\n  stackEvent: Event;\n\n  @BelongsToMany(() => News, () => EventStackNews)\n  news: (News & {EventStackNews: EventStackNews})[];\n\n  @HasMany(() => EventStackNews)\n  eventStackNews: EventStackNews[];\n\n  newsCount?: number;\n  contribution?: Record[];\n}\n\nexport default Stack;\n"],"sourceRoot":"../../src"}