{"version":3,"sources":["../models/Report.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+DAW8B;AAE9B,sDAA8B;AAC9B,kEAA0C;AAC1C,8EAAsD;AAMtD,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,4BAAa;CA8BjC,CAAA;AA7BC;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,IAAI,IAAI,EAAE,CAAC;IACnB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;8BAChB,IAAI;oCAAC;AAEX;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,OAAO,CAAC;IAChB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;;oCACvC;AAEb;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,OAAO,CAAC;IAChB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;;sCAC5B;AAEf;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,SAAS,CAAC;IAClB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;;sCACpD;AAEf;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,gBAAM,CAAC;IACxB,6BAAM;;qCACO;AAEd;IAAC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,gBAAM,EAAE,OAAO,CAAC;8BACxB,gBAAM;uCAAC;AAEhB;IAAC,IAAA,oCAAa,EAAC,GAAG,EAAE,CAAC,sBAAY,EAAE,GAAG,EAAE,CAAC,4BAAkB,EAAE,UAAU,EAAE,gBAAgB,CAAC;;6CAC5D;AA7B1B,MAAM;IAJX,IAAA,4BAAK,EAAC;QACL,SAAS,EAAE,QAAQ;QACnB,eAAe,EAAE,IAAI;KACN,CAAC;GACZ,MAAM,CA8BX;AAED,kBAAe,MAAM,CAAC","file":"Report.js","sourcesContent":["import {\n  Table,\n  Column,\n  Model,\n  DataType,\n  TableOptions,\n  AllowNull,\n  Default,\n  ForeignKey,\n  BelongsTo,\n  BelongsToMany,\n} from 'sequelize-typescript';\n\nimport Client from './Client';\nimport Notification from './Notification';\nimport ReportNotification from './ReportNotification';\n\n@Table({\n  modelName: 'report',\n  freezeTableName: true,\n} as TableOptions)\nclass Report extends Model<Report> {\n  @AllowNull(false)\n  @Default(new Date())\n  @Column(DataType.DATE)\n  time: Date;\n\n  @AllowNull(false)\n  @Default('daily')\n  @Column(DataType.ENUM('daily', 'weekly', 'monthly'))\n  type: string;\n\n  @AllowNull(false)\n  @Default('email')\n  @Column(DataType.ENUM('email', 'telegram'))\n  method: string;\n\n  @AllowNull(false)\n  @Default('pending')\n  @Column(DataType.ENUM('pending', 'ongoing', 'complete', 'invalid'))\n  status: string;\n\n  @ForeignKey(() => Client)\n  @Column\n  owner: number;\n\n  @BelongsTo(() => Client, 'owner')\n  ownedBy: Client;\n\n  @BelongsToMany(() => Notification, () => ReportNotification, 'reportId', 'notificationId')\n  notifications: Notification[];\n}\n\nexport default Report;\n"],"sourceRoot":"../../src"}