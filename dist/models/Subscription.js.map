{"version":3,"sources":["../models/Subscription.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+DAW8B;AAE9B,oDAA4B;AAC5B,sDAA8B;AAC9B,wDAAgC;AAMhC,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,4BAAmB;CAoC7C,CAAA;AAnCC;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CACnB,eAAe,EACf,wBAAwB,EACxB,KAAK,EAAE,sBAAsB,EAC7B,OAAO,EAAE,QAAQ,EAAE,SAAS,EAC5B,aAAa,CACd,CAAC;;0CACW;AAEb;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,8BAAO,EAAC,QAAQ,CAAC;IACjB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;;4CACjC;AAEf;IAAC,IAAA,gCAAS,EAAC,KAAK,CAAC;IAChB,IAAA,6BAAM,EAAC,+BAAQ,CAAC,IAAI,CAAC;;mDACA;AAEtB;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,eAAK,CAAC;IACvB,6BAAM;;6CACS;AAEhB;IAAC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,eAAK,EAAE,SAAS,CAAC;8BAC3B,eAAK;2CAAC;AAEb;IAAC,IAAA,iCAAU,EAAC,GAAG,EAAE,CAAC,gBAAM,CAAC;IACxB,6BAAM;;gDACY;AAEnB;IAAC,IAAA,gCAAS,EAAC,GAAG,EAAE,CAAC,gBAAM,EAAE,YAAY,CAAC;8BACxB,gBAAM;kDAAC;AAErB;IAAC,IAAA,8BAAO,EAAC,GAAG,EAAE,CAAC,iBAAO,EAAE,gBAAgB,CAAC;;8CACrB;AAnChB,YAAY;IAJjB,IAAA,4BAAK,EAAC;QACL,SAAS,EAAE,cAAc;QACzB,eAAe,EAAE,IAAI;KACN,CAAC;GACZ,YAAY,CAoCjB;AAED,kBAAe,YAAY,CAAC","file":"Subscription.js","sourcesContent":["import {\n  Table,\n  Column,\n  Model,\n  DataType,\n  TableOptions,\n  AllowNull,\n  Default,\n  ForeignKey,\n  BelongsTo,\n  HasMany,\n} from 'sequelize-typescript';\n\nimport Event from './Event';\nimport Client from './Client';\nimport Contact from './Contact';\n\n@Table({\n  modelName: 'subscription',\n  freezeTableName: true,\n} as TableOptions)\nclass Subscription extends Model<Subscription> {\n  @AllowNull(false)\n  @Column(DataType.ENUM(\n    'EveryNewStack',\n    '30DaysSinceLatestStack',\n    'new', '7DaysSinceLatestNews',\n    'daily', 'weekly', 'monthly',\n    'EveryFriday',\n  ))\n  mode: string;\n\n  @AllowNull(false)\n  @Default('active')\n  @Column(DataType.ENUM('active', 'unsubscribed'))\n  status: string;\n\n  @AllowNull(false)\n  @Column(DataType.TEXT)\n  unsubscribeId: string;\n\n  @ForeignKey(() => Event)\n  @Column\n  eventId: number;\n\n  @BelongsTo(() => Event, 'eventId')\n  event: Event;\n\n  @ForeignKey(() => Client)\n  @Column\n  subscriber: number;\n\n  @BelongsTo(() => Client, 'subscriber')\n  subscribedBy: Client;\n\n  @HasMany(() => Contact, 'subscriptionId')\n  contacts: Contact[];\n}\n\nexport default Subscription;\n"],"sourceRoot":"../../src"}