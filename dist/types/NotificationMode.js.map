{"version":3,"sources":["../types/NotificationMode.ts"],"names":[],"mappings":";;;;;;;;;;;;AAaA,MAAe,gBAAgB;IAA/B;QAME,mBAAc,GAAG,KAAK,CAAC;IAgBzB,CAAC;IAZO,MAAM,CAAC,KAA6B;;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;CAUF;AAEQ,4CAAgB;AACzB,kBAAe,gBAAgB,CAAC","file":"NotificationMode.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Event, News, Stack, Notification } from '@Models';\n\ninterface NotificationModeInput {\n  notification?: Notification;\n  event?: Event;\n  eventId?: number;\n  stack?: Stack;\n  stackId?: number;\n  news?: News;\n  newsId?: number;\n}\n\nabstract class NotificationMode {\n  name: string;\n  nickname: string;\n  needNews: boolean;\n  needStack: boolean;\n  isInterval: boolean;\n  keepLatestOnly = false;\n\n  abstract new(input?: NotificationModeInput): Promise<Date>;\n\n  async update(input?: NotificationModeInput): Promise<Date> {\n    return null;\n  }\n\n  abstract notified(input?: NotificationModeInput): Promise<Date>;\n\n  abstract getTemplate(input?: NotificationModeInput): Promise<{\n    subject: string;\n    message: string;\n    button: string;\n    url: string;\n  }>\n}\n\nexport { NotificationMode, NotificationModeInput };\nexport default NotificationMode;\n"],"sourceRoot":"../../src"}